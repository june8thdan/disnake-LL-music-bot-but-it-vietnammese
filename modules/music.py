# -*- coding: utf-8 -*-
import datetime
import json
import pprint
import traceback
import asyncio
from typing import Union, Optional
from random import shuffle

import aiofiles
import aiohttp
import disnake
import psutil
from aiohttp import ClientConnectorCertificateError
from disnake.ext import commands

import wavelink

from utils.client import BotCore
from utils.db import DBModel
from utils.music.errors import GenericError, MissingVoicePerms, NoVoice, PoolException, parse_error, EmptyFavIntegration
from utils.music.spotify import process_spotify, spotify_regex_w_user
from utils.music.checks import check_voice, has_player, has_source, is_requester, is_dj, \
    can_send_message_check, check_requester_channel, can_send_message, can_connect, check_deafen, check_pool_bots, \
    check_channel_limit, check_stage_topic
from utils.music.models import LavalinkPlayer, LavalinkTrack, LavalinkPlaylist
from utils.music.converters import time_format, fix_characters, string_to_seconds, URL_REG, \
    YOUTUBE_VIDEO_REG, google_search, percentage, music_source_image, perms_translations
from utils.music.interactions import VolumeInteraction, QueueInteraction, SelectInteraction
from utils.others import check_cmd, send_idle_embed, CustomContext, PlayerControls, fav_list, queue_track_index, \
    pool_command, string_to_file, CommandArgparse, music_source_emoji_url
from user_agent import generate_user_agent


class Music(commands.Cog):

    emoji = "üé∂"
    name = "√Çm nh·∫°c"
    desc_prefix = f"[{emoji} {name}] | "

    search_sources_opts = [
        disnake.OptionChoice("Youtube", "ytsearch"),
        disnake.OptionChoice("Youtube Music", "ytmsearch"),
        disnake.OptionChoice("Soundcloud", "scsearch"),
    ]

    playlist_opts = [
        disnake.OptionChoice("Misturar Playlist", "shuffle"),
        disnake.OptionChoice("Inverter Playlist", "reversed"),
    ]

    sources = {
        "yt": "ytsearch",
        "y": "ytsearch",
        "ytb": "ytsearch",
        "youtube": "ytsearch",
        "ytm": "ytmsearch",
        "ytmsc": "ytmsearch",
        "ytmusic": "ytmsearch",
        "youtubemusic": "ytmsearch",
        "sc": "scsearch",
        "scd": "scsearch",
        "soundcloud": "scsearch",
    }

    audio_formats = ("audio/mpeg", "audio/ogg", "audio/mp4", "audio/aac")

    u_agent = generate_user_agent()

    def __init__(self, bot: BotCore):

        self.bot = bot

        self.extra_hints = bot.config["EXTRA_HINTS"].split("||")

        self.song_request_concurrency = commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

        self.player_interaction_concurrency = commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

        self.song_request_cooldown = commands.CooldownMapping.from_cooldown(rate=1, per=300,
                                                                            type=commands.BucketType.member)

        self.music_settings_cooldown = commands.CooldownMapping.from_cooldown(rate=3, per=15,
                                                                              type=commands.BucketType.guild)

        if self.bot.config["AUTO_ERROR_REPORT_WEBHOOK"]:
            self.error_report_queue = asyncio.Queue()
            self.error_report_task = bot.loop.create_task(self.error_report_loop())
        else:
            self.error_report_queue = None

    async def update_cache(self):

        async with aiofiles.open("./playlist_cache.json", "w") as f:
            await f.write(json.dumps(self.bot.pool.playlist_cache))

    @commands.is_owner()
    @commands.command(hidden=True, aliases=["ac"])
    async def addcache(self, ctx: CustomContext, url: str):

        url = url.strip("<>")

        async with ctx.typing():
            tracks, node = await self.get_tracks(url, ctx.author, use_cache=False)

        tracks_info = []

        try:
            tracks = tracks.tracks
        except AttributeError:
            pass

        for t in tracks:
            tinfo = {"track": t.id, "info": t.info}
            tinfo["info"]["extra"]["playlist"] = {"name": t.playlist_name, "url": t.playlist_url}
            tracks_info.append(tinfo)

        self.bot.pool.playlist_cache[url] = tracks_info

        await self.update_cache()

        await ctx.send("C√°c b√†i h√°t li√™n k·∫øt ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng trong b·ªô nh·ªõ cache.", delete_after=30)

    @commands.is_owner()
    @commands.cooldown(1, 300, commands.BucketType.default)
    @commands.command(hidden=True, aliases=["uc"])
    async def updatecache(self, ctx: CustomContext, *args):

        if "-fav" in args:
            try:
                data = ctx.global_user_data
            except AttributeError:
                data = await self.bot.get_global_data(ctx.author.id, db_name=DBModel.users)
                ctx.global_user_data = data

            self.bot.pool.playlist_cache.update({url: [] for url in data["fav_links"].values()})

        try:
            if not self.bot.pool.playlist_cache:
                raise GenericError("**B·ªô nh·ªõ cache danh s√°ch ph√°t c·ªßa b·∫°n tr·ªëng...**")
        except KeyError:
            raise GenericError(f"**B·∫°n ch∆∞a s·ª≠ d·ª•ng l·ªánh: {ctx.prefix}{self.addcache.name}**")

        msg = None

        counter = 0

        amount = len(self.bot.pool.playlist_cache)

        txt = ""

        for url in list(self.bot.pool.playlist_cache):

            try:
                async with ctx.typing():
                    tracks, node = await self.get_tracks(url, ctx.author, use_cache=False)
            except:
                traceback.print_exc()
                tracks = None
                try:
                    del self.bot.pool.playlist_cache[url]
                except:
                    pass

            if not tracks:
                txt += f"[`‚ùå th·∫•t b·∫°i`]({url})\n"

            else:

                tracks_info = []

                try:
                    tracks = tracks.tracks
                except AttributeError:
                    pass

                for t in tracks:
                    tinfo = {"track": t.id, "info": t.info}
                    tinfo["info"]["extra"]["playlist"] = {"name": t.playlist_name, "url": t.playlist_url}
                    tracks_info.append(tinfo)

                self.bot.pool.playlist_cache[url] = tracks_info

                txt += f"[`{tracks_info[0]['info']['extra']['playlist']['name']}`]({url})\n"

            counter += 1

            embed = disnake.Embed(
                description=txt, color=self.bot.get_color(ctx.guild.me),
                title=f"Danh s√°ch ph√°t ƒë∆∞·ª£c x√°c minh: {counter}/{amount}"
            )

            if not msg:
                msg = await ctx.send(embed=embed)
            else:
                await msg.edit(embed=embed)

        await self.update_cache()

    @commands.is_owner()
    @commands.command(hidden=True, aliases=["rc"])
    async def removecache(self, ctx: CustomContext, url: str):

        try:
            del self.bot.pool.playlist_cache[url]
        except KeyError:
            raise GenericError("**Kh√¥ng c√≥ m·ª•c n√†o ƒë∆∞·ª£c l∆∞u trong b·ªô nh·ªõ cache v·ªõi URL th√¥ng tin...**")

        await self.update_cache()

        await ctx.send("C√°c b√†i h√°t li√™n k·∫øt ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng kh·ªèi b·ªô ƒë·ªám.", delete_after=30)

    @commands.is_owner()
    @commands.command(hidden=True, aliases=["cc"])
    async def clearcache(self, ctx: CustomContext):

        try:
            self.bot.pool.playlist_cache.clear()
        except KeyError:
            raise GenericError("**B·∫°n ƒë√£ kh√¥ng l∆∞u c√°c li√™n k·∫øt danh s√°ch ph√°t trong b·ªô ƒë·ªám...**")

        await self.update_cache()

        await ctx.send("B·ªô ƒë·ªám danh s√°ch ph√°t ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch th√†nh c√¥ng.", delete_after=30)

    @commands.is_owner()
    @commands.command(hidden=True, aliases=["ec"])
    async def exportcache(self, ctx: CustomContext):

        await ctx.send(file=disnake.File("playlist_cache.json"))

    @commands.is_owner()
    @commands.command(hidden=True, aliases=["ic"])
    async def importcache(self, ctx: CustomContext, url: str):

        async with ctx.typing():
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as r:
                    self.bot.pool.playlist_cache.update(json.loads((await r.read()).decode('utf-8')))

        await self.update_cache()

        await ctx.send("T·ªáp b·ªô nh·ªõ cache ƒë√£ ƒë∆∞·ª£c nh·∫≠p th√†nh c√¥ng!", delete_after=30)

    stage_cd = commands.CooldownMapping.from_cooldown(2, 45, commands.BucketType.guild)
    stage_mc = commands.MaxConcurrency(1, per=commands.BucketType.guild, wait=False)

    @has_source()
    @commands.has_guild_permissions(manage_guild=True)
    @pool_command(
        only_voiced=True, name="stageannounce", aliases=["stagevc", "togglestageannounce"], hidden=True,
        description="K√≠ch ho·∫°t h·ªá th·ªëng th√¥ng b√°o s√¢n kh·∫•u t·ª± ƒë·ªông v·ªõi t√™n c·ªßa b√†i h√°t.",
        cooldown=stage_cd, max_concurrency=stage_mc, extras={"exclusive_cooldown": True},
    )
    async def stageannounce_legacy(self, ctx: CustomContext, *, template: str = None):

        await self.stage_announce.callback(self=self, inter=ctx, template=template)

    @has_source()
    @commands.slash_command(
        description=f"{desc_prefix}K√≠ch ho·∫°t/ch·ªânh s·ª≠a h·ªá th·ªëng th√¥ng b√°o s√¢n kh·∫•u t·ª± ƒë·ªông v·ªõi t√™n c·ªßa b√†i h√°t.",
        extras={"only_voiced": True, "exclusive_cooldown": True},
        default_member_permissions=disnake.Permissions(manage_guild=True), cooldown=stage_cd, max_concurrency=stage_mc
    )
    async def stage_announce(
            self,
            inter: disnake.AppCmdInter,
            template: str = commands.Param(
                name=disnake.Localized("template", data={disnake.Locale.pt_BR: "modelo"}),
                description=f"{desc_prefix}K√≠ch ho·∫°t h·ªá th·ªëng th√¥ng b√°o s√¢n kh·∫•u t·ª± ƒë·ªông v·ªõi t√™n c·ªßa b√†i h√°t."
            )
    ):

        try:
            bot = inter.music_bot
            guild = inter.music_guild
        except AttributeError:
            bot = inter.bot
            guild = inter.guild

        if not isinstance(guild.me.voice.channel, disnake.StageChannel):
            raise GenericError("**B·∫°n ph·∫£i ·ªü tr√™n m·ªôt k√™nh s√¢n kh·∫•u ƒë·ªÉ k√≠ch ho·∫°t/v√¥ hi·ªáu h√≥a h·ªá th·ªëng n√†y.**")

        if not guild.me.guild_permissions.manage_guild:
            raise GenericError(f"{bot.user.mention} kh√¥ng c√≥  cho ph√©p c·ªßa: **{perms_translations['manage_guild']}.**")

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if not template:
            template = player.stage_title_template

        elif not any(p in template for p in (
                '{track.title}', '{track.author}', '{track.duration}', '{track.source}', '{track.playlist}',
                '{requester.name}', '{requester.tag}', '{requester.id}'
        )):
            raise GenericError(
                "**B·∫°n n√™n s·ª≠ d·ª•ng √≠t nh·∫•t m·ªôt tr√¨nh gi·ªØ ch·ªó h·ª£p l·ªá trong tin nh·∫Øn.**\n\n"
                "**PLACEHOLDERS:** ```ansi\n"
                "[34;1m{track.title}[0m -> T√™n c·ªßa b√†i h√°t\n"
                "[34;1m{track.author}[0m -> Ngh·ªá sƒ©/ng∆∞·ªùi t·∫£i l√™n/t√™n t√°c gi·∫£.\n"
                "[34;1m{track.duration}[0m -> Th·ªùi l∆∞·ª£ng c·ªßa √¢m nh·∫°c.\n"
                "[34;1m{track.source}[0m -> Ngu·ªìn g·ªëc/ngu·ªìn √¢m nh·∫°c (YouTube/Spotify/SoundCloud, v.v.)\n"
                "[34;1m{track.playlist}[0m -> T√™n c·ªßa danh s√°ch ph√°t ngu·ªìn √¢m nh·∫°c (n·∫øu b·∫°n c√≥)\n"
                "[34;1m{requester.name}[0m -> T√™n/Nick c·ªßa th√†nh vi√™n ƒë√£ ƒë·∫∑t h√†ng √¢m nh·∫°c\n"
                "[34;1m{requester.tag}[0m -> Tag/ph√¢n bi·ªát ƒë·ªëi x·ª≠ c·ªßa th√†nh vi√™n ƒë√£ ƒë·∫∑t h√†ng √¢m nh·∫°c\n"
                "[34;1m{requester.id}[0m -> ID c·ªßa th√†nh vi√™n ƒë√£ y√™u c·∫ßu √¢m nh·∫°c\n```"
            )

        if player.stage_title_event and player.stage_title_template == template:

            raise GenericError("**Th√¥ng b√°o t·ª± ƒë·ªông c·ªßa giai ƒëo·∫°n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t (v√† kh√¥ng c√≥ thay ƒë·ªïi n√†o trong "
                               "M·∫´u ti√™u ƒë·ªÅ).\n"
                               "N·∫øu b·∫°n mu·ªën v√¥ hi·ªáu h√≥a, b·∫°n c√≥ th·ªÉ d·ª´ng ng∆∞·ªùi ch∆°i (t·∫•t c·∫£ c√°c th√†nh vi√™n giai ƒëo·∫°n s·∫Ω"
                               "t·ª± ƒë·ªông ng·∫Øt k·∫øt n·ªëi trong qu√° tr√¨nh n√†y).**")

        player.stage_title_event = True
        player.stage_title_template = template
        player.start_time = disnake.utils.utcnow()

        txt = [f"ƒê√£ k√≠ch ho·∫°t/thay ƒë·ªïi h·ªá th·ªëng th√¥ng b√°o s√¢n kh·∫•u t·ª± ƒë·ªông.",
               f"üì¢ **‚†Ç{inter.author.mention} ƒë√£ k√≠ch ho·∫°t/thay ƒë·ªïi h·ªá th·ªëng th√¥ng b√°o s√¢n kh·∫•u t·ª± ƒë·ªông"
               f"{guild.me.voice.channel.mention}.**\n\n"
               f"`L∆∞u √Ω: N·∫øu ng∆∞·ªùi ch∆°i b·ªã t·∫Øt, t·∫•t c·∫£ c√°c th√†nh vi√™n giai ƒëo·∫°n s·∫Ω ƒë∆∞·ª£c ng·∫Øt k·∫øt n·ªëi t·ª± ƒë·ªông.`\n\n"
               f"**M√¥ h√¨nh ƒë√£ s·ª≠ d·ª•ng:** `{disnake.utils.escape_markdown(template)}`"]

        await self.interaction_message(inter, txt, emoji="üì¢", force=True)

    @stage_announce.autocomplete("template")
    async def stage_announce_autocomplete(self, inter: disnake.Interaction, query: str):

        return [
            "ƒêang ch∆°i: {track.title} | {track.author}",
            "{track.title} | ƒê∆∞·ª£c y√™u c·∫ßu b·ªüi: {requester.name}#{requester.tag}",
            "ƒê√†i 24/7 | {track.title}",
            "{track.title} | Danh s√°ch ph√°t: {track.playlist}",
        ]

    play_cd = commands.CooldownMapping.from_cooldown(3, 12, commands.BucketType.member)
    play_mc = commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)


    @stage_announce.autocomplete("template")
    async def stage_announce_autocomplete(self, inter: disnake.Interaction, query: str):

        return [
            "ƒêang ch∆°i: {track.title} | {track.author}",
            "{track.title} | ƒê∆∞·ª£c y√™u c·∫ßu b·ªüi: {requester.name}#{requester.tag}",
            "ƒê√†i 24/7 | {track.title}",
            "{track.title} | Danh s√°ch ph√°t: {track.playlist}",
        ]

    play_cd = commands.CooldownMapping.from_cooldown(3, 12, commands.BucketType.member)
    play_mc = commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    @check_voice()
    @can_send_message_check()
    @commands.message_command(name="add to queue", extras={"check_player": False},
                              cooldown=play_cd, max_concurrency=play_mc)
    async def message_play(self, inter: disnake.MessageCommandInteraction):

        if not inter.target.content:
            emb = disnake.Embed(description=f"Kh√¥ng c√≥ vƒÉn b·∫£n trong [Tin nh·∫Øn]({inter.target.jump_url}) ƒë√£ ch·ªçn..",
                                color=disnake.Colour.red())
            await inter.send(embed=emb, ephemeral=True)
            return

        await self.play.callback(
            self=self,
            inter=inter,
            query=inter.target.content,
            position=0,
            options="",
            manual_selection=False,
            source="ytsearch",
            repeat_amount=0,
            force_play="no",
        )

    @check_voice()
    @can_send_message_check()
    @commands.slash_command(name="search", extras={"check_player": False}, cooldown=play_cd, max_concurrency=play_mc,
                            description=f"{desc_prefix}T√¨m ki·∫øm √¢m nh·∫°c v√† ch·ªçn m·ªôt gi·ªØa c√°c k·∫øt qu·∫£ ƒë·ªÉ ch∆°i.")
    async def search(
            self,
            inter: disnake.AppCmdInter,
            query: str = commands.Param(name="search", desc="T√™n ho·∫∑c li√™n k·∫øt b√†i h√°t."),
            *,
            position: int = commands.Param(name="position", description=f"{desc_prefix}ƒê·∫∑t √¢m nh·∫°c ·ªü m·ªôt v·ªã tr√≠ c·ª• th·ªÉ",
                                           default=0),
            force_play: str = commands.Param(
                name="play_now",
                description="Ph√°t nh·∫°c ngay l·∫≠p t·ª©c (thay v√¨ th√™m v√†o h√†ng ƒë·ª£i).",
                default="no",
                choices=[
                    disnake.OptionChoice(disnake.Localized("Yes", data={disnake.Locale.pt_BR: "Sim"}), "yes"),
                    disnake.OptionChoice(disnake.Localized("No", data={disnake.Locale.pt_BR: "N√£o"}), "no")
                ]
            ),
            options: str = commands.Param(name="option", description="T√πy ch·ªçn x·ª≠ l√Ω danh s√°ch ph√°t",
                                          choices=playlist_opts, default=False),
            source: str = commands.Param(name="source",
                                         description="Ch·ªçn Trang web ƒë·ªÉ t√¨m ki·∫øm √¢m nh·∫°c (kh√¥ng c√≥ li√™n k·∫øt)",
                                         choices=search_sources_opts,
                                         default="ytsearch"),
            repeat_amount: int = commands.Param(name="repeat", description="L·∫∑p l·∫°i.",
                                                default=0),
            server: str = commands.Param(name="server", desc="S·ª≠ d·ª•ng m·ªôt m√°y ch·ªß √¢m nh·∫°c c·ª• th·ªÉ",
                                         default=None)
    ):

        await self.play.callback(
            self=self,
            inter=inter,
            query=query,
            position=position,
            force_play=force_play,
            options=options,
            manual_selection=True,
            source=source,
            repeat_amount=repeat_amount,
            server=server
        )

    @search.autocomplete("search")
    async def search_autocomplete(self, inter: disnake.Interaction, current: str):

        if not current:
            return []

        if URL_REG.match(current):
            return [current] if len(current) < 100 else []

        try:
            await check_pool_bots(inter, only_voiced=True)
            bot = inter.music_bot
        except GenericError:
            return [current[:99]]
        except:
            bot = inter.bot

        try:
            if not inter.author.voice:
                return []
        except AttributeError:
            return [current[:99]]

        return await google_search(bot, current)

    @is_dj()
    @has_player()
    @can_send_message_check()
    @commands.max_concurrency(1, commands.BucketType.guild)
    @commands.slash_command(
        extras={"only_voiced": True},
        description=f"{desc_prefix}K·∫øt n·ªëi (ho·∫∑c chuy·ªÉn sang) m·ªôt k√™nh tho·∫°i."
    )
    async def connect(
            self,
            inter: disnake.AppCmdInter,
            channel: Union[disnake.VoiceChannel, disnake.StageChannel] = commands.Param(
                name="k√™nh",
                description="K√™nh ƒë·ªÉ k·∫øt n·ªëi"
            )
    ):
        try:
            channel = inter.music_bot.get_channel(channel.id)
        except AttributeError:
            pass

        await self.do_connect(inter, channel)

    async def do_connect(
            self,
            ctx: Union[disnake.AppCmdInter, commands.Context, disnake.Message],
            channel: Union[disnake.VoiceChannel, disnake.StageChannel] = None,
            check_other_bots_in_vc: bool = False,
            bot: BotCore = None,
            me: disnake.Member = None,
            check_pool: bool = True,
    ):

        if not channel:
            try:
                channel = ctx.music_bot.get_channel(ctx.author.voice.channel.id) or ctx.author.voice.channel
            except AttributeError:
                channel = ctx.author.voice.channel

        if not bot:
            try:
                bot = ctx.music_bot
            except AttributeError:
                bot = self.bot

        if not me:
            try:
                me = ctx.music_guild.me
            except AttributeError:
                me = ctx.guild.me

        try:
            guild_id = ctx.guild_id
        except AttributeError:
            guild_id = ctx.guild.id

        try:
            text_channel = ctx.music_bot.get_channel(ctx.channel.id)
        except AttributeError:
            text_channel = ctx.channel

        try:
            player = bot.music.players[guild_id]
        except KeyError:
            print(f"Player debug test 20: {bot.user} | {self.bot.user}")
            raise GenericError(
                f"**O player do bot {bot.user.mention} foi finalizado antes de conectar no canal de voz "
                f"(ou o player n√£o foi inicializado)...\nPor via das d√∫vidas tente novamente.**"
            )

        can_connect(channel, me.guild, check_other_bots_in_vc=check_other_bots_in_vc, bot=bot)

        deafen_check = True

        if isinstance(ctx, disnake.AppCmdInter) and ctx.application_command.name == self.connect.name:

            perms = channel.permissions_for(me)

            if not perms.connect or not perms.speak:
                raise MissingVoicePerms(channel)

            await player.connect(channel.id, self_deaf=True)

            if channel != me.voice and me.voice.channel:
                txt = [
                    f"me moveu para o canal <#{channel.id}>",
                    f"**Movido com sucesso para o canal** <#{channel.id}>"
                ]

                deafen_check = False


            else:
                txt = [
                    f"me conectou no canal <#{channel.id}>",
                    f"**Conectei no canal** <#{channel.id}>"
                ]

            await self.interaction_message(ctx, txt, emoji="üîà", rpc_update=True)

        else:
            await player.connect(channel.id, self_deaf=True)

        try:
            player.members_timeout_task.cancel()
        except:
            pass

        if deafen_check and bot.config["GUILD_DEAFEN_WARN"]:

            retries = 0

            while retries < 5:

                if me.voice:
                    break

                await asyncio.sleep(1)
                retries += 0

            if not await check_deafen(me):
                await text_channel.send(
                    embed=disnake.Embed(
                        title="Aviso:",
                        description="Para manter sua privacidade e me ajudar a economizar "
                                    "recursos, recomendo desativar meu √°udio do canal clicando "
                                    "com bot√£o direito sobre mim e em seguida marcar: desativar "
                                    "√°udio no servidor.",
                        color=self.bot.get_color(me),
                    ).set_image(
                        url="https://cdn.discordapp.com/attachments/554468640942981147/1012533546386210956/unknown.png"
                    ), delete_after=20
                )

        if isinstance(channel, disnake.StageChannel):

            while not me.voice:
                await asyncio.sleep(1)

            stage_perms = channel.permissions_for(me)

            if stage_perms.mute_members:
                await me.edit(suppress=False)
            else:
                embed = disnake.Embed(color=self.bot.get_color(me))

                embed.description = f"**Preciso que algum staff me convide para falar no palco: " \
                                    f"[{channel.name}]({channel.jump_url}).**"

                embed.set_footer(
                    text="üí° Dica: para me permitir falar no palco automaticamente ser√° necess√°rio me conceder "
                         "permiss√£o de silenciar membros (no servidor ou apenas no canal de palco escolhido).")

                await text_channel.send(ctx.author.mention, embed=embed, delete_after=45)

    @can_send_message_check()
    @check_voice()
    @commands.bot_has_guild_permissions(send_messages=True)
    @commands.max_concurrency(1, commands.BucketType.member)
    @pool_command(name="addposition", description="Th√™m √¢m nh·∫°c ·ªü m·ªôt v·ªã tr√≠ c·ª• th·ªÉ trong h√†ng ƒë·ª£i.",
                  aliases=["adp", "addpos"], check_player=False, cooldown=play_cd, max_concurrency=play_mc,
                  usage="{prefix}{cmd} [posi√ß√£o(N¬∫)] [nome|link]\nEx: {prefix}{cmd} 2 sekai - burn me down")
    async def addpos_legacy(self, ctx: CustomContext, position: int, *, query: str):

        if position < 1:
            raise GenericError("**S·ªë v·ªã tr√≠ h√†ng ƒë·ª£i ph·∫£i t·ª´ 1 tr·ªü l√™n.**")

        await self.play.callback(self=self, inter=ctx, query=query, position=position, options=False,
                                 force_play="no", manual_selection=False,
                                 source="ytsearch", repeat_amount=0, server=None)

    play_flags = CommandArgparse()
    play_flags.add_argument('query', nargs='*', help="nome ou link da m√∫sica")
    play_flags.add_argument('-position', '-pos', '-p', type=int, default=0, help='Colocar a m√∫sica em uma posi√ß√£o espec√≠fica.\nEx: -p 10')
    play_flags.add_argument('-next', '-proximo', action='store_true', help='Adicionar a m√∫sica/playlist no topo da fila (equivalente ao: -pos 1)')
    play_flags.add_argument('-reverse', '-r', action='store_true', help='Inverter a ordem das m√∫sicas adicionadas (efetivo apenas ao adicionar playlist).')
    play_flags.add_argument('-shuffle', '-sl', action='store_true', help='Misturar as m√∫sicas adicionadas (efetivo apenas ao adicionar playlist).')
    play_flags.add_argument('-select', '-s', action='store_true', help='Escolher a m√∫sica entre os resultados encontrados.')
    play_flags.add_argument('-source', '-scr', type=str, default="ytsearch", help='Fazer a busca da m√∫sica usando uma fonte espec√≠fica [youtube/soundcloud etc]')
    play_flags.add_argument('-force', '-now', '-n', '-f', action='store_true', help='Tocar a m√∫sica adicionada imediatamente (efetivo apenas se houver uma m√∫sica tocando atualmente.)')
    play_flags.add_argument('-loop', '-lp', type=int, default=0, help="Definir a quantidade de repeti√ß√µes da m√∫sica escolhida.\nEx: -loop 5")
    play_flags.add_argument('-server', '-sv', type=str, default=None, help='Usar um servidor de m√∫sica espec√≠fico.')

    @can_send_message_check()
    @check_voice()
    @commands.bot_has_guild_permissions(send_messages=True)
    @commands.max_concurrency(1, commands.BucketType.member)
    @pool_command(name="play", description="Tocar m√∫sica em um canal de voz.", aliases=["p"], check_player=False,
                  cooldown=play_cd, max_concurrency=play_mc, extras={"flags": play_flags},
                  usage="{prefix}{cmd} [nome|link]\nEx: {prefix}{cmd} sekai - burn me down")
    async def play_legacy(self, ctx: CustomContext, *, flags: str = ""):

        args, unknown = ctx.command.extras['flags'].parse_known_args(flags.split())

        await self.play.callback(
            self = self,
            inter = ctx,
            query = " ".join(args.query + unknown),
            position= 1 if args.next else args.position if args.position > 0 else 0,
            options = "shuffle" if args.shuffle else "reversed" if args.reverse else None,
            force_play = "yes" if args.force else "no",
            manual_selection = args.select,
            source = self.sources.get(args.source, "ytsearch"),
            repeat_amount = args.loop,
            server = args.server
        )

    @can_send_message_check()
    @check_voice()
    @commands.bot_has_guild_permissions(send_messages=True)
    @pool_command(name="search", description="T√¨m ki·∫øm √¢m nh·∫°c v√† ch·ªçn m·ªôt gi·ªØa c√°c k·∫øt qu·∫£ ƒë·ªÉ ch∆°i.",
                  aliases=["sc"], check_player=False, cooldown=play_cd, max_concurrency=play_mc,
                  usage="{prefix}{cmd} [nome]\nEx: {prefix}{cmd} sekai - burn me down")
    async def search_legacy(self, ctx: CustomContext, *, query):

        await self.play.callback(self=self, inter=ctx, query=query, position=0, options=False, force_play="no",
                                 manual_selection=True, source="ytsearch", repeat_amount=0, server=None)

    @can_send_message_check()
    @check_voice()
    @commands.slash_command(
        name="play_music_file",
        description=f"{desc_prefix}Ph√°t t·∫≠p tin nh·∫°c tr√™n k√™nh tho·∫°i.",
        extras={"check_player": False}, cooldown=play_cd, max_concurrency=play_mc
    )
    async def play_file(
            self,
            inter: Union[disnake.AppCmdInter, CustomContext],
            file: disnake.Attachment = commands.Param(
                name="file", description="T·ªáp √¢m thanh ƒë·ªÉ ph√°t ho·∫∑c th√™m x·∫øp h√†ng"
            ),
            position: int = commands.Param(name="position", description="ƒê·∫∑t √¢m nh·∫°c ·ªü m·ªôt v·ªã tr√≠ c·ª• th·ªÉ",
                                           default=0),
            force_play: str = commands.Param(
                name="play_now",
                description="Ph√°t b√†i h√°t ngay l·∫≠p t·ª©c (thay v√¨ th√™m v√†o h√†ng ƒë·ª£i).",
                default="no",
                choices=[
                    disnake.OptionChoice(disnake.Localized("Yes", data={disnake.Locale.pt_BR: "Sim"}), "yes"),
                    disnake.OptionChoice(disnake.Localized("No", data={disnake.Locale.pt_BR: "N√£o"}), "no")
                ]
            ),
            repeat_amount: int = commands.Param(name="repeat", description="L·∫∑p l·∫°i .",
                                                default=0),
            server: str = commands.Param(name="server", desc="S·ª≠ d·ª•ng m·ªôt m√°y ch·ªß √¢m nh·∫°c c·ª• th·ªÉ trong t√¨m ki·∫øm.",
                                         default=None),
    ):

        class DummyMessage:
            attachments = [file]

        inter.message = DummyMessage()

        await self.play.callback(self=self, inter=inter, query="", position=position, options=False, force_play=force_play,
                                 manual_selection=False, source="ytsearch", repeat_amount=repeat_amount, server=server)

    @can_send_message_check()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}Ph√°t nh·∫°c tr√™n k√™nh gi·ªçng n√≥i.",
        extras={"check_player": False}, cooldown=play_cd, max_concurrency=play_mc
    )
    async def play(
            self,
            inter: Union[disnake.AppCmdInter, CustomContext],
            query: str = commands.Param(name="search", desc="T√™n ho·∫∑c li√™n k·∫øt √¢m nh·∫°c."), *,
            position: int = commands.Param(name="position", description="ƒê·∫∑t √¢m nh·∫°c ·ªü m·ªôt v·ªã tr√≠ c·ª• th·ªÉ",
                                           default=0),
            force_play: str = commands.Param(
                name="play_now",
                description="Ph√°t b√†i h√°t ngay l·∫≠p t·ª©c (thay v√¨ th√™m v√†o d√≤ng).",
                default="no",
                choices=[
                    disnake.OptionChoice(disnake.Localized("Yes", data={disnake.Locale.pt_BR: "Sim"}), "yes"),
                    disnake.OptionChoice(disnake.Localized("No", data={disnake.Locale.pt_BR: "N√£o"}), "no")
                ]
            ),
            manual_selection: bool = commands.Param(name="select_manual",
                                                    description="Ch·ªçn m·ªôt b√†i h√°t theo c√°ch th·ªß c√¥ng gi·ªØa c√°c k·∫øt qu·∫£ ƒë∆∞·ª£c t√¨m th·∫•y",
                                                    default=False),
            options: str = commands.Param(name="option", description="T√πy ch·ªçn x·ª≠ l√Ω danh s√°ch ph√°t",
                                          choices=playlist_opts, default=False),
            source: str = commands.Param(name="source",
                                         description="Ch·ªçn Trang web ƒë·ªÉ t√¨m ki·∫øm √¢m nh·∫°c (kh√¥ng c√≥ li√™n k·∫øt)",
                                         choices=search_sources_opts,
                                         default="ytsearch"),
            repeat_amount: int = commands.Param(name="repeat", description="ƒê·∫∑t s·ªë l∆∞·ª£ng l·∫∑p l·∫°i.",
                                                default=0),
            server: str = commands.Param(name="server", desc="S·ª≠ d·ª•ng m·ªôt m√°y ch·ªß √¢m nh·∫°c c·ª• th·ªÉ trong t√¨m ki·∫øm.",
                                         default=None),
    ):

        try:
            bot = inter.music_bot
            guild = inter.music_guild
            channel = bot.get_channel(inter.channel.id)
        except AttributeError:
            bot = inter.bot
            guild = inter.guild
            channel = inter.channel

        can_send_message(channel, bot.user)

        if not guild.voice_client and not check_channel_limit(guild.me, inter.author.voice.channel):
            raise GenericError(f"**K√™nh {inter.author.voice.channel.mention} n√≥ ƒë·∫ßy r·ªìi!**")

        msg = None

        ephemeral = None

        warn_message = None

        attachment: Optional[disnake.Attachment] = None

        try:
            voice_channel = bot.get_channel(inter.author.voice.channel.id)
        except AttributeError:
            raise NoVoice()

        try:
            player = bot.music.players[guild.id]

            if not server:
                node = player.node
            else:
                node = bot.music.get_node(server) or player.node

            guild_data = {}

        except KeyError:

            node = bot.music.get_node(server)

            if not node:
                node = await self.get_best_node(bot)

            guild_data = None

            if inter.bot == bot:
                try:
                    guild_data = inter.guild_data
                except AttributeError:
                    guild_data = await bot.get_data(inter.guild_id, db_name=DBModel.guilds)
                    try:
                        inter.guild_data = guild_data
                    except AttributeError:
                        pass

            if not guild_data:
                guild_data = await bot.get_data(inter.guild_id, db_name=DBModel.guilds)

            if not guild.me.voice:
                can_connect(voice_channel, guild, guild_data["check_other_bots_in_vc"], bot=bot)

            static_player = guild_data['player_controller']

            if not inter.response.is_done():
                ephemeral = await self.is_request_channel(inter, data=guild_data, ignore_thread=True)
                await inter.response.defer(ephemeral=ephemeral)

            if static_player['channel']:
                channel, warn_message = await self.check_channel(guild_data, inter, channel, guild, bot)

        if ephemeral is None:
            ephemeral = await self.is_request_channel(inter, data=guild_data, ignore_thread=True)

        is_pin = None

        if not query:

            if self.bot.config["ENABLE_DISCORD_URLS_PLAYBACK"]:

                try:
                    attachment = inter.message.attachments[0]

                    if attachment.size > 18000000:
                        raise GenericError("**T·ªáp b·∫°n ƒë√£ g·ª≠i ph·∫£i c√≥ k√≠ch th∆∞·ªõc t·ª´ 18mb tr·ªü xu·ªëng.**")

                    if attachment.content_type not in self.audio_formats:
                        raise GenericError("**T·ªáp b·∫°n ƒë√£ g·ª≠i kh√¥ng ph·∫£i l√† m·ªôt t·ªáp nh·∫°c h·ª£p l·ªá...**")

                    query = attachment.url

                except IndexError:
                    pass

        if not query:

            try:
                user_data = inter.global_user_data
            except:
                user_data = await self.bot.get_global_data(inter.author.id, db_name=DBModel.users)
                inter.global_user_data = user_data

            db_favs = {}

            for k, v in user_data["integration_links"].items():
                db_favs[f"> itg: {k}"] = v

            for k, v in user_data["fav_links"].items():
                db_favs[f"> fav: {k}"] = v

            if not db_favs:
                raise EmptyFavIntegration()

            if len(db_favs) == 1:
                query = list(db_favs)[0]

            else:
                embed = disnake.Embed(
                    color=self.bot.get_color(guild.me),
                    description="**Ch·ªçn m·ªôt y√™u th√≠ch ho·∫∑c t√≠ch h·ª£p d∆∞·ªõi ƒë√¢y:**\n"
                                f'L∆∞u √Ω: b·∫°n ch·ªâ c√≥ <t:{int((disnake.utils.utcnow() + datetime.timedelta(seconds=45)).timestamp())}:R> ch·ªçn!'
                )

                try:
                    if bot.user.id != self.bot.user.id:
                        embed.set_footer(text=f"S·ª≠ d·ª•ng {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
                except AttributeError:
                    pass

                kwargs = {
                    "content": inter.author.mention,
                    "embed": embed
                }

                view = SelectInteraction(
                    user=inter.author,  timeout=45,
                    opts=[disnake.SelectOption(label=k, value=k, emoji=music_source_emoji_url(v)) for k, v in db_favs.items()]
                )

                if isinstance(inter, disnake.MessageInteraction) and not inter.response.is_done():
                    await inter.response.defer(ephemeral=ephemeral)

                try:
                    msg = await inter.followup.send(ephemeral=ephemeral, view=view, wait=True, **kwargs)
                except (disnake.InteractionTimedOut, AttributeError):
                    msg = await inter.channel.send(view=view, **kwargs)

                await view.wait()

                select_interaction = view.inter

                if not select_interaction or view.selected is False:

                    text = "### Th·ªùi gian l·ª±a ch·ªçn ƒë∆∞·ª£c ch·ªçn!" if view.selected is not False else "### B·ªã ng∆∞·ªùi d√πng h·ªßy b·ªè."

                    try:
                        await msg.edit(embed=disnake.Embed(description=text, color=self.bot.get_color(guild.me)), view=None)
                    except AttributeError:
                        traceback.print_exc()
                        pass
                    return

                if select_interaction.data.values[0] == "cancel":
                    await msg.edit(
                        embed=disnake.Embed(
                            description="**H·ªßy b·ªè l·ª±a ch·ªçn!**",
                            color=self.bot.get_color(guild.me)
                        ),
                        components=None
                    )
                    return

                try:
                    inter.store_message = msg
                except AttributeError:
                    pass

                inter.token = select_interaction.token
                inter.id = select_interaction.id
                inter.response = select_interaction.response
                query = select_interaction.data.values[0]

        if query.startswith("> pin: "):
            is_pin = True
            query = query[7:]

        if query.startswith(("> fav: ", "> itg: ")):
            try:
                user_data = inter.global_user_data
            except AttributeError:
                user_data = await self.bot.get_global_data(inter.author.id, db_name=DBModel.users)
                inter.global_user_data = user_data

            if query.startswith("> fav:"):
                query = user_data["fav_links"][query[7:]]

            else:

                query = user_data["integration_links"][query[7:]]

                if (matches := spotify_regex_w_user.match(query)):

                    if not self.bot.spotify:
                        raise GenericError("**H·ªó tr·ª£ Spotify kh√¥ng c√≥ s·∫µn...**")

                    url_type, user_id = matches.groups()

                    if url_type != "user":
                        raise GenericError("**Li√™n k·∫øt kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ b·∫±ng ph∆∞∆°ng ph√°p n√†y...**")

                    try:
                        await inter.response.defer(ephemeral=True)
                    except:
                        pass

                    result = await self.bot.spotify.get_user_playlists(user_id)

                    info = {"entries": [{"title": t.name, "url": t.external_urls["spotify"]} for t in result]}

                elif not self.bot.config["USE_YTDL"]:
                    raise GenericError("**Kh√¥ng c√≥ h·ªó tr·ª£ cho lo·∫°i y√™u c·∫ßu n√†y v√†o l√∫c n√†y...**")

                else:

                    loop = self.bot.loop or asyncio.get_event_loop()

                    try:
                        await inter.response.defer(ephemeral=True)
                    except:
                        pass

                    info = await loop.run_in_executor(None, lambda: self.bot.pool.ytdl.extract_info(query, download=False))

                    try:
                        if not info["entries"]:
                            raise GenericError(f"**N·ªôi dung kh√¥ng kh·∫£ d·ª•ng (ho·∫∑c ri√™ng t∆∞):**\n{query}")
                    except KeyError:
                        raise GenericError("**X·∫£y ra l·ªói khi c·ªë g·∫Øng nh·∫≠n k·∫øt qu·∫£ cho t√πy ch·ªçn ƒë√£ ch·ªçn...**")

                if len(info["entries"]) == 1:
                    query = info["entries"][0]['url']

                else:

                    emoji = music_source_emoji_url(query)

                    view = SelectInteraction(
                        user=inter.author,
                        opts=[
                            disnake.SelectOption(label=e['title'][:90], value=f"entrie_select_{c}",
                                                 emoji=emoji) for c, e in enumerate(info['entries'])
                        ], timeout=30)

                    embed = disnake.Embed(
                        description="**Ch·ªçn m·ªôt danh s√°ch ph√°t b√™n d∆∞·ªõi:**\n"
                                    f'Ch·ªçn m·ªôt t√πy ch·ªçn theo <t:{int((disnake.utils.utcnow() + datetime.timedelta(seconds=30)).timestamp())}:R> ƒë·ªÉ ti·∫øp t·ª•c.',
                        color=self.bot.get_color(guild.me)
                    )

                    kwargs = {}

                    try:
                        func = msg.edit
                    except AttributeError:
                        try:
                            func = inter.edit_original_message
                        except AttributeError:
                            kwargs["ephemeral"] = True
                            try:
                                func = inter.followup.send
                            except AttributeError:
                                func = inter.send

                    msg = await func(embed=embed, view=view, **kwargs)

                    await view.wait()

                    if not view.inter or view.selected is False:

                        try:
                            func = msg.edit
                        except:
                            func = view.inter.response.edit_message

                        await func(embed=disnake.Embed(color=self.bot.get_color(guild.me),
                            description="**Th·ªùi gian ƒë√£ h·∫øt!**" if not view.selected is False else "### B·ªã ng∆∞·ªùi d√πng h·ªßy b·ªè."),
                            components=None
                        )
                        return

                    query = info["entries"][int(view.selected[14:])]["url"]

                    if not isinstance(inter, disnake.ModalInteraction):
                        inter.token = view.inter.token
                        inter.id = view.inter.id
                        inter.response = view.inter.response
                    else:
                        inter = view.inter

        else:

            query = query.strip("<>")

            urls = URL_REG.findall(query)

            if not urls:

                query = f"{source}:{query}"

            else:

                if not self.bot.config["ENABLE_DISCORD_URLS_PLAYBACK"] and "cdn.discordapp.com/attachments/" in query:
                    raise GenericError("**S·ª± h·ªó tr·ª£ cho c√°c li√™n k·∫øt Discord b·ªã v√¥ hi·ªáu h√≥a.**")

                query = urls[0].split("&ab_channel=")[0]

                if "&list=" in query and (link_re := YOUTUBE_VIDEO_REG.match(query)):

                    view = SelectInteraction(
                        user=inter.author,
                        opts=[
                            disnake.SelectOption(label="B√†i h√°t", emoji="üéµ",
                                                 description="Ch·ªâ t·∫£i nh·∫°c t·ª´ li√™n k·∫øt.", value="music"),
                            disnake.SelectOption(label="Playlist", emoji="üé∂",
                                                 description="Ch∆°i danh s√°ch ph√°t hi·ªán t·∫°i.", value="playlist"),
                        ], timeout=30)

                    embed = disnake.Embed(
                        description='**Li√™n k·∫øt ch·ª©a video v·ªõi danh s√°ch ph√°t.**\n'
                                    f'Ch·ªçn m·ªôt t√πy ch·ªçn theo <t:{int((disnake.utils.utcnow() + datetime.timedelta(seconds=30)).timestamp())}:R> ƒë·ªÉ ti·∫øp t·ª•c.',
                        color=self.bot.get_color(guild.me)
                    )

                    try:
                        if bot.user.id != self.bot.user.id:
                            embed.set_footer(text=f"S·ª≠ d·ª•ng {bot.user.display_name}",
                                             icon_url=bot.user.display_avatar.url)
                    except AttributeError:
                        pass

                    msg = await inter.send(embed=embed, view=view, ephemeral=ephemeral)

                    await view.wait()

                    if not view.inter or view.selected is False:

                        try:
                            func = inter.edit_original_message
                        except AttributeError:
                            func = msg.edit

                        await func(
                            content=f"{inter.author.mention}, {'ƒë√£ h·ªßy b·ªè ho·∫°t ƒë·ªông' if view.selected is not False else 'Th·ªùi gian ƒë√£ h·∫øt'}" if view.selected is not False else "B·ªã ng∆∞·ªùi d√πng h·ªßy b·ªè.",
                            embed=None, view=None
                        )
                        return

                    if view.selected == "music":
                        query = link_re.group()

                    try:
                        inter.store_message = msg
                    except AttributeError:
                        pass

                    if not isinstance(inter, disnake.ModalInteraction):
                        inter.token = view.inter.token
                        inter.id = view.inter.id
                        inter.response = view.inter.response
                    else:
                        inter = view.inter

        if not inter.response.is_done():
            await inter.response.defer(ephemeral=ephemeral)

        tracks, node = await self.get_tracks(query, inter.user, node=node, track_loops=repeat_amount)

        try:
            player = bot.music.players[inter.guild_id]
        except KeyError:
            await check_pool_bots(inter, check_player=False)

            try:
                bot = inter.music_bot
                guild = inter.music_guild
                channel = bot.get_channel(inter.channel.id)
            except AttributeError:
                bot = inter.bot
                guild = inter.guild
                channel = inter.channel

            try:
                player = bot.music.players[inter.guild_id]
            except KeyError:
                player = None

                guild_data = None

                if inter.bot == bot:
                    try:
                        guild_data = inter.guild_data
                    except AttributeError:
                        guild_data = await bot.get_data(inter.guild_id, db_name=DBModel.guilds)
                        try:
                            inter.guild_data = guild_data
                        except AttributeError:
                            pass

                if not guild_data:
                    guild_data = await bot.get_data(inter.guild_id, db_name=DBModel.guilds)

                static_player = guild_data['player_controller']

                if static_player['channel']:
                    channel, warn_message = await self.check_channel(guild_data, inter, channel, guild, bot)

        if not player:

            skin = guild_data["player_controller"]["skin"]
            static_skin = guild_data["player_controller"]["static_skin"]

            try:
                global_data = inter.global_guild_data
            except AttributeError:
                global_data = await self.bot.get_global_data(guild.id, db_name=DBModel.guilds)
                try:
                    inter.global_guild_data = global_data
                except:
                    pass

            if global_data["global_skin"]:
                skin = global_data["player_skin"] or skin
                static_skin = global_data["player_skin_static"] or guild_data["player_controller"]["static_skin"]

            try:
                invite = global_data["listen_along_invites"][str(inter.channel.id)]
            except KeyError:
                invite = None

            else:
                if not await self.bot.fetch_invite(invite):
                    invite = None
                    print(
                        f'{"-"*15}\n'
                        f'Lo·∫°i b·ªè l·ªùi m·ªùi: {invite} \n'
                        f'M√°y ch·ªß: {inter.guild.name} [{inter.guild_id}]\n'
                        f'K√™nh: {inter.channel.name} [{inter.channel.id}]\n'
                        f'{"-" * 15}'
                    )
                    del global_data["listen_along_invites"][str(inter.channel.id)]
                    await self.bot.update_global_data(inter.guild_id, global_data, db_name=DBModel.guilds)

            player: LavalinkPlayer = bot.music.get_player(
                guild_id=inter.guild_id,
                cls=LavalinkPlayer,
                player_creator=inter.author.id,
                guild=guild,
                channel=channel or bot.get_channel(inter.channel_id),
                last_message_id=guild_data['player_controller']['message_id'],
                node_id=node.identifier,
                static=bool(static_player['channel']),
                skin=bot.check_skin(skin),
                custom_skin_data=global_data["custom_skins"],
                custom_skin_static_data=global_data["custom_skins_static"],
                skin_static=bot.check_static_skin(static_skin),
                extra_hints=self.extra_hints,
                restrict_mode=guild_data['enable_restrict_mode'],
                listen_along_invite=invite,
                volume=int(guild_data['default_player_volume']),
                autoplay=guild_data["autoplay"],
            )

            if static_player['channel']:

                if isinstance(player.text_channel, disnake.Thread):
                    channel_check = player.text_channel.parent
                else:
                    channel_check = player.text_channel

                bot_perms = channel_check.permissions_for(guild.me)

                if not bot_perms.read_message_history:

                    if not bot_perms.manage_permissions:

                        player.set_command_log(
                            emoji="‚ö†Ô∏è",
                            text=f"T·ªõ kh√¥ng ƒë∆∞·ª£c ph√©p xem tin nh·∫Øn tr√™n k√™nh: {channel_check.mention} "
                                 f"(v√† kh√¥ng cho ph√©p qu·∫£n l√Ω c√°c quy·ªÅn ƒë·ªÉ t·ª± ƒë·ªông s·ª≠a ch·ªØa ƒëi·ªÅu n√†y), "
                                 f"Ng∆∞·ªùi ch∆°i s·∫Ω l√†m vi·ªác theo c√°ch m·∫∑c ƒë·ªãnh..."
                        )

                        player.static = False

                    else:

                        overwrites = {
                            guild.me: disnake.PermissionOverwrite(
                                embed_links=True,
                                send_messages=True,
                                send_messages_in_threads=True,
                                read_messages=True,
                                create_public_threads=True,
                                read_message_history=True,
                                manage_messages=True,
                                manage_channels=True,
                                attach_files=True,
                            )
                        }

                        await channel_check.edit(overwrites=overwrites)

                try:
                    message = await channel.fetch_message(int(static_player['message_id']))
                except TypeError:
                    message = None
                except:
                    message = await send_idle_embed(channel, bot=bot)

                player.message = message

        pos_txt = ""

        embed = disnake.Embed(color=disnake.Colour.red())

        embed.colour = self.bot.get_color(guild.me)

        position -= 1

        if isinstance(tracks, list):

            if manual_selection and len(tracks) > 1:

                embed.description = f"**Ch·ªçn c√°c b√†i h√°t mong mu·ªën b√™n d∆∞·ªõi:**"

                try:
                    func = inter.edit_original_message
                except AttributeError:
                    func = inter.send

                try:
                    add_id = f"_{inter.id}"
                except AttributeError:
                    add_id = ""

                tracks = tracks[:25]

                msg = await func(
                    embed=embed,
                    components=[
                        disnake.ui.Select(
                            placeholder='K·∫øt qu·∫£:',
                            custom_id=f"track_selection{add_id}",
                            min_values=1,
                            max_values=len(tracks),
                            options=[
                                disnake.SelectOption(
                                    label=f"{n+1}. {t.title[:96]}",
                                    value=f"track_select_{n}",
                                    description=f"{t.author} [{time_format(t.duration)}]")
                                for n, t in enumerate(tracks)
                            ]
                        )
                    ]
                )

                def check_song_selection(i: Union[CustomContext, disnake.MessageInteraction]):

                    try:
                        return i.data.custom_id == f"track_selection_{inter.id}" and i.author == inter.author
                    except AttributeError:
                        return i.author == inter.author and i.message.id == msg.id

                try:
                    select_interaction: disnake.MessageInteraction = await self.bot.wait_for(
                        "dropdown",
                        timeout=45,
                        check=check_song_selection
                    )
                except asyncio.TimeoutError:
                    raise GenericError("Th·ªùi gian ƒë√£ h·∫øt!")

                if len(select_interaction.data.values) > 1:

                    indexes = set(int(v[13:]) for v in select_interaction.data.values)

                    selected_tracks = []

                    for i in indexes:
                        for n, t in enumerate(tracks):
                            if i == n:
                                selected_tracks.append(t)
                                break

                    tracks = selected_tracks

                else:

                    tracks = tracks[int(select_interaction.data.values[0][13:])]

                if isinstance(inter, CustomContext):
                    inter.message = msg

            else:

                tracks = tracks[0]

                if tracks.info.get("sourceName") == "http":

                    if tracks.title == "Unknown title":
                        if attachment:
                            tracks.info["title"] = attachment.filename
                        else:
                            tracks.info["title"] = tracks.uri.split("/")[-1]
                        tracks.title = tracks.info["title"]

                    tracks.uri = ""

            if not isinstance(tracks, list):

                if force_play == "yes":
                    player.queue.insert(0, tracks)
                elif position < 0:
                    player.queue.append(tracks)
                else:
                    player.queue.insert(position, tracks)
                    pos_txt = f" v·ªã tr√≠ {position + 1} trong h√†ng"

                duration = time_format(tracks.duration) if not tracks.is_stream else 'üî¥ Livestream'

                log_text = f"{inter.author.mention} th√™m [`{fix_characters(tracks.title, 20)}`]({tracks.uri or tracks.search_uri}){pos_txt} `({duration})`."

                embed.set_author(
                    name=fix_characters(tracks.title, 35),
                    url=tracks.uri or tracks.search_uri,
                    icon_url=music_source_image(tracks.info['sourceName'])
                )
                embed.set_thumbnail(url=tracks.thumb)
                embed.description = f"`{fix_characters(tracks.author, 15)}`**‚îÉ**`{time_format(tracks.duration) if not tracks.is_stream else 'üî¥ Livestream'}`**‚îÉ**{inter.author.mention}"
                emoji = "üéµ"

            else:

                if options == "shuffle":
                    shuffle(tracks)

                if position < 0 or len(tracks) < 2:

                    if options == "reversed":
                        tracks.reverse()
                    for track in tracks:
                        player.queue.append(track)
                else:
                    if options != "reversed":
                        tracks.reverse()
                    for track in tracks:
                        player.queue.insert(position, track)

                    pos_txt = f" (Pos. {position + 1})"

                query = fix_characters(query.replace(f"{source}:", '', 1), 25)

                log_text = f"{inter.author.mention} th√™m `{len(tracks)} B√†i h√°t `th√¥ng qua t√¨m ki·∫øm: `{query}`{pos_txt}."

                total_duration = 0

                for t in tracks:
                    if not t.is_stream:
                        total_duration += t.duration

                embed.set_author(name=f"T√¨m ki·∫øm: {query}", icon_url=music_source_image(tracks[0].info['sourceName']))
                embed.set_thumbnail(url=tracks[0].thumb)
                embed.description = f"`{len(tracks)} (C√°c) b√†i h√°t`**‚îÉ**`{time_format(total_duration)}`**‚îÉ**{inter.author.mention}"
                emoji = "üé∂"

        else:

            if options == "shuffle":
                shuffle(tracks.tracks)

            if position < 0 or len(tracks.tracks) < 2:

                if options == "reversed":
                    tracks.tracks.reverse()
                for track in tracks.tracks:
                    player.queue.append(track)
            else:
                if options != "reversed":
                    tracks.tracks.reverse()
                for track in tracks.tracks:
                    player.queue.insert(position, track)

                pos_txt = f" (Pos. {position + 1})"

            log_text = f"{inter.author.mention} ƒê√£ th√™m danh s√°ch ph√°t [`{fix_characters(tracks.name, 20)}`]({tracks.url}){pos_txt} `({len(tracks.tracks)})`."

            total_duration = 0

            for t in tracks.tracks:
                if not t.is_stream:
                    total_duration += t.duration

            try:
                embed.set_author(
                    name="‚†Ç" + fix_characters(tracks.name, 35),
                    url=tracks.url,
                    icon_url=music_source_image(tracks.tracks[0].info['sourceName'])
                )
            except KeyError:
                embed.set_author(
                    name="‚†Ç Spotify Playlist",
                    icon_url=music_source_image(tracks.tracks[0].info['sourceName'])
                )
            embed.set_thumbnail(url=tracks.tracks[0].thumb)
            embed.description = f"`{len(tracks.tracks)} C√°c b√†i h√°t`**‚îÉ**`{time_format(total_duration)}`**‚îÉ**{inter.author.mention}"
            emoji = "üé∂"

        embed.description += player.controller_link

        if not is_pin:

            if not player.is_connected:
                try:
                    embed.description += f"\n`K√™nh gi·ªçng n√≥i:` {voice_channel.mention}"
                except AttributeError:
                    pass

            try:
                func = inter.edit_original_message
            except AttributeError:
                if msg:
                    func = msg.edit
                elif inter.message.author.id == bot.user.id:
                    func = inter.message.edit
                else:
                    func = inter.send

            try:
                if bot.user.id != self.bot.user.id:
                    embed.set_footer(text=f"S·ª≠ d·ª•ng {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
            except AttributeError:
                pass

            await func(embed=embed, view=None)

        if not player.is_connected:

            try:
                guild_data["check_other_bots_in_vc"]
            except KeyError:
                guild_data = None

                if inter.bot == bot:
                    try:
                        guild_data = inter.guild_data
                    except AttributeError:
                        guild_data = await bot.get_data(inter.guild_id, db_name=DBModel.guilds)
                        try:
                            inter.guild_data = guild_data
                        except AttributeError:
                            pass

                if not guild_data:
                    guild_data = await bot.get_data(inter.guild_id, db_name=DBModel.guilds)

            if not inter.author.voice:
                raise NoVoice()

            await self.do_connect(
                inter, channel=voice_channel,
                check_other_bots_in_vc=guild_data["check_other_bots_in_vc"],
                bot=bot, me=guild.me, check_pool=True
            )

        if not player.current:
            if warn_message:
                player.set_command_log(emoji="‚ö†Ô∏è", text=warn_message)
            await player.process_next()
        elif force_play == "yes":
            player.set_command_log(
                emoji="‚ñ∂Ô∏è",
                text=f"{inter.author.mention} Anh ·∫•y ƒë√£ th√™m b√†i h√°t hi·ªán t·∫°i ƒë·ªÉ ch∆°i ngay l·∫≠p t·ª©c."
            )
            await player.track_end()
            await player.process_next()
        elif player.current.autoplay:
            player.set_command_log(text=log_text, emoji=emoji)
            await player.track_end()
            await player.process_next()
        else:
            if ephemeral:
                player.set_command_log(text=log_text, emoji=emoji)
            player.update = True

    @play.autocomplete("search")
    async def fav_add_autocomplete(self, inter: disnake.Interaction, query: str):

        if URL_REG.match(query):
            return [query] if len(query) < 100 else []

        favs: list = await fav_list(inter, query)

        if not inter.guild:
            try:
                await check_pool_bots(inter, return_first=True)
            except:
                return [query] if len(query) < 100 else []

        try:
            vc = inter.author.voice
        except AttributeError:
            vc = True

        if not vc or not query or (favs_size := len(favs)) >= 20:
            return favs[:20]

        return await google_search(self.bot, query, max_entries=20 - favs_size) + favs

    skip_back_cd = commands.CooldownMapping.from_cooldown(2, 13, commands.BucketType.member)
    skip_back_mc = commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    case_sensitive_args = CommandArgparse()
    case_sensitive_args.add_argument('-casesensitive', '-cs', '-exactmatch', '-exact', action='store_true',
                             help="T√¨m ki·∫øm √¢m nh·∫°c v·ªõi l·ªùi b√†i h√°t ch√≠nh x√°c thay v√¨ t√¨m ki·∫øm t·ª´ng t·ª´ trong t√™n c·ªßa √¢m nh·∫°c")
    @check_stage_topic()
    @is_requester()
    @check_voice()
    @pool_command(name="skip", aliases=["next", "n", "s", "pular", "skipto"], cooldown=skip_back_cd,
                  max_concurrency=skip_back_mc, description=f"B·ªè qua b√†i h√°t hi·ªán t·∫°i ƒëang ph√°t.",
                  only_voiced=True)
    async def skip_legacy(self, ctx: CustomContext, *, flags: str = ""):

        args, unknown = self.case_sensitive_args.parse_known_args(flags.split())

        if ctx.invoked_with == "skipto" and not unknown:
            raise GenericError("**B·∫°n ph·∫£i th√™m m·ªôt t√™n ƒë·ªÉ s·ª≠ d·ª•ng Skipto.**")

        await self.skip.callback(self=self, inter=ctx, query=" ".join(unknown), case_sensitive=args.casesensitive)

    @check_stage_topic()
    @is_requester()
    @has_source()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}Nh·∫£y ƒë·∫øn m·ªôt d√≤ng c·ª• th·ªÉ trong d√≤ng.",
        extras={"only_voiced": True}, cooldown=skip_back_cd, max_concurrency=skip_back_mc
    )
    async def skipto(
            self,
            inter: disnake.AppCmdInter,
            query: str = commands.Param(
                name="nome",
                description="T√™n c·ªßa b√†i h√°t (ho√†n ch·ªânh ho·∫∑c m·ªôt ph·∫ßn c·ªßa n√≥)."
            ),
            case_sensitive: bool = commands.Param(
                name="nome_exato", default=False,
                description="T√¨m ki·∫øm l·ªùi b√†i h√°t ch√≠nh x√°c thay v√¨ t√¨m ki·∫øm t·ª´ n√†y trong t√™n c·ªßa b√†i h√°t ",

            )
    ):

        await self.skip.callback(self=self, inter=inter, query=query, case_sensitive=case_sensitive)

    @check_stage_topic()
    @is_requester()
    @has_source()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}B·ªè qua b√†i h√°t hi·ªán t·∫°i ƒëang ph√°t.",
        extras={"only_voiced": True}, cooldown=skip_back_cd, max_concurrency=skip_back_mc
    )
    async def skip(
            self,
            inter: disnake.AppCmdInter, *,
            query: str = commands.Param(
                name="nome",
                description="T√™n √¢m nh·∫°c (ho√†n th√†nh ho·∫∑c m·ªôt ph·∫ßn c·ªßa n√≥).",
                default=None,
            ),
            play_only: str = commands.Param(
                name=disnake.Localized("play_only", data={disnake.Locale.pt_BR: "tocar_apenas"}),
                choices=[
                    disnake.OptionChoice(
                        disnake.Localized("Yes", data={disnake.Locale.pt_BR: "Sim"}), "yes"
                    ),
                    disnake.OptionChoice(
                        disnake.Localized("No", data={disnake.Locale.pt_BR: "N√£o"}), "no"
                    )
                ],
                description="Ch·ªâ c·∫ßn ch∆°i nh·∫°c ngay l·∫≠p t·ª©c (m√† kh√¥ng xoay flia)",
                default="no"
            ),
            case_sensitive: bool = commands.Param(
                name="nome_exato", default=False,
                description="T√¨m ki·∫øm √¢m nh·∫°c v·ªõi l·ªùi b√†i h√°t ch√≠nh x√°c thay v√¨ t√¨m ki·∫øm t·ª´ng t·ª´ trong t√™n c·ªßa √¢m nh·∫°c",

            )
    ):

        try:
            bot = inter.music_bot
            guild = inter.music_guild
        except AttributeError:
            bot = inter.bot
            guild = bot.get_guild(inter.guild_id)

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        ephemeral = await self.is_request_channel(inter)

        interaction = None

        if query:

            try:
                index = queue_track_index(inter, bot, query, case_sensitive=case_sensitive)[0][0]
            except IndexError:
                raise GenericError(f"**Kh√¥ng c√≥ b√†i h√°t n√†o ph√π h·ª£p v·ªõi t√™n: {query}**")

            track = player.queue[index]

            player.queue.append(player.last_track)
            player.last_track = None

            if player.loop == "current":
                player.loop = False

            if play_only == "yes":
                del player.queue[index]
                player.queue.appendleft(track)

            elif index > 0:
                player.queue.rotate(0 - index)

            player.set_command_log(emoji="‚§µÔ∏è", text="nh·∫£y v√†o b√†i h√°t hi·ªán t·∫°i.")

            embed = disnake.Embed(
                color=self.bot.get_color(guild.me),
                description= f"‚§µ<:verify:1134033164151566460> **‚†Ç{inter.author.mention} nh·∫£y v√†o b√†i h√°t:**\n"
                             f"‚ï∞[`{fix_characters(track.title, 43)}`]({track.uri or track.search_uri}){player.controller_link}"
            )

            try:
                if bot.user.id != self.bot.user.id:
                    embed.set_footer(text=f"S·ª≠ d·ª•ng {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
            except AttributeError:
                pass

            if isinstance(inter, disnake.MessageInteraction) and inter.data.custom_id == "queue_track_selection":
                await inter.response.edit_message(embed=embed, view=None)
            else:
                await inter.send(embed=embed, ephemeral=ephemeral)

        else:

            if isinstance(inter, disnake.MessageInteraction):
                player.set_command_log(text=f"{inter.author.mention} b·ªè qua b√†i h√°t.", emoji="‚è≠Ô∏è")
                await inter.response.defer()
                interaction = inter
            else:

                player.set_command_log(emoji="‚è≠Ô∏è", text=f"{inter.author.mention} b·ªè qua b√†i h√°t.")

                embed = disnake.Embed(
                    color=self.bot.get_color(guild.me),
                    description=f"<:verify:1134033164151566460> **‚†Ç{inter.author.mention} ƒë√£ b·ªè qua b√†i h√°t:\n"
                                f"‚ï∞[`{fix_characters(player.current.title, 43)}`]({player.current.uri or player.current.search_uri})**"
                                f"{player.controller_link}"
                )

                try:
                    if bot.user.id != self.bot.user.id:
                        embed.set_footer(text=f"S·ª≠ d·ª•ng {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
                except AttributeError:
                    pass

                await inter.send(embed=embed, ephemeral=ephemeral)

            if player.loop == "current":
                player.loop = False

        player.current.info["extra"]["track_loops"] = 0

        await player.track_end()
        player.ignore_np_once = True
        await player.process_next(inter=interaction)

    @check_stage_topic()
    @is_dj()
    @has_player()
    @check_voice()
    @pool_command(name="back", aliases=["b", "voltar"], description="Quay l·∫°i b√†i h√°t tr∆∞·ªõc.", only_voiced=True,
                  cooldown=skip_back_cd, max_concurrency=skip_back_mc)
    async def back_legacy(self, ctx: CustomContext):
        await self.back.callback(self=self, inter=ctx)

    @check_stage_topic()
    @is_dj()
    @has_player()
    @check_voice()
    @commands.max_concurrency(1, commands.BucketType.member)
    @commands.slash_command(
        description=f"{desc_prefix}Quay l·∫°i b√†i h√°t tr∆∞·ªõc.",
        extras={"only_voiced": True}, cooldown=skip_back_cd, max_concurrency=skip_back_mc
    )
    async def back(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if not len(player.queue) and (player.keep_connected or not len(player.played)):
            await player.seek(0)
            await self.interaction_message(inter, "ƒë√£ tr·ªü l·∫°i ƒë·∫ßu b√†i h√°t.", emoji="‚è™")
            return

        if player.keep_connected:
            track = player.queue.pop()
            player.queue.appendleft(player.current)
        else:
            try:
                track = player.played.pop()
            except:
                track = player.queue.pop()

            if player.current and not player.current.autoplay:
                player.queue.appendleft(player.current)

        player.last_track = None

        player.queue.appendleft(track)

        if isinstance(inter, disnake.MessageInteraction):
            interaction = inter
            player.set_command_log(text=f"{inter.author.mention} tr·ªü l·∫°i v·ªõi √¢m nh·∫°c hi·ªán t·∫°i.", emoji="‚èÆÔ∏è")
            await inter.response.defer()
        else:

            interaction = None

            t = player.queue[0]

            txt = [
                "tr·ªü l·∫°i v·ªõi b√†i h√°t hi·ªán t·∫°i.",
                f"‚èÆÔ∏è **‚†Ç{inter.author.mention} tr·ªü l·∫°i v·ªõi b√†i h√°t:\n‚ï∞[`{fix_characters(t.title, 43)}`]({t.uri or t.search_uri})**"
            ]

            await self.interaction_message(inter, txt, emoji="‚èÆÔ∏è", store_embed=True)

        if player.loop == "current":
            player.loop = False

        player.ignore_np_once = True

        if not player.current:
            await player.process_next(inter=interaction)
        else:
            player.is_previows_music = True
            await player.track_end()
            await player.process_next(inter=interaction)

    @check_stage_topic()
    @has_source()
    @check_voice()
    @commands.slash_command(
        name=disnake.Localized("voteskip", data={disnake.Locale.pt_BR: "votar_pular"}),
        description=f"{desc_prefix}B·ªè phi·∫øu ƒë·ªÉ b·ªè qua √¢m nh·∫°c hi·ªán t·∫°i.",
        extras={"only_voiced": True}
    )
    async def voteskip(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
            guild = inter.music_guild
        except AttributeError:
            bot = inter.bot
            guild = inter.guild

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        embed = disnake.Embed()

        if inter.author.id in player.votes:
            raise GenericError("**B·∫°n ƒë√£ b·ªè phi·∫øu ƒë·ªÉ b·ªè qua √¢m nh·∫°c hi·ªán t·∫°i.**")

        embed.colour = self.bot.get_color(guild.me)

        txt = [
            f"ƒê∆∞·ª£c b√¨nh ch·ªçn ƒë·ªÉ b·ªè qua √¢m nh·∫°c hi·ªán t·∫°i (phi·∫øu b·∫ßu: {len(player.votes) + 1}/{self.bot.config['VOTE_SKIP_AMOUNT']}).",
            f"{inter.author.mention} ƒê∆∞·ª£c b√¨nh ch·ªçn ƒë·ªÉ b·ªè qua √¢m nh·∫°c hi·ªán t·∫°i (phi·∫øu b·∫ßu: {len(player.votes) + 1}/{self.bot.config['VOTE_SKIP_AMOUNT']}).",
        ]

        if len(player.votes) < self.bot.config.get('VOTE_SKIP_AMOUNT', 3):
            embed.description = txt
            player.votes.add(inter.author.id)
            await self.interaction_message(inter, txt, emoji="‚úã")
            return

        await self.interaction_message(inter, txt, emoji="‚úã")
        await player.track_end()
        await player.process_next()

    volume_cd = commands.CooldownMapping.from_cooldown(1, 7, commands.BucketType.member)
    volume_mc = commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    @is_dj()
    @has_source()
    @check_voice()
    @pool_command(name="volume", description="ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng √¢m nh·∫°c.", aliases=["vol", "v"], only_voiced=True,
                  cooldown=volume_cd, max_concurrency=volume_mc)
    async def volume_legacy(self, ctx: CustomContext, level: str = None):

        if not level:
            raise GenericError("**B·∫°n ƒë√£ kh√¥ng ghi r√µ √¢m l∆∞·ª£ng (t·ª´ 5-150).**")

        if not level.isdigit() or len(level) > 3:
            raise GenericError("*√Çm l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!, ch·ªâ ƒë∆∞·ª£c ch·ªçn t·ª´ 5-150**", self_delete=7)

        await self.volume.callback(self=self, inter=ctx, value=int(level))

    @is_dj()
    @has_source()
    @check_voice()
    @commands.slash_command(description=f"{desc_prefix}ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng √¢m nh·∫°c.", extras={"only_voiced": True},
                            cooldown=volume_cd, max_concurrency=volume_mc)
    async def volume(
            self,
            inter: disnake.AppCmdInter, *,
            value: int = commands.Param(name="m·ª©c", description="Ch·ªçn t·ª´ 5 ƒë·∫øn 150", min_value=5.0, max_value=150.0)
    ):

        try:
            bot = inter.music_bot
            guild = inter.music_guild
        except AttributeError:
            bot = inter.bot
            guild = inter.guild

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        embed = disnake.Embed(color=disnake.Colour.red())

        if value is None:

            view = VolumeInteraction(inter)

            embed.colour = self.bot.get_color(guild.me)
            embed.description = "**Ch·ªçn m·ª©c √¢m l∆∞·ª£ng b√™n d∆∞·ªõi:**"

            try:
                if bot.user.id != self.bot.user.id:
                    embed.set_footer(text=f"S·ª≠ d·ª•ng {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
            except AttributeError:
                pass

            await inter.send(embed=embed, ephemeral=await self.is_request_channel(inter), view=view)
            await view.wait()
            if view.volume is None:
                return

            value = view.volume

        elif not 4 < value < 151:
            raise GenericError("√Çm l∆∞·ª£ng ph·∫£i n·∫±m gi·ªØa ** 5 ** ƒë·∫øn ** 150 **.")

        await player.set_volume(value)

        txt = [f"ƒëi·ªÅu ch·ªânh √Çm l∆∞·ª£ng th√†nh **{value}%**", f"<:Play_With_Me:1128555926417330207> **‚†Ç{inter.author.mention} ƒëi·ªÅu ch·ªânh √¢m l∆∞·ª£ng th√†nh {value}%**"]
        await self.interaction_message(inter, txt, emoji="<:Play_With_Me:1128555926417330207>")

    pause_resume_cd = commands.CooldownMapping.from_cooldown(2, 7, commands.BucketType.member)
    pause_resume_mc =commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    @is_dj()
    @has_source()
    @check_voice()
    @pool_command(name="pause", aliases=["pausar"], description="T·∫°m d·ª´ng √¢m nh·∫°c.", only_voiced=True,
                  cooldown=pause_resume_cd, max_concurrency=pause_resume_mc)
    async def pause_legacy(self, ctx: CustomContext):
        await self.pause.callback(self=self, inter=ctx)

    @is_dj()
    @has_source()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}T·∫°m d·ª´ng √¢m nh·∫°c.", extras={"only_voiced": True},
        cooldown=pause_resume_cd, max_concurrency=pause_resume_mc
    )
    async def pause(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if player.paused:
            raise GenericError("**B√†i h√°t ƒë√£ b·ªã t·∫°m d·ª´ng.**")

        await player.set_pause(True)

        txt = ["t·∫°m d·ª´ng √¢m nh·∫°c.", f"‚è∏Ô∏è **‚†Ç{inter.author.mention} ƒë√£ t·∫°m d·ª´ng b√†i h√°t.**"]

        await self.interaction_message(inter, txt, rpc_update=True, emoji="‚è∏Ô∏è")

    @is_dj()
    @has_source()
    @check_voice()
    @pool_command(name="resume", aliases=["unpause"], description="Tr·∫£ l·∫°i/ph√¢n t√°n √¢m nh·∫°c.", only_voiced=True,
                  cooldown=pause_resume_cd, max_concurrency=pause_resume_mc)
    async def resume_legacy(self, ctx: CustomContext):
        await self.resume.callback(self=self, inter=ctx)

    @is_dj()
    @has_source()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix} ti·∫øp t·ª•c b√†i h√°t.",
        extras={"only_voiced": True}, cooldown=pause_resume_cd, max_concurrency=pause_resume_mc
    )
    async def resume(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if not player.paused:
            raise GenericError("**√Çm nh·∫°c kh√¥ng b·ªã t·∫°m d·ª´ng.**")

        await player.set_pause(False)

        txt = ["ti·∫øp t·ª•c √¢m nh·∫°c.", f"‚ñ∂Ô∏è **‚†Ç{inter.author.mention} ƒë√£ ti·∫øp t·ª•c b√†i h√°t**"]
        await self.interaction_message(inter, txt, rpc_update=True, emoji="‚ñ∂Ô∏è")

    seek_cd = commands.CooldownMapping.from_cooldown(2, 10, commands.BucketType.member)
    seek_mc =commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    @check_stage_topic()
    @is_dj()
    @has_source()
    @check_voice()
    @pool_command(name="seek", aliases=["sk"], description="Ti·∫øn b·ªô/ti·∫øp t·ª•c √¢m nh·∫°c trong m·ªôt th·ªùi gian c·ª• th·ªÉ.",
                  only_voiced=True, cooldown=seek_cd, max_concurrency=seek_mc)
    async def seek_legacy(self, ctx: CustomContext, *, position: str = None):

        if not position:
            raise GenericError("**B·∫°n ƒë√£ kh√¥ng n√≥i th·ªùi gian ƒë·ªÉ di chuy·ªÉn/quay tr·ªü l·∫°i (v√≠ d·ª•: 1:55 | 33 | 0:45).**")

        await self.seek.callback(self=self, inter=ctx, position=position)

    @check_stage_topic()
    @is_dj()
    @has_source()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}Ti·∫øn b·ªô/ti·∫øp t·ª•c √¢m nh·∫°c trong m·ªôt th·ªùi gian c·ª• th·ªÉ.",
        extras={"only_voiced": True}, cooldown=seek_cd, max_concurrency=seek_mc
    )
    async def seek(
            self,
            inter: disnake.AppCmdInter,
            position: str = commands.Param(name="tempo", description="Th·ªùi gian ƒë·ªÉ ti·∫øn / tr·ªü l·∫°i (v√≠ d·ª•: 1:45 / 40/0: 30)")
    ):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if player.current.is_stream:
            raise GenericError("**B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y trong m·ªôt livestream.**")

        position = position.split(" | ")[0].replace(" ", ":")

        seconds = string_to_seconds(position)

        if seconds is None:
            raise GenericError(
                "**B·∫°n ƒë√£ s·ª≠ d·ª•ng m·ªôt th·ªùi gian kh√¥ng h·ª£p l·ªá !S·ª≠ d·ª•ng gi√¢y (1 ho·∫∑c 2 ch·ªØ s·ªë) ho·∫∑c ·ªü ƒë·ªãnh d·∫°ng (ph√∫t) :(gi√¢y)**")

        milliseconds = seconds * 1000

        if milliseconds < 0:
            milliseconds = 0

        if milliseconds > player.position:

            emoji = "‚è©"

            txt = [
                f"ƒë√£ tua th·ªùi gian c·ªßa b√†i h√°t ƒë·∫øn `{time_format(milliseconds)}`",
                f"{emoji} **‚†Ç{inter.author.mention} ƒë√£ tua th·ªùi gian c·ªßa b√†i h√°t ƒë·ªÉn:** `{time_format(milliseconds)}`"
            ]

        else:

            emoji = "‚è™"

            txt = [
                f"Th·ªùi gian c·ªßa b√†i h√°t ƒë√£ tr·ªü l·∫°i: `{time_format(milliseconds)}`",
                f"{emoji} **‚†Ç{inter.author.mention} ƒë√£ ƒë∆∞a th·ªùi gian c·ªßa b√†i h√°t tr·ªü l·∫°i:** `{time_format(milliseconds)}`"
            ]

        await player.seek(milliseconds)

        if player.paused:
            await player.set_pause(False)

        await self.interaction_message(inter, txt, emoji=emoji)

        await asyncio.sleep(2)
        await player.process_rpc()

    @seek.autocomplete("tempo")
    async def seek_suggestions(self, inter: disnake.Interaction, query: str):

        try:
            if query or not inter.author.voice:
                return
        except AttributeError:
            pass

        try:
            await check_pool_bots(inter, only_voiced=True)
            bot = inter.music_bot
        except:
            return

        try:
            player: LavalinkPlayer = bot.music.players[inter.guild_id]
        except KeyError:
            return

        if not player.current or player.current.is_stream:
            return

        seeks = []

        if player.current.duration >= 90000:
            times = [int(n * 0.5 * 10) for n in range(20)]
        else:
            times = [int(n * 1 * 10) for n in range(20)]

        for p in times:
            percent = percentage(p, player.current.duration)
            seeks.append(f"{time_format(percent)} | {p}%")

        return seeks

    loop_cd = commands.CooldownMapping.from_cooldown(3, 5, commands.BucketType.member)
    loop_mc =commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    @is_dj()
    @has_source()
    @check_voice()
    @pool_command(
        description=f"Ch·ªçn Ch·∫ø ƒë·ªô l·∫∑p l·∫°i gi·ªØa: √Çm nh·∫°c hi·ªán t·∫°i / Line / T·∫Øt / S·ªë l∆∞·ª£ng (s·ª≠ d·ª•ng s·ªë).",
        only_voiced=True, cooldown=loop_cd, max_concurrency=loop_mc,
        usage="{prefix}{cmd} <S·ªë l∆∞·ª£ng | Ch·∫ø ƒë·ªô>\nV√≠ d·ª•: 1: {prefix}{cmd} 1\nV√≠ d·ª• 2: {prefix}{cmd} H√†ng")
    async def loop(self, ctx: CustomContext, mode: str = None):

        if not mode:

            embed = disnake.Embed(
                description="**Ch·ªçn ch·∫ø ƒë·ªô l·∫∑p l·∫°i:**",
                color=self.bot.get_color(ctx.guild.me)
            )

            msg = await ctx.send(
                ctx.author.mention,
                embed=embed,
                components=[
                    disnake.ui.Select(
                        placeholder="Ch·ªçn m·ªôt t√πy ch·ªçn:",
                        custom_id="loop_mode_legacy",
                        options=[
                            disnake.SelectOption(label="B√†i h√°t hi·ªán t·∫°i", value="current"),
                            disnake.SelectOption(label="H√†ng ƒë·ª£i", value="queue"),
                            disnake.SelectOption(label="V√¥ hi·ªáu h√≥a", value="off")
                        ]
                    )
                ]
            )

            try:
                select: disnake.MessageInteraction = await self.bot.wait_for(
                    "dropdown", timeout=30,
                    check=lambda i: i.message.id == msg.id and i.author == ctx.author
                )
            except asyncio.TimeoutError:
                embed.description = "ƒê√£ h·∫øt th·ªùi gian!"
                try:
                    await msg.edit(embed=embed, view=None)
                except:
                    pass
                return

            mode = select.data.values[0]
            ctx.store_message = msg

        if mode.isdigit():

            if len(mode) > 2 or int(mode) > 10:
                raise GenericError(f"**S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá: {mode}**\n"
                                   "`S·ªë l∆∞·ª£ng cho ph√©p t·ªëi ƒëa: 10`")

            await self.loop_amount.callback(self=self, inter=ctx, value=int(mode))
            return

        if mode not in ('current', 'queue', 'off'):
            raise GenericError("C√°ch kh√¥ng h·ª£p l·ªá! Ch·ªçn gi·ªØa: Hi·ªán t·∫°i/H√†ng ƒë·ª£i/T·∫ÆT")

        await self.loop_mode.callback(self=self, inter=ctx, mode=mode)

    @is_dj()
    @has_source()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}Ch·ªçn Ch·∫ø ƒë·ªô l·∫∑p l·∫°i gi·ªØa: b√†i h√°t hi·ªán t·∫°i / H√†ng ƒë·ª£i ho·∫∑c T·∫Øt.",
        extras={"only_voiced": True}, cooldown=loop_cd, max_concurrency=loop_mc
    )
    async def loop_mode(
            self,
            inter: disnake.AppCmdInter,
            mode: str = commands.Param(
                name="mode",
                choices=[
                    disnake.OptionChoice(
                        disnake.Localized("Current", data={disnake.Locale.pt_BR: "M√∫sica Atual"}), "current"
                    ),
                    disnake.OptionChoice(
                        disnake.Localized("Queue", data={disnake.Locale.pt_BR: "Fila"}), "queue"
                    ),
                    disnake.OptionChoice(
                        disnake.Localized("Off", data={disnake.Locale.pt_BR: "Desativar"}), "off"
                    ),
                ]
            )
    ):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if mode == player.loop:
            raise GenericError("**Ch·∫ø ƒë·ªô l·∫∑p l·∫°i ƒë∆∞·ª£c ch·ªçn ƒë√£ ho·∫°t ƒë·ªông...**")

        if mode == 'off':
            mode = False
            player.current.info["extra"]["track_loops"] = 0
            emoji = "‚≠ï"
            txt = ['V√¥ hi·ªáu h√≥a l·∫∑p l·∫°i.', f"{emoji} **‚†Ç{inter.author.mention}V√¥ hi·ªáu h√≥a l·∫∑p l·∫°i.**"]

        elif mode == "current":
            player.current.info["extra"]["track_loops"] = 0
            emoji = "üîÇ"
            txt = ["ƒê√£ k√≠ch ho·∫°t l·∫∑p l·∫°i c·ªßa b√†i h√°t hi·ªán t·∫°i.",
                   f"{emoji} **‚†Ç{inter.author.mention} ƒê√£ k√≠ch ho·∫°t l·∫∑p l·∫°i c·ªßa b√†i h√°t hi·ªán t·∫°i.**"]

        else:  # queue
            emoji = "üîÅ"
            txt = ["ƒë√£ k√≠ch ho·∫°t l·∫∑p l·∫°i c·ªßa d√≤ng.", f"{emoji} **‚†Ç{inter.author.mention} ƒë√£ k√≠ch ho·∫°t l·∫∑p l·∫°i c·ªßa h√†ng ƒë·ª£i.**"]

        player.loop = mode

        bot.loop.create_task(player.process_rpc())

        await self.interaction_message(inter, txt, emoji=emoji)

    @is_dj()
    @has_source()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}X√°c ƒë·ªãnh s·ªë l∆∞·ª£ng l·∫∑p l·∫°i c·ªßa √¢m nh·∫°c hi·ªán t·∫°i.",
        extras={"only_voiced": True}, cooldown=loop_cd, max_concurrency=loop_mc
    )
    async def loop_amount(
            self,
            inter: disnake.AppCmdInter,
            value: int = commands.Param(name="valor", description="S·ªë l·∫ßn l·∫∑p l·∫°i.")
    ):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        player.current.info["extra"]["track_loops"] = value

        txt = [
            f"x√°c ƒë·ªãnh s·ªë l∆∞·ª£ng l·∫∑p l·∫°i c·ªßa b√†i h√°t "
            f"[`{(fix_characters(player.current.title, 25))}`]({player.current.uri or player.current.search_uri}) para **{value}**.",
            f"üîÑ **‚†Ç{inter.author.mention} x√°c ƒë·ªãnh s·ªë l∆∞·ª£ng l·∫∑p l·∫°i b√†i h√°t l√† [{value}]:**\n"
            f"‚ï∞[`{player.current.title}`]({player.current.uri or player.current.search_uri})"
        ]

        await self.interaction_message(inter, txt, rpc_update=True, emoji="üîÑ")

    remove_mc = commands.MaxConcurrency(1, per=commands.BucketType.guild, wait=False)

    @is_dj()
    @has_player()
    @check_voice()
    @pool_command(name="remove", aliases=["r", "del"], description="H·ªßy b·ªè m·ªôt d√≤ng c·ª• th·ªÉ kh·ªèi d√≤ng.",
                  only_voiced=True, max_concurrency=remove_mc, extras={"flags": case_sensitive_args},
                  usage="{prefix}{cmd} [nome]\nEx: {prefix}{cmd} sekai")
    async def remove_legacy(self, ctx: CustomContext, *, flags: str = ""):

        args, unknown = ctx.command.extras['flags'].parse_known_args(flags.split())

        if not unknown:
            raise GenericError("**B·∫°n ƒë√£ kh√¥ng th√™m t√™n c·ªßa b√†i h√°t.**")

        await self.remove.callback(self=self, inter=ctx, query=" ".join(unknown), case_sensitive=args.casesensitive)

    @is_dj()
    @has_player()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}X√≥a m·ªôt d√≤ng c·ª• th·ªÉ kh·ªèi h√†ng ƒë·ª£i.",
        extras={"only_voiced": True}, max_concurrency=remove_mc
    )
    async def remove(
            self,
            inter: disnake.AppCmdInter,
            query: str = commands.Param(name="nome", description="Nome da m√∫sica completo."),
            case_sensitive: bool = commands.Param(
                name="nome_exato", default=False,
                description="T√¨m ki·∫øm √¢m nh·∫°c v·ªõi l·ªùi b√†i h√°t ch√≠nh x√°c thay v√¨ t√¨m ki·∫øm t·ª´ng t·ª´ trong t√™n c·ªßa √¢m nh·∫°c",

            )
    ):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        try:
            index = queue_track_index(inter, bot, query, case_sensitive=case_sensitive)[0][0]
        except IndexError:
            raise GenericError(f"**Kh√¥ng c√≥ b√†i h√°t n√†o ph√π h·ª£p v·ªõi t√™n: {query}**")

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        track = player.queue[index]

        player.queue.remove(track)

        txt = [
            f"lo·∫°i b·ªè √¢m nh·∫°c [`{(fix_characters(track.title, 25))}`]({track.uri or track.search_uri}) kh·ªèi h√†ng.",
            f"‚ôªÔ∏è **‚†Ç{inter.author.mention} ƒê√£ lo·∫°i b·ªè √¢m nh·∫°c kh·ªèi d√≤ng:**\n‚ï∞[`{track.title}`]({track.uri or track.search_uri})"
        ]

        await self.interaction_message(inter, txt, emoji="‚ôªÔ∏è")

        await player.update_message()

    queue_manipulation_cd = commands.CooldownMapping.from_cooldown(2, 15, commands.BucketType.guild)

    @is_dj()
    @has_player()
    @check_voice()
    @pool_command(name="readd", aliases=["readicionar", "rdd"], only_voiced=True, cooldown=queue_manipulation_cd,
                  max_concurrency=remove_mc, description="ƒê·ªçc c√°c b√†i h√°t ƒë∆∞·ª£c ch∆°i trong h√†ng.")
    async def readd_legacy(self, ctx: CustomContext):
        await self.readd_songs.callback(self=self, inter=ctx)

    @is_dj()
    @has_player()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}ƒê·ªçc c√°c b√†i h√°t ƒë∆∞·ª£c ch∆°i trong h√†ng.",
        extras={"only_voiced": True}, cooldown=queue_manipulation_cd, max_concurrency=remove_mc
    )
    async def readd_songs(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if not player.played:
            raise GenericError("**Kh√¥ng c√≥ b√†i h√°t n√†o ƒë∆∞·ª£c ch∆°i.**")
        qsize = len(player.played) + len(player.failed_tracks)

        player.played.reverse()
        player.failed_tracks.reverse()
        player.queue.extend(player.failed_tracks)
        player.queue.extend(player.played)
        player.played.clear()
        player.failed_tracks.clear()

        txt = [
            f"Th√™m [{qsize}] B√†i h√°t ƒë√£ ph√°t v√†o l·∫°i h√†ng ch·ªù.",
            f"üé∂ **‚†Ç{inter.author.mention} ƒë√£ th√™m {qsize} b√†i h√°t v√†o l·∫°i h√†ng ƒë·ª£i.**"
        ]

        await self.interaction_message(inter, txt, emoji="üé∂")

        await player.update_message()

        if not player.current:
            await player.process_next()
        else:
            await player.update_message()

    move_args = CommandArgparse()
    move_args.add_argument('-count', '-counter', '-amount', '-c', '-max', type=int, default=None,
                           help="Ch·ªâ ƒë·ªãnh m·ªôt s·ªë b√†i h√°t ƒë·ªÉ di chuy·ªÉn v·ªõi t√™n ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.")
    move_args.add_argument('-casesensitive', '-cs', '-exactmatch', '-exact', action='store_true',
                           help="T√¨m ki·∫øm l·ªùi b√†i h√°t ch√≠nh x√°c thay v√¨ t√¨m ki·∫øm t·ª´ng t·ª´ trong t√™n "
                                "t·ª´ √¢m nh·∫°c")
    move_args.add_argument('-position', '-pos', help="Ch·ªâ ƒë·ªãnh v·ªã tr√≠ ƒë√≠ch", type=int, default=None)

    @is_dj()
    @has_player()
    @check_voice()
    @pool_command(name="move", aliases=["mv", "mover"], only_voiced=True, max_concurrency=remove_mc,
                  description="Di chuy·ªÉn m·ªôt b√†i h√°t ƒë·∫øn v·ªã tr√≠ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh trong h√†ng ƒë·ª£i.")
    async def move_legacy(self, ctx: CustomContext, position: Optional[int] = None, *, flags: str = ""):

        args, unknown = self.move_args.parse_known_args(args=flags.split())

        if args.position:
            if position:
                unknown.insert(0, str(position))
            position = args.position

        elif not position:
            raise GenericError("**B·∫°n ƒë√£ kh√¥ng b√°o c√°o m·ªôt v·ªã tr√≠ trong h√†ng ƒë·ª£i.**")

        if not unknown:
            raise GenericError("**B·∫°n ƒë√£ kh√¥ng th√™m t√™n c·ªßa b√†i h√°t.**")

        await self.move.callback(self=self, inter=ctx, position=position, query=" ".join(unknown), match_count=args.count or 1, case_sensitive=args.casesensitive)

    @is_dj()
    @has_player()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}Di chuy·ªÉn m·ªôt b√†i h√°t ƒë·∫øn v·ªã tr√≠ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh trong h√†ng ƒë·ª£i.",
        extras={"only_voiced": True}, max_concurrency=remove_mc
    )
    async def move(
            self,
            inter: disnake.AppCmdInter,
            query: str = commands.Param(name="nome", description="T√™n c·ªßa b√†i h√°t."),
            position: int = commands.Param(name="position", description="V·ªã tr√≠ ƒë√≠ch theo d√≤ng.", default=1),
            match_count: int = commands.Param(
                name="quantidade",
                description="Ch·ªâ ƒë·ªãnh m·ªôt s·ªë b√†i h√°t ƒë·ªÉ di chuy·ªÉn v·ªõi t√™n ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.",
                default=1, min_value=1, max_value=999,
            ),
            case_sensitive: bool = commands.Param(
                name="nome_exato", default=False,
                description="T√¨m ki·∫øm √¢m nh·∫°c v·ªõi l·ªùi b√†i h√°t ch√≠nh x√°c thay v√¨ t√¨m ki·∫øm t·ª´ng t·ª´ trong t√™n c·ªßa √¢m nh·∫°c",

            )
    ):

        if position < 1:
            raise GenericError(f"**B·∫°n ƒë√£ s·ª≠ d·ª•ng m·ªôt v·ªã tr√≠ kh√¥ng h·ª£p l·ªá: {position}**.")

        try:
            bot = inter.music_bot
            guild = inter.music_guild
        except AttributeError:
            bot = inter.bot
            guild = inter.guild

        player: LavalinkPlayer = bot.music.players[guild.id]

        indexes = queue_track_index(inter, bot, query, match_count=match_count, case_sensitive=case_sensitive)

        if not indexes:
            raise GenericError(f"**Kh√¥ng c√≥ b√†i h√°t n√†o ph√π h·ª£p v·ªõi t√™n: {query}**")

        for index, track in reversed(indexes):
            player.queue.remove(track)

            player.queue.insert(int(position) - 1, track)

        if (i_size := len(indexes)) == 1:
            track = indexes[0][1]

            txt = [
                f"Chuy·ªÉn b√†i h√°t [`{fix_characters(track.title, limit=25)}`]({track.uri or track.search_uri}) ƒë·∫øn v·ªã tr√≠ **[{position}]** trong h√†ng.",
                f"‚Ü™Ô∏è **‚†Ç{inter.author.mention} ƒë√£ di chuy·ªÉn m·ªôt b√†i h√°t ƒë·∫øn v·ªã tr√≠ [{position}]:**\n"
                f"‚ï∞[`{fix_characters(track.title, limit=43)}`]({track.uri or track.search_uri})"
            ]

            await self.interaction_message(inter, txt, emoji="‚Ü™Ô∏è")

        else:

            tracklist = "\n".join(f"[`{fix_characters(t.title, 45)}`]({t.uri or t.search_uri})" for i, t in indexes[:10])

            position_text = position if i_size == 1 else (str(position) + '-' + str(position+i_size-1))

            embed = disnake.Embed(
                color=self.bot.get_color(guild.me),
                description=f"‚Ü™Ô∏è **‚†Ç{inter.author.mention} di chuy·ªÉn [{i_size}] B√†i h√°t c√≥ t√™n \"{query}\" ƒë·∫øn " \
                            f"v·ªã tr√≠ [{position_text}] trong h√†ng:**\n\n{tracklist}"
            )

            embed.set_thumbnail(url=indexes[0][1].thumb)

            if i_size > 20:
                embed.description += f"\n\n`V√† h∆°n th·∫ø n·ªØa {i_size - 20} C√°c b√†i h√°t.`"

            if player.controller_link:
                embed.description += f" `|`{player.controller_link}"

            ephemeral = await self.is_request_channel(inter)

            if ephemeral:
                player.set_command_log(
                    text=f"{inter.author.mention} di chuy·ªÉn **[{i_size}]** B√†i h√°t c√≥ t√™n **{fix_characters(query, 25)}"
                         f"** ƒë·∫øn v·ªã tr√≠ **[{position_text}]** trong h√†ng.", emoji="‚Ü™Ô∏è")

            try:
                if bot.user.id != self.bot.user.id:
                    embed.set_footer(text=f"S·ª≠ d·ª•ng {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
            except AttributeError:
                pass

            await inter.send(embed=embed, ephemeral=ephemeral)

        await player.update_message()

    is_dj()
    @has_player()
    @check_voice()
    @pool_command(name="rotate", aliases=["rt", "rotacionar"], only_voiced=True,
                  description="Xoay h√†ng ƒë·ª£i cho nh·∫°c ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.",
                  cooldown=queue_manipulation_cd, max_concurrency=remove_mc)
    async def rotate_legacy(self, ctx: CustomContext, *, flags: str = ""):

        args, unknown = self.case_sensitive_args.parse_known_args(flags.split())

        if not unknown:
            raise GenericError("**B·∫°n ƒë√£ kh√¥ng th√™m t√™n c·ªßa b√†i h√°t.**")

        await self.rotate.callback(self=self, inter=ctx, query=" ".join(unknown), case_sensitive=args.casesensitive)

    @is_dj()
    @has_player()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}Xoay h√†ng ƒë·ª£i cho nh·∫°c ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.",
        extras={"only_voiced": True}, cooldown=queue_manipulation_cd, max_concurrency=remove_mc
    )
    async def rotate(
            self,
            inter: disnake.AppCmdInter,
            query: str = commands.Param(name="nome", description="Ho√†n th√†nh t√™n √¢m nh·∫°c."),
            case_sensitive: bool = commands.Param(
                name="nome_exato", default=False,
                description="T√¨m ki·∫øm √¢m nh·∫°c v·ªõi l·ªùi b√†i h√°t ch√≠nh x√°c thay v√¨ t√¨m ki·∫øm t·ª´ng t·ª´ trong t√™n c·ªßa √¢m nh·∫°c",
            )
    ):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        index = queue_track_index(inter, bot, query, case_sensitive=case_sensitive)

        if not index:
            raise GenericError(f"**Kh√¥ng c√≥ b√†i h√°t n√†o ph√π h·ª£p v·ªõi t√™n: {query}**")

        index = index[0][0]

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        track = player.queue[index]

        if index <= 0:
            raise GenericError(f"**ƒê·∫øn √¢m nh·∫°c **[`{track.title}`]({track.uri or track.search_uri}) N√≥ ƒë√£ l√† d√≤ng ti·∫øp theo.")

        player.queue.rotate(0 - (index))

        txt = [
            f"Xoay d√≤ng sang √¢m nh·∫°c [`{(fix_characters(track.title, limit=25))}`]({track.uri or track.search_uri}).",
            f"üîÉ **‚†Ç{inter.author.mention} ƒë√£ Xoay d√≤ng sang √¢m nh·∫°c:**\n‚ï∞[`{track.title}`]({track.uri or track.search_uri})."
        ]

        await self.interaction_message(inter, txt, emoji="üîÉ")

        await player.update_message()

    song_request_thread_cd = commands.CooldownMapping.from_cooldown(1, 120, commands.BucketType.guild)

    @is_dj()
    @has_player()
    @check_voice()
    @commands.bot_has_guild_permissions(manage_threads=True)
    @pool_command(name="songrequesttread", aliases=["songrequest", "srt"], only_voiced=True,
                  description="T·∫°o m·ªôt cu·ªôc tr√≤ chuy·ªán ch·ªß ƒë·ªÅ/t·∫°m th·ªùi cho c√°c y√™u c·∫ßu b√†i h√°t (y√™u c·∫ßu √¢m nh·∫°c)")
    async def song_request_thread_legacy(self, ctx: CustomContext):

        await self.song_request_thread.callback(self=self, inter=ctx)

    @is_dj()
    @has_player()
    @check_voice()
    @commands.bot_has_guild_permissions(manage_threads=True)
    @commands.slash_command(extras={"only_voiced": True}, cooldown=song_request_thread_cd,
                            description=f"{desc_prefix}T·∫°o m·ªôt cu·ªôc tr√≤ chuy·ªán ch·ªß ƒë·ªÅ/t·∫°m th·ªùi cho c√°c y√™u c·∫ßu b√†i h√°t (y√™u c·∫ßu √¢m nh·∫°c)")
    async def song_request_thread(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
            guild = inter.music_guild
        except AttributeError:
            bot = inter.bot
            guild = inter.guild

        if not self.bot.intents.message_content:
            raise GenericError("**T√¥i hi·ªán kh√¥ng c√≥ √Ω ƒë·ªãnh c√≥ n·ªôi dung tin nh·∫Øn ƒë·ªÉ h·ªôi t·ª•ir "
                               "N·ªôi dung tin nh·∫Øn**")

        player: LavalinkPlayer = bot.music.players[guild.id]

        if player.static:
            raise GenericError("**B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y v·ªõi k√™nh y√™u c·∫ßu b√†i h√°t ƒë∆∞·ª£c c·∫•u h√¨nh.**")

        if player.has_thread:
            raise GenericError("**ƒê√£ c√≥ m·ªôt cu·ªôc tr√≤ chuy·ªán ch·ªß ƒë·ªÅ/ho·∫°t ƒë·ªông tr√™n ng∆∞·ªùi ch∆°i.**")

        if not isinstance(player.text_channel, disnake.TextChannel):
            raise GenericError(f"**Tr√¨nh ƒëi·ªÅu khi·ªÉn ng∆∞·ªùi ch∆°i ƒëang ho·∫°t ƒë·ªông tr√™n m·ªôt k√™nh kh√¥ng t∆∞∆°ng th√≠ch v·ªõi"
                               f"Ch·ªß ƒë·ªÅ/cu·ªôc tr√≤ chuy·ªán t·∫°o ra.**")

        if not player.controller_mode:
            raise GenericError("**Xu·∫•t hi·ªán da/hi·ªán t·∫°i kh√¥ng t∆∞∆°ng th√≠ch v·ªõi song-request "
                               "th√¥ng qua ch·ªß ƒë·ªÅ/cu·ªôc tr√≤ chuy·ªán\n\n"
                               "L∆∞u √Ω: ** `H·ªá th·ªëng n√†y y√™u c·∫ßu m·ªôt l√†n da s·ª≠ d·ª•ng c√°c n√∫t.`")

        await inter.response.defer(ephemeral=True)

        thread = await player.message.create_thread(name=f"{bot.user.name} temp. song-request", auto_archive_duration=10080)

        txt = [
            "ƒê√£ k√≠ch ho·∫°t h·ªá th·ªëng tr√≤ chuy·ªán t·∫°m th·ªùi/ch·ªß ƒë·ªÅ cho y√™u c·∫ßu √¢m nh·∫°c.",
            f"üí¨ **‚†Ç{inter.author.mention} ƒê√£ t·∫°o [Ch·ªß ƒë·ªÅ/cu·ªôc tr√≤ chuy·ªán]({thread.jump_url}) t·∫°m th·ªùi cho y√™u c·∫ßu √¢m nh·∫°c.**"
        ]

        await self.interaction_message(inter, txt, emoji="üí¨", defered=True, force=True)

    @rotate.autocomplete("nome")
    @move.autocomplete("nome")
    @skip.autocomplete("nome")
    @skipto.autocomplete("nome")
    @remove.autocomplete("nome")
    async def queue_tracks(self, inter: disnake.AppCmdInter, query: str):

        try:
            if not inter.author.voice:
                return
        except AttributeError:
            pass

        try:
            if not await check_pool_bots(inter, only_voiced=True):
                return
        except PoolException:
            pass
        except:
            return

        try:
            player = inter.music_bot.music.players[inter.guild_id]
        except KeyError:
            return

        results = []

        count = 0

        for track in player.queue:

            if count == 20:
                break

            title = track.title.lower().split()

            query_words = query.lower().split()

            word_count = 0

            for query_word in query.lower().split():
                for title_word in title:
                    if query_word in title_word:
                        title.remove(title_word)
                        word_count += 1
                        break

            if word_count == len(query_words):
                results.append(f"{track.title[:81]} || ID > {track.unique_id}")
                count += 1

        return results or [f"{track.title[:81]} || ID > {track.unique_id}" for n, track in enumerate(player.queue)
                if query.lower() in track.title.lower()][:20]

    nightcore_cd = commands.CooldownMapping.from_cooldown(1, 7, commands.BucketType.guild)
    nightcore_mc = commands.MaxConcurrency(1, per=commands.BucketType.guild, wait=False)

    @is_dj()
    @has_source()
    @check_voice()
    @pool_command(name="nightcore", aliases=["nc"], only_voiced=True, cooldown=nightcore_cd, max_concurrency=nightcore_mc,
                  description="K√≠ch ho·∫°t/V√¥ hi·ªáu h√≥a hi·ªáu ·ª©ng Nightcore (Nh·∫°c tƒÉng t·ªëc v·ªõi √¢m s·∫Øc h∆°n).")
    async def nightcore_legacy(self, ctx: CustomContext):

        await self.nightcore.callback(self=self, inter=ctx)

    @is_dj()
    @has_source()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}K√≠ch ho·∫°t/V√¥ hi·ªáu h√≥a hi·ªáu ·ª©ng Nightcore (Nh·∫°c tƒÉng t·ªëc v·ªõi √¢m s·∫Øc h∆°n).",
        extras={"only_voiced": True}, cooldown=nightcore_cd, max_concurrency=nightcore_mc,
    )
    async def nightcore(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        player.nightcore = not player.nightcore

        if player.nightcore:
            await player.set_timescale(pitch=1.2, speed=1.1)
            txt = "k√≠ch ho·∫°t"
        else:
            await player.set_timescale(enabled=False)
            await player.update_filters()
            txt = "v√¥ hi·ªáu h√≥a"

        txt = [f"{txt} Hi·ªáu ·ª©ng Nightcore.", f"üá≥ **‚†Ç{inter.author.mention} {txt} hi·ªáu ·ª©ng nightcore.**"]

        await self.interaction_message(inter, txt, emoji="üá≥")

    controller_cd = commands.CooldownMapping.from_cooldown(1, 10, commands.BucketType.member)
    controller_mc = commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    @has_source()
    @check_voice()
    @pool_command(name="controller", aliases=["np", "ctl"], only_voiced=True, cooldown=controller_cd,
                  max_concurrency=controller_mc, description="G·ª≠i b·ªô ƒëi·ªÅu khi·ªÉn ng∆∞·ªùi ch∆°i ƒë·∫øn m·ªôt k√™nh c·ª• th·ªÉ/hi·ªán t·∫°i.")
    async def controller_legacy(self, ctx: CustomContext):
        await self.controller.callback(self=self, inter=ctx)

    @has_source()
    @check_voice()
    @commands.slash_command(description=f"{desc_prefix}G·ª≠i b·ªô ƒëi·ªÅu khi·ªÉn ng∆∞·ªùi ch∆°i ƒë·∫øn m·ªôt k√™nh c·ª• th·ªÉ/hi·ªán t·∫°i.",
                            extras={"only_voiced": True}, cooldown=controller_cd, max_concurrency=controller_mc,)
    async def controller(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
            guild = inter.music_guild
            channel = bot.get_channel(inter.channel.id)
        except AttributeError:
            bot = inter.bot
            guild = inter.guild
            channel = inter.channel

        player: LavalinkPlayer = bot.music.players[guild.id]

        if player.static:
            raise GenericError("L·ªánh n√†y kh√¥ng th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong ch·∫ø ƒë·ªô tr√¨nh ph√°t c·ªë ƒë·ªãnh.")

        if player.has_thread:
            raise GenericError("**L·ªánh n√†y kh√¥ng th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng v·ªõi m·ªôt cu·ªôc tr√≤ chuy·ªán t√≠ch c·ª±c trong "
                               f"[tin nh·∫Øn]({player.message.jump_url}) c·ªßa ng∆∞·ªùi ch∆°i.**")

        if not inter.response.is_done():
            await inter.response.defer(ephemeral=True)

        if channel != player.text_channel:

            await is_dj().predicate(inter)

            try:

                player.set_command_log(
                    text=f"{inter.author.mention} ƒë√£ ƒë∆∞a b·∫£ng ƒëi·ªÅu khuy·ªÉn ƒë·∫øn k√™nh {inter.channel.mention}.",
                    emoji="üí†"
                )

                embed = disnake.Embed(
                    description=f"üí† **‚†Ç{inter.author.mention} ƒë√£ ƒë∆∞a b·∫£ng ƒëi·ªÅu khuy·ªÉn ƒë·∫øn k√™nh:** {channel.mention}",
                    color=self.bot.get_color(guild.me)
                )

                try:
                    if bot.user.id != self.bot.user.id:
                        embed.set_footer(text=f"S·ª≠ d·ª•ng {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
                except AttributeError:
                    pass

                await player.text_channel.send(embed=embed)

            except:
                pass

        await player.destroy_message()

        player.text_channel = channel

        await player.invoke_np()

        if not isinstance(inter, CustomContext):
            await inter.edit_original_message("**Ng∆∞·ªùi ch∆°i ƒë√£ ƒë∆∞·ª£c g·ª≠i l·∫°i th√†nh c√¥ng!**")

    @is_dj()
    @has_player()
    @check_voice()
    @commands.user_command(name=disnake.Localized("Add DJ", data={disnake.Locale.pt_BR: "Adicionar DJ"}),
                           extras={"only_voiced": True})
    async def adddj_u(self, inter: disnake.UserCommandInteraction):
        await self.add_dj(inter, user=inter.target)

    @is_dj()
    @has_player()
    @check_voice()
    @pool_command(name="adddj", aliases=["adj"], only_voiced=True,
                  description="Th√™m m·ªôt th√†nh vi√™n v√†o danh s√°ch c·ªßa DJ v√†o phi√™n ng∆∞·ªùi ch∆°i hi·ªán t·∫°i.")
    async def add_dj_legacy(self, ctx: CustomContext, user: Optional[disnake.Member] = None):

        if not user:
            raise GenericError(f"**B·∫°n ƒë√£ kh√¥ng b√°o c√°o m·ªôt th√†nh vi√™n (ID, ƒë·ªÅ c·∫≠p, t√™n, v.v.).**")

        await self.add_dj.callback(self=self, inter=ctx, user=user)

    @is_dj()
    @has_player()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}Th√™m m·ªôt th√†nh vi√™n v√†o danh s√°ch c·ªßa DJ v√†o phi√™n ng∆∞·ªùi ch∆°i hi·ªán t·∫°i.",
        extras={"only_voiced": True}
    )
    async def add_dj(
            self,
            inter: disnake.AppCmdInter, *,
            user: disnake.User = commands.Param(name="membro", description="Chi ƒë·ªÉ ƒë∆∞·ª£c th√™m v√†o.")
    ):

        error_text = None

        try:
            bot = inter.music_bot
            guild = inter.music_guild
            channel = bot.get_channel(inter.channel.id)
        except AttributeError:
            bot = inter.bot
            guild = inter.guild
            channel = inter.channel

        player: LavalinkPlayer = bot.music.players[guild.id]

        user = guild.get_member(user.id)

        if user == inter.author:
            error_text = "**B·∫°n kh√¥ng th·ªÉ t·ª± th√™m v√†o danh s√°ch c·ªßa DJ.**"
        elif user.guild_permissions.manage_channels:
            error_text = f"B·∫°n kh√¥ng th·ªÉ th√™m th√†nh vi√™n {user.mention} Trong danh s√°ch DJ (anh ·∫•y / c√¥ ·∫•y c√≥ quy·ªÅn qu·∫£n l√Ω c√°c k√™nh **)."
        elif user.id == player.player_creator:
            error_text = f"**C√°c th√†nh vi√™n {user.mention} l√† ng∆∞·ªùi t·∫°o ra ng∆∞·ªùi ch∆°i ...**"
        elif user.id in player.dj:
            error_text = f"**C√°c th√†nh vi√™n {user.mention} ƒë√£ n·∫±m trong danh s√°ch c·ªßa DJ**"

        if error_text:
            raise GenericError(error_text)

        player.dj.add(user.id)

        text = [f"th√™m {user.mention} v√†o danh s√°ch DJ.",
                f"üéß **‚†Ç{inter.author.mention} ƒë√£ th√™m {user.mention} V√†o danh s√°ch DJ**"]

        if (player.static and channel == player.text_channel) or isinstance(inter.application_command,
                                                                            commands.InvokableApplicationCommand):
            await inter.send(f"{user.mention} ƒê√£ th√™m v√†o danh s√°ch c·ªßa DJ!{player.controller_link}")

        await self.interaction_message(inter, txt=text, emoji="üéß")

    @is_dj()
    @has_player()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}H·ªßy b·ªè m·ªôt th√†nh vi√™n kh·ªèi danh s√°ch c·ªßa DJ t·∫°i phi√™n ng∆∞·ªùi ch∆°i hi·ªán t·∫°i.",
        extras={"only_voiced": True}
    )
    async def remove_dj(
            self,
            inter: disnake.AppCmdInter, *,
            user: disnake.User = commands.Param(name="membro", description="Th√†nh vi√™n ƒë∆∞·ª£c th√™m v√†o.")
    ):

        try:
            bot = inter.music_bot
            guild = inter.music_guild
            channel = bot.get_channel(inter.channel.id)
        except AttributeError:
            bot = inter.bot
            guild = inter.guild
            channel = inter.channel

        player: LavalinkPlayer = bot.music.players[guild.id]

        user = guild.get_member(user.id)

        if user.id == player.player_creator:
            if inter.author.guild_permissions.manage_guild:
                player.player_creator = None
            else:
                raise GenericError(f"**C√°c th√†nh vi√™n {user.mention} l√† ng∆∞·ªùi t·∫°o ra ng∆∞·ªùi ch∆°i.**")

        elif user.id not in player.dj:
            GenericError(f"C√°c th√†nh vi√™n {user.mention}  kh√¥ng ·ªü trong danh s√°ch DJ's")

        else:
            player.dj.remove(user.id)

        text = [f"LO·∫†I B·ªé {user.mention} kh·ªèi danh s√°ch DJ's.",
                f"üéß **‚†Ç{inter.author.mention} LO·∫†I B·ªé {user.mention} kh·ªèi danh s√°ch DJ's.**"]

        if (player.static and channel == player.text_channel) or isinstance(inter.application_command,
                                                                            commands.InvokableApplicationCommand):
            await inter.send(f"{user.mention} ƒê∆∞·ª£c th√™m v√†o danh s√°ch c·ªßa DJ's!{player.controller_link}")

        await self.interaction_message(inter, txt=text, emoji="üéß")

    @is_dj()
    @has_player()
    @check_voice()
    @pool_command(name="stop", aliases=["leave", "parar"], only_voiced=True,
                  description="D·ª´ng ng∆∞·ªùi ch∆°i v√† ng·∫Øt k·∫øt n·ªëi t√¥i kh·ªèi k√™nh gi·ªçng n√≥i.")
    async def stop_legacy(self, ctx: CustomContext):
        await self.stop.callback(self=self, inter=ctx)

    @is_dj()
    @has_player()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}D·ª´ng ng∆∞·ªùi ch∆°i v√† ng·∫Øt k·∫øt n·ªëi t√¥i kh·ªèi k√™nh gi·ªçng n√≥i.",
        extras={"only_voiced": True}
    )
    async def stop(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
            inter_destroy = inter if bot.user.id == self.bot.user.id else None
            guild = inter.music_guild
        except AttributeError:
            bot = inter.bot
            inter_destroy = inter
            guild = inter.guild

        player: LavalinkPlayer = bot.music.players[inter.guild_id]
        player.command_log = f"{inter.author.mention} **ƒë√£ d·ª´ng ng∆∞·ªùi ch∆°i!**"

        if isinstance(inter, disnake.MessageInteraction):
            await player.destroy(inter=inter_destroy)
        else:

            embed = disnake.Embed(
                color=self.bot.get_color(guild.me),
                description=f"üõë **‚†Ç{inter.author.mention} ƒë√£ d·ª´ng ng∆∞·ªùi ch∆°i.**"
            )

            try:
                if bot.user.id != self.bot.user.id:
                    embed.set_footer(text=f"S·ª≠ d·ª•ng {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
            except AttributeError:
                pass

            await inter.send(
                embed=embed,
                components=[
                    disnake.ui.Button(label="Y√™u c·∫ßu m·ªôt b√†i h√°t", emoji="üé∂", custom_id=PlayerControls.add_song),
                    disnake.ui.Button(label="Y√™u th√≠ch/t√≠ch h·ª£p", emoji="‚≠ê", custom_id=PlayerControls.enqueue_fav)
                ] if inter.guild else [],
                ephemeral=player.static and player.text_channel.id == inter.channel_id
            )
            await player.destroy()

    @has_player()
    @check_voice()
    @commands.slash_command(name="queue", extras={"only_voiced": True})
    async def q(self, inter):
        pass

    @is_dj()
    @has_player()
    @check_voice()
    @pool_command(name="shuffle", aliases=["sf", "shf", "sff", "misturar"], only_voiced=True,
                  description="Tr·ªôn nh·∫°c trong h√†ng ƒë·ª£i", cooldown=queue_manipulation_cd, max_concurrency=remove_mc)
    async def shuffle_legacy(self, ctx: CustomContext):
        await self.shuffle_.callback(self, inter=ctx)

    @is_dj()
    @q.sub_command(
        name="shuffle",
        description=f"{desc_prefix}Tr·ªôn nh·∫°c trong h√†ng ƒë·ª£i",
        extras={"only_voiced": True}, cooldown=queue_manipulation_cd, max_concurrency=remove_mc)
    async def shuffle_(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if len(player.queue) < 3:
            raise GenericError("**D√≤ng ph·∫£i c√≥ √≠t nh·∫•t 3 b√†i h√°t ƒë·ªÉ ƒë∆∞·ª£c tr·ªôn l·∫´n.**")

        shuffle(player.queue)

        await self.interaction_message(
            inter,
            ["Tr·ªôn c√°c b√†i h√°t t·ª´ d√≤ng.",
             f"üîÄ **‚†Ç{inter.author.mention} Tr·ªôn c√°c b√†i h√°t t·ª´ d√≤ng.**"],
            emoji="üîÄ"
        )

    @is_dj()
    @has_player()
    @check_voice()
    @pool_command(name="reverse", aliases=["invert", "inverter", "rv"], only_voiced=True,
                  description="ƒê·∫£o ng∆∞·ª£c th·ª© t·ª± c·ªßa c√°c b√†i h√°t trong h√†ng", cooldown=queue_manipulation_cd, max_concurrency=remove_mc)
    async def reverse_legacy(self, ctx: CustomContext):
        await self.reverse.callback(self=self, inter=ctx)

    @is_dj()
    @q.sub_command(
        description=f"{desc_prefix}ƒê·∫£o ng∆∞·ª£c th·ª© t·ª± c·ªßa c√°c b√†i h√°t trong h√†ng",
        extras={"only_voiced": True}, cooldown=queue_manipulation_cd, max_concurrency=remove_mc
    )
    async def reverse(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if len(player.queue) < 2:
            raise GenericError("**D√≤ng ph·∫£i c√≥ √≠t nh·∫•t 2 b√†i h√°t ƒë·ªÉ ƒë·∫£o ng∆∞·ª£c th·ª© t·ª±.**")

        player.queue.reverse()
        await self.interaction_message(
            inter,
            txt=["ƒê·∫£o ng∆∞·ª£c th·ª© t·ª± c·ªßa c√°c b√†i h√°t trong h√†ng.",
                 f"üîÑ **‚†Ç{inter.author.mention} Anh ·∫•y ƒë√£ ƒë·∫£o ng∆∞·ª£c th·ª© t·ª± c·ªßa c√°c b√†i h√°t trong h√†ng.**"],
            emoji="üîÑ"
        )

    queue_show_mc = commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    @check_voice()
    @has_player()
    @check_voice()
    @pool_command(name="queue", aliases=["q", "fila"], description="Hi·ªÉn th·ªã c√°c b√†i h√°t ph√π h·ª£p.",
                  only_voiced=True, max_concurrency=queue_show_mc)
    async def queue_show_legacy(self, ctx: CustomContext):
        await self.display.callback(self=self, inter=ctx)

    @commands.max_concurrency(1, commands.BucketType.member)
    @q.sub_command(
        description=f"{desc_prefix}Hi·ªÉn th·ªã c√°c b√†i h√°t ph√π h·ª£p.", max_concurrency=queue_show_mc
    )
    async def display(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if not player.queue:
            raise GenericError("**Kh√¥ng c√≥ b√†i h√°t trong d√≤ng.**")

        view = QueueInteraction(player, inter.author)
        embed = view.embed

        try:
            if bot.user.id != self.bot.user.id:
                embed.set_footer(text=f"S·ª≠ d·ª•ng {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
        except AttributeError:
            pass

        await inter.response.defer(ephemeral=True)

        kwargs = {
            "embed": embed,
            "view": view
        }

        try:
            func = inter.followup.send
            kwargs["ephemeral"] = True
        except AttributeError:
            try:
                func = inter.edit_original_message
            except AttributeError:
                func = inter.send
                kwargs["ephemeral"] = True

        view.message = await func(**kwargs)

        await view.wait()

    clear_flags = CommandArgparse()
    clear_flags.add_argument('song_name', nargs='*', help="Bao g·ªìm t√™n b·∫°n c√≥ trong √¢m nh·∫°c.")
    clear_flags.add_argument('-uploader', '-author', '-artist', nargs = '+', default="",
                             help="Bao g·ªìm m·ªôt c√°i t√™n b·∫°n c√≥ trong t√°c gi·∫£ √¢m nh·∫°c.")
    clear_flags.add_argument('-member', '-user', '-u', nargs='+', default="",
                             help="Bao g·ªìm √¢m nh·∫°c ƒë∆∞·ª£c y√™u c·∫ßu b·ªüi ng∆∞·ªùi d√πng ƒë√£ ch·ªçn.")
    clear_flags.add_argument('-duplicates', '-dupes', '-duplicate', action='store_true',
                             help="Bao g·ªìm c√°c b√†i h√°t tr√πng l·∫∑p.")
    clear_flags.add_argument('-playlist', '-list', '-pl', nargs='+', default="",
                             help="Bao g·ªìm t√™n b·∫°n c√≥ tr√™n danh s√°ch ph√°t.")
    clear_flags.add_argument('-minimal_time', '-mintime', '-min','-min_duration', '-minduration',  default=None,
                             help="Bao g·ªìm c√°c b√†i h√°t c√≥ th·ªùi l∆∞·ª£ng t·ªëi thi·ªÉu ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh (v√≠ d·ª• 1:23).")
    clear_flags.add_argument('-max_time', '-maxtime', '-max', '-max_duration', '-maxduration', default=None,
                             help="Bao g·ªìm c√°c b√†i h√°t d√≤ng t·ª´ m·ªôt v·ªã tr√≠ d√≤ng c·ª• th·ªÉ.")
    clear_flags.add_argument('-start_position', '-startpos', '-start', type=int, default=None,
                             help="Bao g·ªìm c√°c b√†i h√°t d√≤ng t·ª´ m·ªôt v·ªã tr√≠ d√≤ng c·ª• th·ªÉ.")
    clear_flags.add_argument('-end_position', '-endpos', '-end', type=int, default=None,
                             help="Bao g·ªìm c√°c b√†i h√°t d√≤ng v√†o m·ªôt v·ªã tr√≠ d√≤ng c·ª• th·ªÉ.")
    clear_flags.add_argument('-absent', '-absentmembers', '-abs', action='store_true',
                             help="Bao g·ªìm c√°c b√†i h√°t ƒë∆∞·ª£c th√™m v√†o c·ªßa c√°c th√†nh vi√™n ngo√†i k√™nh")

    @is_dj()
    @has_player()
    @check_voice()
    @pool_command(name="clear", aliases=["limpar"], description="L√†m s·∫°ch d√≤ng nh·∫°c.", only_voiced=True,
                  cooldown=queue_manipulation_cd, max_concurrency=remove_mc)
    async def clear_legacy(self, ctx: CustomContext, *, flags: str = ""):

        args, unknown = self.clear_flags.parse_known_args(flags.split())

        await self.clear.callback(
            self=self, inter=ctx,
            song_name=" ".join(args.song_name + unknown),
            song_author=" ".join(args.uploader),
            user=await commands.MemberConverter().convert(ctx, " ".join(args.member)) if args.member else None,
            duplicates=args.duplicates,
            playlist=" ".join(args.playlist),
            min_duration=args.minimal_time,
            max_duration=args.max_time,
            range_start=args.start_position,
            range_end=args.end_position,
            absent_members=args.absent
        )

    @is_dj()
    @has_player()
    @check_voice()
    @commands.slash_command(
        name="clear_queue",
        description=f"{desc_prefix}L√†m s·∫°ch h√†ng ƒë·ª£i.",
        extras={"only_voiced": True}, cooldown=queue_manipulation_cd, max_concurrency=remove_mc
    )
    async def clear(
            self,
            inter: disnake.AppCmdInter,
            song_name: str = commands.Param(name="nome_da_m√∫sica", description="incluir nome que tiver na m√∫sica.",
                                            default=None),
            song_author: str = commands.Param(name="nome_do_autor",
                                              description="Incluir nome que tiver no autor da m√∫sica.", default=None),
            user: disnake.Member = commands.Param(name='usu√°rio',
                                                  description="Incluir m√∫sicas pedidas pelo usu√°rio selecionado.",
                                                  default=None),
            duplicates: bool = commands.Param(name="duplicados", description="Incluir m√∫sicas duplicadas",
                                              default=False),
            playlist: str = commands.Param(description="Incluir nome que tiver na playlist.", default=None),
            min_duration: str = commands.Param(name="dura√ß√£o_inicial",
                                               description="incluir m√∫sicas com dura√ß√£o acima/igual (ex. 1:23).",
                                               default=None),
            max_duration: str = commands.Param(name="dura√ß√£o_m√°xima",
                                               description="incluir m√∫sicas com dura√ß√£o m√°xima especificada (ex. 1:45).",
                                               default=None),
            range_start: int = commands.Param(name="posi√ß√£o_inicial",
                                              description="incluir m√∫sicas da fila a partir de uma posi√ß√£o espec√≠fica "
                                                          "da fila.",
                                              min_value=1.0, max_value=500.0, default=None),
            range_end: int = commands.Param(name="posi√ß√£o_final",
                                            description="incluir m√∫sicas da fila at√© uma posi√ß√£o espec√≠fica da fila.",
                                            min_value=1.0, max_value=500.0, default=None),
            absent_members: bool = commands.Param(name="membros_ausentes",
                                                  description="Incluir m√∫sicas adicionads por membros fora do canal",
                                                  default=False)
    ):

        if min_duration and max_duration:
            raise GenericError(
                "B·∫°n ch·ªâ n√™n ch·ªçn m·ªôt trong c√°c t√πy ch·ªçn: ** Th·ªùi l∆∞·ª£ng_abaixa_de ** ho·∫∑c ** Th·ªùi l∆∞·ª£ng_acima_de**.")

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if not player.queue:
            raise GenericError("**Kh√¥ng c√≥ b√†i h√°t trong h√†ng.**")

        filters = []
        final_filters = set()

        txt = []
        playlist_hyperlink = set()

        if song_name:
            filters.append('song_name')
        if song_author:
            filters.append('song_author')
        if user:
            filters.append('user')
        if playlist:
            filters.append('playlist')
        if min_duration:
            filters.append('time_below')
            min_duration = string_to_seconds(min_duration) * 1000
        if max_duration:
            filters.append('time_above')
            max_duration = string_to_seconds(max_duration) * 1000
        if absent_members:
            filters.append('absent_members')
        if duplicates:
            filters.append('duplicates')

        if not filters and not range_start and not range_end:
            player.queue.clear()
            txt = ['x√≥a d√≤ng nh·∫°c.', f'‚ôªÔ∏è **‚†Ç{inter.author.mention} L√†m s·∫°ch d√≤ng nh·∫°c.**']

        else:

            if range_start and range_end:

                if range_start >= range_end:
                    raise GenericError("**V·ªã tr√≠ cu·ªëi c√πng ph·∫£i l·ªõn h∆°n v·ªã tr√≠ b·∫Øt ƒë·∫ßu!**")

                song_list = list(player.queue)[range_start - 1: range_end - 1]
                txt.append(f"**V·ªã tr√≠ h√†ng ƒë·ª£i ban ƒë·∫ßu:** `{range_start}`\n"
                           f"**V·ªã tr√≠ d√≤ng cu·ªëi c√πng:** `{range_end}`")

            elif range_start:
                song_list = list(player.queue)[range_start - 1:]
                txt.append(f"**V·ªã tr√≠ h√†ng ƒë·ª£i ban ƒë·∫ßu:** `{range_start}`")
            elif range_end:
                song_list = list(player.queue)[:range_end - 1]
                txt.append(f"**V·ªã tr√≠ d√≤ng cu·ªëi c√πng:** `{range_end}`")
            else:
                song_list = list(player.queue)

            deleted_tracks = 0

            duplicated_titles = set()

            for t in song_list:

                temp_filter = list(filters)

                if 'duplicates' in temp_filter:
                    if (title:=f"{t.author} - {t.title}".lower()) in duplicated_titles:
                        temp_filter.remove('duplicates')
                        final_filters.add('duplicates')
                    else:
                        duplicated_titles.add(title)

                if 'time_below' in temp_filter and t.duration >= min_duration:
                    temp_filter.remove('time_below')
                    final_filters.add('time_below')

                elif 'time_above' in temp_filter and t.duration <= max_duration:
                    temp_filter.remove('time_above')
                    final_filters.add('time_above')

                if 'song_name' in temp_filter and song_name.lower() in t.title.lower():
                    temp_filter.remove('song_name')
                    final_filters.add('song_name')

                if 'song_author' in temp_filter and song_author.lower() in t.author.lower():
                    temp_filter.remove('song_author')
                    final_filters.add('song_author')

                if 'user' in temp_filter and user.id == t.requester:
                    temp_filter.remove('user')
                    final_filters.add('user')

                elif 'absent_members' in temp_filter and t.requester not in player.guild.me.voice.channel.voice_states:
                    temp_filter.remove('absent_members')
                    final_filters.add('absent_members')

                if 'playlist' in temp_filter:
                    if playlist == t.playlist_name:
                        playlist_hyperlink.add(f"[`{fix_characters(t.playlist_name)}`]({t.playlist_urrl})")
                        temp_filter.remove('playlist')
                        final_filters.add('playlist')
                    elif isinstance(inter, CustomContext) and playlist.lower() in t.playlist_name.lower():
                        playlist = t.playlist_name
                        playlist_hyperlink.add(f"[`{fix_characters(t.playlist_name)}`]({t.playlist_urrl})")
                        temp_filter.remove('playlist')
                        final_filters.add('playlist')

                if not temp_filter:
                    player.queue.remove(t)
                    deleted_tracks += 1

            duplicated_titles.clear()

            if not deleted_tracks:
                await inter.send("Kh√¥ng t√¨m th·∫•y b√†i h√°t!", ephemeral=True)
                return

            try:
                final_filters.remove("song_name")
                txt.append(f"**Bao g·ªìm t√™n:** `{fix_characters(song_name)}`")
            except:
                pass

            try:
                final_filters.remove("song_author")
                txt.append(f"**Bao g·ªìm t√™n trong tr√¨nh t·∫£i l√™n/ngh·ªá sƒ©:** `{fix_characters(song_author)}`")
            except:
                pass

            try:
                final_filters.remove("user")
                txt.append(f"**pedidoPelC√°cTh√†nhVi√™n:** {user.mention}")
            except:
                pass

            try:
                final_filters.remove("playlist")
                txt.append(f"**Playlist:** `{fix_characters(playlist)}`")
            except:
                pass

            try:
                final_filters.remove("time_below")
                txt.append(f"**V·ªõi th·ªùi l∆∞·ª£ng ban ƒë·∫ßu/b·∫±ng nhau:** `{time_format(min_duration)}`")
            except:
                pass

            try:
                final_filters.remove("time_above")
                txt.append(f"**V·ªõi th·ªùi l∆∞·ª£ng t·ªëi ƒëa:** `{time_format(max_duration)}`")
            except:
                pass

            try:
                final_filters.remove("duplicates")
                txt.append(f"**B√†i h√°t tr√πng l·∫∑p**")
            except:
                pass

            try:
                final_filters.remove("absent_members")
                txt.append("`C√°c b√†i h√°t ƒë∆∞·ª£c y√™u c·∫ßu b·ªüi c√°c th√†nh vi√™n r·ªùi kh·ªèi k√™nh.`")
            except:
                pass

            txt = [f"LO·∫†I B·ªé {deleted_tracks} c√°c b√†i h√°t th√¥ng qua clear.",
                   f"‚ôªÔ∏è **‚†Ç{inter.author.mention} LO·∫†I B·ªé {deleted_tracks} C√°c b√†i h√°t t·ª´ d√≤ng s·ª≠ d·ª•ng c√°c b√†i h√°t sau "
                   f"b·ªô l·ªçc:**\n\n" + '\n'.join(txt)]

        await self.interaction_message(inter, txt, emoji="‚ôªÔ∏è")

    @clear.autocomplete("playlist")
    async def queue_playlist(self, inter: disnake.Interaction, query: str):

        try:
            if not inter.author.voice:
                return
        except:
            pass

        try:
            await check_pool_bots(inter, only_voiced=True)
            bot = inter.music_bot
        except:
            traceback.print_exc()
            return

        try:
            player = bot.music.players[inter.guild_id]
        except KeyError:
            return

        return list(set([track.playlist_name for track in player.queue if track.playlist_name and
                         query.lower() in track.playlist_name.lower()]))[:20]

    @clear.autocomplete("nome_do_autor")
    async def queue_author(self, inter: disnake.Interaction, query: str):

        if not query:
            return

        try:
            await check_pool_bots(inter, only_voiced=True)
            bot = inter.music_bot
        except:
            return

        if not inter.author.voice:
            return

        try:
            player = bot.music.players[inter.guild_id]
        except KeyError:
            return

        return list(set([track.author for track in player.queue if query.lower() in track.author.lower()]))[:20]

    restrict_cd = commands.CooldownMapping.from_cooldown(2, 7, commands.BucketType.member)
    restrict_mc =commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    @is_dj()
    @has_player()
    @check_voice()
    @pool_command(name="restrict", aliases=["rstc", "restrito"], only_voiced=True, cooldown=restrict_cd, max_concurrency=restrict_mc,
                  description="K√≠ch ho·∫°t/V√¥ hi·ªáu h√≥a ch·∫ø ƒë·ªô l·ªánh h·∫°n ch·∫ø y√™u c·∫ßu DJ/nh√¢n vi√™n.")
    async def restrict_mode_legacy(self, ctx: CustomContext):

        await self.restrict_mode.callback(self=self, inter=ctx)

    @is_dj()
    @has_player()
    @check_voice()
    @commands.slash_command(
        description=f"{desc_prefix}K√≠ch ho·∫°t/V√¥ hi·ªáu h√≥a ch·∫ø ƒë·ªô l·ªánh h·∫°n ch·∫ø c·ªßa c√°c l·ªánh y√™u c·∫ßu DJ/nh√¢n vi√™n.",
        extras={"only_voiced": True}, cooldown=restrict_cd, max_concurrency=restrict_mc)
    async def restrict_mode(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        player.restrict_mode = not player.restrict_mode

        msg = ["k√≠ch ho·∫°t", "üîê"] if player.restrict_mode else ["v√¥ hi·ªáu h√≥a", "üîì"]

        text = [
            f"{msg[0]} Ch·∫ø ƒë·ªô h·∫°n ch·∫ø c·ªßa c√°c l·ªánh ng∆∞·ªùi ch∆°i (y√™u c·∫ßu DJ/nh√¢n vi√™n).",
            f"{msg[1]} **‚†Ç{inter.author.mention} {msg[0]} Ch·∫ø ƒë·ªô h·∫°n ch·∫ø c·ªßa c√°c l·ªánh ng∆∞·ªùi ch∆°i (y√™u c·∫ßu DJ/nh√¢n vi√™n).**"
        ]

        await self.interaction_message(inter, text, emoji=msg[1])

    nonstop_cd = commands.CooldownMapping.from_cooldown(2, 15, commands.BucketType.member)
    nonstop_mc =commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    @has_player()
    @check_voice()
    @commands.has_guild_permissions(manage_guild=True)
    @pool_command(name="247", aliases=["nonstop"], only_voiced=True, cooldown=nonstop_cd, max_concurrency=nonstop_mc,
                  description="K√≠ch ho·∫°t/T·∫Øt ch·∫ø ƒë·ªô 24/7 c·ªßa tr√¨nh ph√°t (trong c√°c th·ª≠ nghi·ªám).")
    async def nonstop_legacy(self, ctx: CustomContext):
        await self.nonstop.callback(self=self, inter=ctx)

    @has_player()
    @check_voice()
    @commands.slash_command(
        name="247",
        description=f"{desc_prefix}K√≠ch ho·∫°t/V√¥ hi·ªáu h√≥a Ch·∫ø ƒë·ªô 24/7 c·ªßa tr√¨nh ph√°t (trong c√°c th·ª≠ nghi·ªám).",
        default_member_permissions=disnake.Permissions(manage_guild=True),
        extras={"only_voiced": True}, cooldown=nonstop_cd, max_concurrency=nonstop_mc
    )
    async def nonstop(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        player.keep_connected = not player.keep_connected

        msg = ["k√≠ch ho·∫°t", "‚ôæÔ∏è"] if player.keep_connected else ["v√¥ hi·ªáu h√≥a", "‚ùå"]

        text = [
            f"{msg[0]} Ch·∫ø ƒë·ªô tr√¨nh ph√°t 24/7 (c√†i ƒë·∫∑t).",
            f"{msg[1]} **‚†Ç{inter.author.mention} {msg[0]} Ch·∫ø ƒë·ªô 24/7 (c√†i ƒë·∫∑t) c·ªßa ng∆∞·ªùi ch∆°i.**"
        ]

        if not len(player.queue):
            player.queue.extend(player.played)
            player.played.clear()

        await player.process_save_queue()

        if player.current:
            await self.interaction_message(inter, txt=text, emoji=msg[1])
            return

        await self.interaction_message(inter, text)

        await player.process_next()

    autoplay_cd = commands.CooldownMapping.from_cooldown(2, 15, commands.BucketType.member)
    autoplay_mc = commands.MaxConcurrency(1, per=commands.BucketType.member, wait=False)

    @has_player()
    @check_voice()
    @pool_command(name="autoplay", aliases=["ap", "aplay"], only_voiced=True, cooldown=autoplay_cd, max_concurrency=autoplay_mc,
                  description="K√≠ch ho·∫°t/t·∫Øt ph√°t l·∫°i t·ª± ƒë·ªông b·∫±ng c√°ch ho√†n th√†nh c√°c d√≤ng trong h√†ng ƒë·ª£i.")
    async def autoplay_legacy(self, ctx: CustomContext):
        await self.autoplay.callback(self=self, inter=ctx)

    @has_player()
    @check_voice()
    @commands.slash_command(
        name="autoplay",
        description=f"{desc_prefix}K√≠ch ho·∫°t/t·∫Øt ph√°t l·∫°i t·ª± ƒë·ªông b·∫±ng c√°ch ho√†n th√†nh c√°c d√≤ng trong h√†ng ƒë·ª£i.",
        extras={"only_voiced": True}, cooldown=autoplay_cd, max_concurrency=autoplay_mc
    )
    async def autoplay(self, inter: disnake.AppCmdInter):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        player.autoplay = not player.autoplay

        msg = ["k√≠ch ho·∫°t", "üîÑ"] if player.autoplay else ["v√¥ hi·ªáu h√≥a", "‚ùå"]

        text = [f"{msg[0]}  T·ª± ƒë·ªông ph√°t.", f"{msg[1]} **‚†Ç{inter.author.mention} {msg[0]}  T·ª± ƒë·ªông ph√°t.**"]

        if player.current:
            await self.interaction_message(inter, txt=text, emoji=msg[1])
            return

        await self.interaction_message(inter, text)

        await player.process_next()

    @check_voice()
    @has_player()
    @is_dj()
    @commands.cooldown(1, 10, commands.BucketType.guild)
    @commands.slash_command(
        description=f"{desc_prefix}Di chuy·ªÉn ng∆∞·ªùi ch∆°i sang m·ªôt m√°y ch·ªß √¢m nh·∫°c kh√°c."
    )
    async def change_node(
            self,
            inter: disnake.AppCmdInter,
            node: str = commands.Param(name="server", description="M√°y ch·ªß √¢m nh·∫°c")
    ):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        if node not in bot.music.nodes:
            raise GenericError(f"M√°y ch·ªß √¢m nh·∫°c **{node}** kh√¥ng t√¨m th·∫•y.")

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        if node == player.node.identifier:
            raise GenericError(f"Ng∆∞·ªùi ch∆°i ƒë√£ ·ªü tr√™n m√°y ch·ªß √¢m nh·∫°c **{node}**.")

        await player.change_node(node)

        await self.interaction_message(
            inter,
            [f"Di chuy·ªÉn tr√¨nh ph√°t sang m√°y ch·ªß √¢m nh·∫°c **{node}**",
             f"**Ng∆∞·ªùi ch∆°i ƒë√£ ƒë∆∞·ª£c di chuy·ªÉn ƒë·∫øn m√°y ch·ªß √¢m nh·∫°c:** `{node}`"],
            emoji="üåé"
        )

    @search.autocomplete("server")
    @play.autocomplete("server")
    @change_node.autocomplete("server")
    async def node_suggestions(self, inter: disnake.Interaction, query: str):

        try:
            await check_pool_bots(inter)
            bot = inter.music_bot
        except GenericError:
            return
        except:
            bot = inter.bot

        try:
            node = bot.music.players[inter.guild_id].node
        except KeyError:
            node = None

        if not query:
            return [n.identifier for n in bot.music.nodes.values() if
                    n != node and n.available and n.is_available]

        return [n.identifier for n in bot.music.nodes.values() if n != node
                and query.lower() in n.identifier.lower() and n.available and n.is_available]

    @commands.command(aliases=["puptime"], description="Xem th√¥ng tin th·ªùi gian m√† ng∆∞·ªùi ch∆°i ƒëang ho·∫°t ƒë·ªông tr√™n m√°y ch·ªß.")
    @commands.cooldown(1, 5, commands.BucketType.guild)
    async def playeruptime(self, ctx: CustomContext):

        uptime_info = []
        for bot in self.bot.pool.bots:
            try:
                player = bot.music.players[ctx.guild.id]
                uptime_info.append(f"**Bot:** {bot.user.mention}\n"
                            f"**Uptime:** <t:{player.uptime}:R>\n"
                            f"**K√™nh:** {player.guild.me.voice.channel.mention}")
            except KeyError:
                continue

        if not uptime_info:
            raise GenericError("**Kh√¥ng c√≥ ng∆∞·ªùi ch∆°i t√≠ch c·ª±c tr√™n m√°y ch·ªß.**")

        await ctx.reply(
            embed=disnake.Embed(
                title="**Player Uptime:**",
                description="\n-----\n".join(uptime_info),
                color=self.bot.get_color(ctx.guild.me)
            )
        )

    @commands.Cog.listener("on_message_delete")
    async def player_message_delete(self, message: disnake.Message):

        if not message.guild:
            return

        try:

            player: LavalinkPlayer = self.bot.music.players[message.guild.id]

            if message.id != player.message.id:
                return

        except (AttributeError, KeyError):
            return

        thread = self.bot.get_channel(message.id)

        if not thread:
            return

        player.message = None
        await thread.edit(archived=True, locked=True, name=f"arquivado: {thread.name}")

    @commands.Cog.listener('on_ready')
    async def resume_players_ready(self):

        for guild_id in list(self.bot.music.players):

            try:

                player: LavalinkPlayer = self.bot.music.players[guild_id]

                try:
                    vc = player.guild.me.voice.channel
                except AttributeError:
                    vc = player.last_channel

                try:
                    player.guild.voice_client.cleanup()
                except:
                    pass

                await player.connect(vc.id)

                if not player.is_paused and not player.is_playing:
                    await player.process_next()
                print(f"{self.bot.user} - {player.guild.name} [{guild_id}] - Ng∆∞·ªùi ch∆°i k·∫øt n·ªëi l·∫°i kh√¥ng c√≥ k√™nh gi·ªçng n√≥i")
            except:
                traceback.print_exc()

    async def is_request_channel(self, ctx: Union[disnake.AppCmdInter, disnake.MessageInteraction, CustomContext], *,
                                 data: dict = None, ignore_thread=False) -> bool:

        if isinstance(ctx, (CustomContext, disnake.MessageInteraction)):
            return True

        try:
            bot = ctx.music_bot
            channel_ctx = bot.get_channel(ctx.channel_id)
        except AttributeError:
            bot = ctx.bot
            channel_ctx = ctx.channel

        if not self.bot.check_bot_forum_post(channel_ctx):
            return True

        try:
            player: LavalinkPlayer = bot.music.players[ctx.guild_id]

            if not player.static:
                return False

            if isinstance(channel_ctx, disnake.Thread) and player.text_channel == channel_ctx.parent:
                return not ignore_thread

            return player.text_channel == channel_ctx

        except KeyError:

            try:
                guild_data = ctx.guild_data
            except AttributeError:
                guild_data = data or await bot.get_data(ctx.guild_id, db_name=DBModel.guilds)

            try:
                channel = bot.get_channel(int(guild_data["player_controller"]["channel"]))
            except:
                channel = None

            if not channel:
                return False

            if isinstance(channel_ctx, disnake.Thread) and channel == channel_ctx.parent:
                return not ignore_thread

            return channel.id == channel_ctx.id

    async def check_channel(
            self,
            guild_data: dict,
            inter: Union[disnake.AppCmdInter, CustomContext],
            channel: Union[disnake.TextChannel, disnake.VoiceChannel, disnake.Thread],
            guild: disnake.Guild,
            bot: BotCore
    ):

        static_player = guild_data['player_controller']

        warn_message = None

        try:
            channel_db = bot.get_channel(int(static_player['channel'])) or await bot.fetch_channel(
                int(static_player['channel']))
        except (TypeError, disnake.NotFound):
            channel_db = None
        except disnake.Forbidden:
            channel_db = bot.get_channel(inter.channel_id)
            warn_message = f"T√¥i kh√¥ng ƒë∆∞·ª£c ph√©p truy c·∫≠p k√™nh <#{static_player['channel']}>, Ng∆∞·ªùi ch∆°i s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng ·ªü ch·∫ø ƒë·ªô truy·ªÅn th·ªëng."
            static_player["channel"] = None

        if not channel_db or channel_db.guild.id != inter.guild_id:
            await self.reset_controller_db(inter.guild_id, guild_data, inter)

        else:

            if channel_db.id != channel.id:

                try:
                    if isinstance(channel_db, disnake.Thread):

                        if not channel_db.parent:
                            await self.reset_controller_db(inter.guild_id, guild_data, inter)
                            channel_db = None

                        else:

                            if (channel_db.archived or channel_db.locked) and not channel_db.parent.permissions_for(
                                    guild.me).manage_threads:
                                raise GenericError(
                                    f"**{bot.user.mention} kh√¥ng c√≥ quy·ªÅn qu·∫£n l√Ω c√°c ch·ªß ƒë·ªÅ "
                                    f"Tickook/Untit ch·ªß ƒë·ªÅ: {channel_db.mention}**")

                            await channel_db.edit(archived=False, locked=False)
                except AttributeError:
                    pass

                if channel_db:

                    channel_db_perms = channel_db.permissions_for(guild.me)

                    if not channel_db_perms.send_messages:
                        raise GenericError(
                            f"**{bot.user.mention} kh√¥ng c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn tr√™n k√™nh <#{static_player['channel']}>**\n"
                            "N·∫øu b·∫°n mu·ªën ƒë·∫∑t l·∫°i c√†i ƒë·∫∑t c·ªßa k√™nh ƒë·ªÉ ƒë·∫∑t h√†ng, h√£y s·ª≠ d·ª•ng l·ªánh /reset ho·∫∑c /setup "
                            "l·∫°i..."
                        )

                    if not channel_db_perms.embed_links:
                        raise GenericError(
                            f"**{bot.user.mention} kh√¥ng c√≥ quy·ªÅn ƒë√≠nh k√®m li√™n k·∫øt/nh√∫ng tr√™n k√™nh <#{static_player['channel']}>**\n"
                            "N·∫øu b·∫°n mu·ªën ƒë·∫∑t l·∫°i c√†i ƒë·∫∑t c·ªßa k√™nh ƒë·ªÉ ƒë·∫∑t h√†ng, h√£y s·ª≠ d·ª•ng l·ªánh /reset ho·∫∑c /setup "
                            "l·∫°i..."
                        )

        return channel_db, warn_message

    async def process_player_interaction(
            self,
            interaction: Union[disnake.MessageInteraction, disnake.ModalInteraction],
            command: Optional[disnake.AppCmdInter],
            kwargs: dict
    ):

        if not command:
            raise GenericError("L·ªánh kh√¥ng t√¨m th·∫•y/th·ª±c hi·ªán.")

        await check_cmd(command, interaction)

        await command(interaction, **kwargs)

        try:
            player: LavalinkPlayer = self.bot.music.players[interaction.guild_id]
            player.interaction_cooldown = True
            await asyncio.sleep(1)
            player.interaction_cooldown = False
            await command._max_concurrency.release(interaction)
        except (KeyError, AttributeError):
            pass

    @commands.Cog.listener("on_dropdown")
    async def guild_pin(self, interaction: disnake.MessageInteraction):

        if not self.bot.bot_ready:
            await interaction.send("AT√¥i ƒëang kh·ªüi t·∫°o...\nVui l√≤ng ƒë·ª£i l√¢u h∆°n m·ªôt ch√∫t...", ephemeral=True)
            return

        if interaction.data.custom_id != "player_guild_pin":
            return

        if not interaction.data.values:
            await interaction.response.defer()
            return

        if not interaction.user.voice:
            await interaction.send("B·∫°n ph·∫£i nh·∫≠p m·ªôt k√™nh gi·ªçng n√≥i ƒë·ªÉ s·ª≠ d·ª•ng ƒëi·ªÅu n√†y.", ephemeral=True)
            return

        try:
            guild_data = interaction.guild_data
        except AttributeError:
            guild_data = await self.bot.get_data(interaction.guild_id, db_name=DBModel.guilds)
            interaction.guild_data = guild_data

        try:
            query = guild_data["player_controller"]["fav_links"][interaction.data.values[0]]['url']
        except KeyError:
            raise GenericError("**M·ª•c ƒë√£ ch·ªçn kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong c∆° s·ªü d·ªØ li·ªáu...**")

        kwargs = {
            "query": f"> pin: {query}",
            "position": 0,
            "options": False,
            "manual_selection": True,
            "source": "ytsearch",
            "repeat_amount": 0,
            "server": None,
            "force_play": "no"
        }

        try:
            await self.play.callback(self=self, inter=interaction, **kwargs)
        except Exception as e:
            self.bot.dispatch('interaction_player_error', interaction, e)

    @commands.Cog.listener("on_dropdown")
    async def player_dropdown_event(self, interaction: disnake.MessageInteraction):

        if not interaction.data.custom_id.startswith("musicplayer_dropdown_"):
            return

        if not interaction.values:
            await interaction.response.defer()
            return

        await self.player_controller(interaction, interaction.values[0])

    @commands.Cog.listener("on_button_click")
    async def player_button_event(self, interaction: disnake.MessageInteraction):

        if not interaction.data.custom_id.startswith("musicplayer_"):
            return

        await self.player_controller(interaction, interaction.data.custom_id)

    async def player_controller(self, interaction: disnake.MessageInteraction, control: str):

        if not self.bot.bot_ready:
            await interaction.send("T√¥i v·∫´n b·∫Øt ƒë·∫ßu...", ephemeral=True)
            return

        if not interaction.guild:
            await interaction.response.edit_message(components=None)
            return

        kwargs = {}

        cmd: Optional[disnake.AppCmdInter] = None

        try:

            if control == "musicplayer_request_channel":
                cmd = self.bot.get_slash_command("setup")
                kwargs = {"target": interaction.channel}
                await self.process_player_interaction(interaction, cmd, kwargs)
                return

            if control == PlayerControls.fav_manageer:

                if str(interaction.user.id) not in interaction.message.content:
                    await interaction.send("B·∫°n kh√¥ng th·ªÉ t∆∞∆°ng t√°c ·ªü ƒë√¢y!", ephemeral=True)
                    return

                cmd = self.bot.get_slash_command("fav").children.get("manager")
                await self.process_player_interaction(interaction, cmd, kwargs)
                return

            if control == PlayerControls.integration_manageer:

                if str(interaction.user.id) not in interaction.message.content:
                    await interaction.send("B·∫°n kh√¥ng th·ªÉ t∆∞∆°ng t√°c ·ªü ƒë√¢y!", ephemeral=True)
                    return

                cmd = self.bot.get_slash_command("integration").children.get("manager") 
                await self.process_player_interaction(interaction, cmd, kwargs)
                return

            if control == PlayerControls.add_song:

                if not interaction.user.voice:
                    raise GenericError("**B·∫°n ph·∫£i v√†o m·ªôt k√™nh tho·∫°i ƒë·ªÉ s·ª≠ d·ª•ng n√∫t n√†y.**")

                await interaction.response.send_modal(
                    title="Y√™u c·∫ßu m·ªôt b√†i h√°t",
                    custom_id="modal_add_song",
                    components=[
                        disnake.ui.TextInput(
                            style=disnake.TextInputStyle.short,
                            label="T√™n/li√™n k·∫øt √¢m nh·∫°c.",
                            placeholder="T√™n ho·∫∑c li√™n k·∫øt YouTube/Spotify/SoundCloud, v.v.",
                            custom_id="song_input",
                            max_length=150,
                            required=True
                        ),
                        disnake.ui.TextInput(
                            style=disnake.TextInputStyle.short,
                            label="V·ªã tr√≠ b√†i h√°t s·∫Ω ƒë∆∞·ª£c th√™m v√†o.",
                            placeholder="T√πy ch·ªçn, n·∫øu kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng s·∫Ω ƒë∆∞·ª£c th√™m v√†o cu·ªëi.",
                            custom_id="song_position",
                            max_length=3,
                            required=False
                        ),
                    ]
                )

                return

            if control == PlayerControls.enqueue_fav:

                kwargs = {
                    "query": "",
                    "position": 0,
                    "options": False,
                    "manual_selection": True,
                    "source": "ytsearch",
                    "repeat_amount": 0,
                    "server": None,
                    "force_play": "no"
                }

                cmd = self.bot.get_slash_command("play")

            else:

                try:
                    player: LavalinkPlayer = self.bot.music.players[interaction.guild_id]
                except KeyError:
                    await interaction.send("Kh√¥ng c√≥ tr√¨nh ph√°t ƒëang ho·∫°t ƒë·ªông tr√™n m√°y ch·ªß...", ephemeral=True)
                    await send_idle_embed(interaction.message, bot=self.bot)
                    return

                if interaction.message != player.message:
                    return

                if player.interaction_cooldown:
                    raise GenericError("Thao t√°c qu√° nhanh, h√£y thao t√°c l·∫°i")

                try:
                    vc = player.guild.me.voice.channel
                except AttributeError:
                    self.bot.loop.create_task(player.destroy(force=True))
                    return

                if control == PlayerControls.help_button:
                    embed = disnake.Embed(
                        description="üìò **Th√¥ng tin n√∫t** üìò\n\n"
                                    "‚èØÔ∏è `= T·∫°m d·ª´ng/tr·∫£ l·∫°i √¢m nh·∫°c.`\n"
                                    "‚èÆÔ∏è `= Tr·ªü l·∫°i v·ªõi √¢m nh·∫°c ƒë∆∞·ª£c ph√°t tr∆∞·ªõc ƒë√≥.`\n"
                                    "‚è≠Ô∏è `= Nh·∫£y sang b√†i h√°t ti·∫øp theo.`\n"
                                    "üîÄ `=Tr·ªôn √¢m nh·∫°c trong d√≤ng.`\n"
                                    "üé∂ `= Th√™m nh·∫°c/danh s√°ch ph√°t/y√™u th√≠ch.`\n"
                                    "‚èπÔ∏è `= D·ª´ng ng∆∞·ªùi ch∆°i v√† ng·∫Øt k·∫øt n·ªëi t√¥i kh·ªèi k√™nh.`\n"
                                    "üìë `= Hi·ªÉn th·ªã d√≤ng nh·∫°c.`\n"
                                    "üõ†Ô∏è `= Thay ƒë·ªïi m·ªôt s·ªë c√†i ƒë·∫∑t ng∆∞·ªùi ch∆°i:`\n"
                                    "`√Çm l∆∞·ª£ng / Hi·ªáu ·ª©ng Nightcore / s·ª± l·∫∑p l·∫°i / ch·∫ø ƒë·ªô b·ªã h·∫°n ch·∫ø.`\n",
                        color=self.bot.get_color(interaction.guild.me)
                    )

                    await interaction.response.send_message(embed=embed, ephemeral=True)    
                    return

                if not interaction.author.voice or interaction.author.voice.channel != vc:
                    raise GenericError(f"B·∫°n ph·∫£i ·ªü tr√™n k√™nh <#{vc.id}> ƒê·ªÉ s·ª≠ d·ª•ng c√°c n√∫t ng∆∞·ªùi ch∆°i.")

                if control == PlayerControls.miniqueue:
                    await is_dj().predicate(interaction)
                    player.mini_queue_enabled = not player.mini_queue_enabled
                    player.set_command_log(
                        emoji="üìë",
                        text=f"{interaction.author.mention} {'k√≠ch ho·∫°t' if player.mini_queue_enabled else 'v√¥ hi·ªáu h√≥a'} "
                             f"Danh s√°ch h√†ng ch·ªù mini."
                    )
                    await player.invoke_np(interaction=interaction)
                    return

                if control == PlayerControls.volume:
                    kwargs = {"value": None}

                elif control == PlayerControls.queue:
                    cmd = self.bot.get_slash_command("queue").children.get("display")

                elif control == PlayerControls.shuffle:
                    cmd = self.bot.get_slash_command("queue").children.get("shuffle")

                elif control == PlayerControls.seek_to_start:
                    cmd = self.bot.get_slash_command("seek")
                    kwargs = {"position": "0"}

                elif control == PlayerControls.pause_resume:
                    control = PlayerControls.pause if not player.paused else PlayerControls.resume

                elif control == PlayerControls.loop_mode:

                    if player.loop == "current":
                        kwargs['mode'] = 'queue'
                    elif player.loop == "queue":
                        kwargs['mode'] = 'off'
                    else:
                        kwargs['mode'] = 'current'

                elif control == PlayerControls.skip:
                    kwargs = {"query": None, "play_only": "no"}

                try:
                    await self.player_interaction_concurrency.acquire(interaction)
                except commands.MaxConcurrencyReached:
                    raise GenericError(
                        "**B·∫°n c√≥ m·ªôt t∆∞∆°ng t√°c m·ªü!**\n`N·∫øu ƒë√≥ l√† m·ªôt tin nh·∫Øn ·∫©n, tr√°nh nh·∫•p v√†o \"b·ªè qua\".`")

            if not cmd:
                cmd = self.bot.get_slash_command(control[12:])

            await self.process_player_interaction(
                interaction=interaction,
                command=cmd,
                kwargs=kwargs
            )

            try:
                await self.player_interaction_concurrency.release(interaction)
            except:
                pass

        except Exception as e:
            try:
                await self.player_interaction_concurrency.release(interaction)
            except:
                pass
            self.bot.dispatch('interaction_player_error', interaction, e)

    @commands.Cog.listener("on_modal_submit")
    async def song_request_modal(self, inter: disnake.ModalInteraction):

        if inter.custom_id == "modal_add_song":

            try:

                query = inter.text_values["song_input"]
                position = inter.text_values["song_position"]

                if position:
                    if not position.isdigit():
                        raise GenericError("**V·ªã tr√≠ c·ªßa d√≤ng ph·∫£i l√† m·ªôt s·ªë.**")
                    position = int(position)

                    if position < 1:
                        raise GenericError("**S·ªë v·ªã tr√≠ Rinning ph·∫£i l√† 1 ho·∫∑c cao h∆°n.**")

                kwargs = {
                    "query": query,
                    "position": position or 0,
                    "options": False,
                    "manual_selection": True,
                    "source": "ytsearch",
                    "repeat_amount": 0,
                    "server": None,
                    "force_play": "no",
                }

                await self.process_player_interaction(
                    interaction=inter,
                    command=self.bot.get_slash_command("play"),
                    kwargs=kwargs,
                )
            except Exception as e:
                self.bot.dispatch('interaction_player_error', inter, e)

    async def delete_message(self, message: disnake.Message, delay: int = None):

        try:
            is_forum = isinstance(message.channel.parent, disnake.ForumChannel)
        except AttributeError:
            is_forum = False

        if message.is_system() and is_forum:
            return

        if message.guild.me.guild_permissions.manage_messages:

            try:
                await message.delete(delay=delay)
            except:
                traceback.print_exc()

    @commands.Cog.listener("on_song_request")
    async def song_requests(self, ctx: Optional[CustomContext], message: disnake.Message):

        if ctx.command or message.mentions:
            return

        if message.author.bot and not isinstance(message.channel, disnake.StageChannel):
            return

        if message.content.startswith("/"):
            await self.delete_message(message)
            return

        try:
            data = await self.bot.get_data(message.guild.id, db_name=DBModel.guilds)
        except AttributeError:
            return

        player: Optional[LavalinkPlayer] = self.bot.music.players.get(message.guild.id)

        if player and isinstance(message.channel, disnake.Thread) and not player.static:

            if player.message.id != message.channel.id:
                return

            if not player.controller_mode:
                return

            text_channel = message.channel

        else:

            static_player = data['player_controller']

            channel_id = static_player['channel']

            if not channel_id or (
                    static_player['message_id'] != str(message.channel.id) and str(message.channel.id) != channel_id):
                return

            text_channel = self.bot.get_channel(int(channel_id))

            if not text_channel or not text_channel.permissions_for(message.guild.me).send_messages:
                return

            if not self.bot.intents.message_content:

                if self.song_request_cooldown.get_bucket(message).update_rate_limit():
                    return

                await message.channel.send(
                    message.author.mention,
                    embed=disnake.Embed(
                        description="Th·∫≠t kh√¥ng may, t√¥i kh√¥ng th·ªÉ ki·ªÉm tra n·ªôi dung c·ªßa tin nh·∫Øn c·ªßa b·∫°n...\n"
                                    "C·ªë g·∫Øng th√™m nh·∫°c b·∫±ng c√°ch s·ª≠ d·ª•ng **/play ** ho·∫∑c nh·∫•p v√†o m·ªôt trong c√°c n√∫t b√™n d∆∞·ªõi:",
                        color=self.bot.get_color(message.guild.me)
                    ),
                    components=[
                        disnake.ui.Button(emoji="üé∂", custom_id=PlayerControls.add_song, label="Y√™u c·∫ßu m·ªôt b√†i h√°t"),
                        disnake.ui.Button(emoji="‚≠ê", custom_id=PlayerControls.enqueue_fav, label="Ch∆°i y√™u th√≠ch/t√≠ch h·ª£p ")
                    ],
                    delete_after=20
                )
                return

        try:
            if isinstance(message.channel, disnake.Thread):

                if isinstance(message.channel.parent, disnake.ForumChannel):

                    if data['player_controller']["channel"] != str(message.channel.id):
                        return
                    if message.is_system():
                        await self.delete_message(message)

        except AttributeError:
            pass

        msg = None
        error = None
        has_exception = None

        try:
            if message.author.bot:
                if message.is_system() and not isinstance(message.channel, disnake.Thread):
                    await self.delete_message(message)
                if message.author.id == self.bot.user.id:
                    await self.delete_message(message, delay=15)
                return

            if not message.content:

                if message.type == disnake.MessageType.thread_starter_message:
                    return

                if message.is_system():
                    await self.delete_message(message)
                    return

                try:
                    attachment = message.attachments[0]
                except IndexError:
                    await message.channel.send(f"{message.author.mention} B·∫°n ph·∫£i g·ª≠i t√™n/t√™n √¢m nh·∫°c.")
                    return

                else:

                    if attachment.size > 18000000:
                        await message.channel.send(f"{message.author.mention} T·ªáp b·∫°n ƒë√£ g·ª≠i ph·∫£i c√≥ k√≠ch th∆∞·ªõco "
                                                   f"k√©m h∆°n 18MB.")
                        return

                    if attachment.content_type not in self.audio_formats:
                        await message.channel.send(f"{message.author.mention} T·ªáp b·∫°n ƒë√£ g·ª≠i ph·∫£i c√≥ k√≠ch th∆∞·ªõc "
                                                   f"k√©m h∆°n 18MB.")
                        return

                    message.content = attachment.url

            try:
                await self.song_request_concurrency.acquire(message)
            except:

                await message.channel.send(
                    f"{message.author.mention} B·∫°n ph·∫£i ƒë·ª£i ƒë∆°n h√†ng √¢m nh·∫°c tr∆∞·ªõc ƒë√¢y c·ªßa b·∫°n ƒë·ªÉ t·∫£i...",
                )

                await self.delete_message(message)
                return

            message.content = message.content.strip("<>")

            urls = URL_REG.findall(message.content)

            if not urls:
                message.content = f"ytsearch:{message.content}"

            else:
                message.content = urls[0]

                if "&list=" in message.content:

                    view = SelectInteraction(
                        user=message.author,
                        opts=[
                            disnake.SelectOption(label="B√†i h√°t", emoji="üéµ",
                                                 description="Ch·ªâ t·∫£i nh·∫°c t·ª´ li√™n k·∫øt.", value="music"),
                            disnake.SelectOption(label="Playlist", emoji="üé∂",
                                                 description="Ch∆°i danh s√°ch ph√°t v·ªõi √¢m nh·∫°c hi·ªán t·∫°i.", value="playlist"),
                        ], timeout=30)

                    embed = disnake.Embed(
                        description="**Li√™n k·∫øt ch·ª©a video v·ªõi danh s√°ch ph√°t.**\n"
                                    f'Ch·ªçn m·ªôt t√πy ch·ªçn trong <t:{int((disnake.utils.utcnow() + datetime.timedelta(seconds=30)).timestamp())}:R> ',
                        color=self.bot.get_color(message.guild.me)
                    )

                    msg = await message.channel.send(message.author.mention, embed=embed, view=view)

                    await view.wait()

                    try:
                        await view.inter.response.defer()
                    except:
                        pass

                    if view.selected == "music":
                        message.content = YOUTUBE_VIDEO_REG.match(message.content).group()

            await self.parse_song_request(message, text_channel, data, response=msg)

        except GenericError as e:
            error = f"{message.author.mention}. {e}"

        except Exception as e:
            traceback.print_exc()
            has_exception = e
            error = f"{message.author.mention} **ƒê√£ x·∫£y ra l·ªói khi c·ªë g·∫Øng nh·∫≠n k·∫øt qu·∫£ cho t√¨m ki·∫øm c·ªßa b·∫°n:** ```py\n{e}```"

        if error:

            await self.delete_message(message)

            try:
                if msg:
                    await msg.edit(content=error, embed=None, view=None)
                else:
                    await message.channel.send(error)
            except:
                traceback.print_exc()

        await self.song_request_concurrency.release(message)

        if has_exception and self.bot.config["AUTO_ERROR_REPORT_WEBHOOK"]:

            cog = self.bot.get_cog("ErrorHandler")

            if not cog:
                return

            max_concurrency = cog.webhook_max_concurrency

            await max_concurrency.acquire(message)

            try:
                error_msg, full_error_msg, kill_process = parse_error(message, has_exception)

                embed = disnake.Embed(
                    title="X·∫£y ra l·ªói tr√™n m√°y ch·ªß (song-request):",
                    timestamp=disnake.utils.utcnow(),
                    description=f"```py\n{repr(has_exception)[:2030].replace(self.bot.http.token, 'mytoken')}```"
                )

                embed.set_footer(
                    text=f"{message.author} [{message.author.id}]",
                    icon_url=message.author.display_avatar.with_static_format("png").url
                )

                embed.add_field(
                    name="M√°y ch·ªß:", inline=False,
                    value=f"```\n{disnake.utils.escape_markdown(ctx.guild.name)}\nID: {ctx.guild.id}```"
                )

                embed.add_field(
                    name="N·ªôi dung y√™u c·∫ßu √¢m nh·∫°c:", inline=False,
                    value=f"```\n{message.content}```"
                )

                embed.add_field(
                    name="K√™nh vƒÉn b·∫£n:", inline=False,
                    value=f"```\n{disnake.utils.escape_markdown(ctx.channel.name)}\nID: {ctx.channel.id}```"
                )

                if vc := ctx.author.voice:
                    embed.add_field(
                        name="K√™nh tho·∫°i (ng∆∞·ªùi d√πng):", inline=False,
                        value=f"```\n{disnake.utils.escape_markdown(vc.channel.name)}" +
                              (f" ({len(vc.channel.voice_states)}/{vc.channel.user_limit})"
                               if vc.channel.user_limit else "") + f"\nID: {vc.channel.id}```"
                    )

                if vcbot := ctx.guild.me.voice:
                    if vcbot.channel != vc.channel:
                        embed.add_field(
                            name="K√™nh tho·∫°i (bot):", inline=False,
                            value=f"{vc.channel.name}" +
                                  (f" ({len(vc.channel.voice_states)}/{vc.channel.user_limit})"
                                   if vc.channel.user_limit else "") + f"\nID: {vc.channel.id}```"
                        )

                if ctx.guild.icon:
                    embed.set_thumbnail(url=ctx.guild.icon.with_static_format("png").url)

                await cog.send_webhook(
                    embed=embed,
                    file=string_to_file(full_error_msg, "error_traceback_songrequest.txt")
                )

            except:
                traceback.print_exc()

            await asyncio.sleep(20)

            try:
                await max_concurrency.release(message)
            except:
                pass


    async def parse_song_request(self, message, text_channel, data, *, response=None, attachment: disnake.Attachment=None):

        if not message.author.voice:
            raise GenericError("B·∫°n ph·∫£i nh·∫≠p m·ªôt k√™nh gi·ªçng n√≥i ƒë·ªÉ y√™u c·∫ßu m·ªôt b√†i h√°t.")

        can_connect(
            channel=message.author.voice.channel,
            guild=message.guild,
            check_other_bots_in_vc=data["check_other_bots_in_vc"],
            bot=self.bot
        )

        try:
            if message.guild.me.voice.channel != message.author.voice.channel:
                raise GenericError(
                    f"B·∫°n ph·∫£i v√†o k√™nh <#{message.guild.me.voice.channel.id}> ƒê·ªÉ ƒë·∫∑t m·ªôt b√†i h√°t.")
        except AttributeError:
            pass

        tracks, node = await self.get_tracks(message.content, message.author)

        try:
            message_id = int(data['player_controller']['message_id'])
        except TypeError:
            message_id = None

        try:
            player = self.bot.music.players[message.guild.id]
            destroy_message = True
        except KeyError:
            destroy_message = False
            skin = data["player_controller"]["skin"]
            static_skin = data["player_controller"]["static_skin"]

            global_data = await self.bot.get_global_data(message.guild.id, db_name=DBModel.guilds)

            if global_data["global_skin"]:
                skin = global_data["player_skin"] or skin
                static_skin = global_data["player_skin_static"] or static_skin

            try:
                invite = global_data["listen_along_invites"][str(message.author.voice.channel.id)]
            except (KeyError, AttributeError):
                invite = None

            else:
                if not await self.bot.fetch_invite(invite):
                    print(
                        f'{"-"*15}\n'
                        f'Lo·∫°i b·ªè l·ªùi m·ªùi: {invite} \n'
                        f'M√°y ch·ªß: {message.guild.name} [{message.guild.id}]\n'
                        f'K√™nh: {message.channel.name} [{message.channel.id}]\n'
                        f'{"-" * 15}'
                    )
                    invite = None
                    del global_data["listen_along_invites"][str(message.author.voice.channel.id)]
                    await self.bot.update_global_data(message.guild.id, global_data, db_name=DBModel.guilds)

            player: LavalinkPlayer = self.bot.music.get_player(
                guild_id=message.guild.id,
                cls=LavalinkPlayer,
                player_creator=message.author.id,
                guild=message.guild,
                channel=text_channel,
                static=True,
                skin=self.bot.check_skin(skin),
                skin_static=self.bot.check_static_skin(static_skin),
                custom_skin_data=global_data["custom_skins"],
                custom_skin_static_data=global_data["custom_skins_static"],
                node_id=node.identifier,
                extra_hints=self.extra_hints,
                last_message_id=message_id,
                restrict_mode=data['enable_restrict_mode'],
                listen_along_invite=invite,
                volume=int(data['default_player_volume']),
                autoplay=data["autoplay"],
                prefix=global_data["prefix"] or self.bot.default_prefix,
            )

        if not player.message:
            try:
                cached_message = await text_channel.fetch_message(message_id)
            except:
                cached_message = await send_idle_embed(message, bot=self.bot)
                data['player_controller']['message_id'] = str(cached_message.id)
                await self.bot.update_data(message.guild.id, data, db_name=DBModel.guilds)

            player.message = cached_message

        embed = disnake.Embed(color=self.bot.get_color(message.guild.me))

        if not isinstance(tracks, list):
            player.queue.extend(tracks.tracks)
            if isinstance(message.channel, disnake.Thread) and not isinstance(message.channel.parent,
                                                                              disnake.ForumChannel):
                embed.description = f"‚úã **‚†Ç ƒê∆∞·ª£c y√™u c·∫ßu b·ªüi:** {message.author.mention}\n" \
                                    f"üéº **‚†Ç C√°c b√†i h√°t:** `[{len(tracks.tracks)}]`"
                embed.set_thumbnail(url=tracks.tracks[0].thumb)
                embed.set_author(name="‚†Ç" + fix_characters(tracks.tracks[0].playlist_name, 35), url=message.content,
                                 icon_url=music_source_image(tracks.tracks[0].info["sourceName"]))
                if response:
                    await response.edit(content=None, embed=embed, view=None)
                else:
                    await message.channel.send(embed=embed)

            else:
                player.set_command_log(
                    text=f"{message.author.mention} ƒê√£ th√™m danh s√°ch ph√°t [`{fix_characters(tracks.data['playlistInfo']['name'], 20)}`]"
                         f"({tracks.tracks[0].playlist_url}) `({len(tracks.tracks)})`.",
                    emoji="üé∂"
                )
                if destroy_message:
                    await self.delete_message(message)
                    if response:
                        await self.delete_message(response)

        else:
            track = tracks[0]

            if track.info.get("sourceName") == "http":

                if track.title == "Unknown title":
                    if attachment:
                        track.info["title"] = attachment.filename
                    else:
                        track.info["title"] = track.uri.split("/")[-1]
                    track.title = track.info["title"]

                track.uri = ""

            player.queue.append(track)
            if isinstance(message.channel, disnake.Thread) and not isinstance(message.channel.parent,
                                                                              disnake.ForumChannel):
                embed.description = f"üí† **‚†Ç Ng∆∞·ªùi t·∫£i l√™n:** `{track.author}`\n" \
                                    f"‚úã **‚†Ç ƒê∆∞·ª£c y√™u c·∫ßu b·ªüi:** {message.author.mention}\n" \
                                    f"‚åõ **‚†Ç Th·ªùi l∆∞·ª£ng** `{time_format(track.duration) if not track.is_stream else 'üî¥ Livestream'}` "
                embed.set_thumbnail(url=track.thumb)
                embed.set_author(name=fix_characters(track.title, 35), url=track.uri or track.search_uri, icon_url=music_source_image(track.info["sourceName"]))
                if response:
                    await response.edit("<:verify:1134033164151566460> **Th√™m b√†i h√°t th√†nh c√¥ng**", content=None, embed=embed, view=None)
                else:
                    await message.channel.send("<:verify:1134033164151566460> **Th√™m b√†i h√°t th√†nh c√¥ng**", embed=embed)

            else:
                duration = time_format(tracks[0].duration) if not tracks[0].is_stream else 'üî¥ Livestream'
                player.set_command_log(
                    text=f"{message.author.mention} th√™m [`{fix_characters(tracks[0].title, 20)}`]({tracks[0].uri or tracks[0].search_uri}) `({duration})`.",
                    emoji="üéµ"
                )
                if destroy_message:
                    await self.delete_message(message)
                    if response:
                        await self.delete_message(response)

        if not player.is_connected:
            await self.do_connect(
                message,
                channel=message.author.voice.channel,
                check_other_bots_in_vc=data["check_other_bots_in_vc"]
            )

        if not player.current:
            await player.process_next()
        else:
            await player.update_message()

        await asyncio.sleep(1)

    async def cog_check(self, ctx: CustomContext) -> bool:

        return await check_requester_channel(ctx)

    async def interaction_message(self, inter: Union[disnake.Interaction, CustomContext], txt, emoji: str = "<:verify:1134033164151566460>",
                                  rpc_update: bool = False, data: dict = None, store_embed: bool = False, force=False,
                                  defered=False):

        try:
            txt, txt_ephemeral = txt
        except:
            txt_ephemeral = False

        try:
            bot = inter.music_bot
            guild = inter.music_guild
        except AttributeError:
            bot = inter.bot
            guild = inter.guild

        player: LavalinkPlayer = bot.music.players[inter.guild_id]

        component_interaction = isinstance(inter, disnake.MessageInteraction)

        ephemeral = await self.is_request_channel(inter, data=data)

        if ephemeral:
            player.set_command_log(text=f"{inter.author.mention} {txt}", emoji=emoji)
            player.update = True

        await player.update_message(interaction=inter if (bot.user.id == self.bot.user.id and component_interaction) \
            else False, rpc_update=rpc_update, force=force)

        if isinstance(inter, CustomContext):
            embed = disnake.Embed(color=self.bot.get_color(guild.me),
                                  description=f"{txt_ephemeral or txt}{player.controller_link}")

            try:
                if bot.user.id != self.bot.user.id:
                    embed.set_footer(text=f"S·ª≠ d·ª•ng {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
            except AttributeError:
                pass

            if store_embed and not player.controller_mode and len(player.queue) > 0:
                player.temp_embed = embed

            else:
                try:
                    await inter.store_message.edit(embed=embed, view=None, content=None)
                except AttributeError:
                    await inter.send(embed=embed)

        elif not component_interaction:

            if not inter.response.is_done():
                embed = disnake.Embed(
                    color=self.bot.get_color(guild.me),
                    description=(txt_ephemeral or f"{inter.author.mention} **{txt}**") + player.controller_link
                )

                try:
                    if bot.user.id != self.bot.user.id:
                        embed.set_footer(text=f"S·ª≠ d·ª•ng {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
                except AttributeError:
                    pass

                await inter.send(embed=embed, ephemeral=ephemeral)

        elif not component_interaction:

            if not inter.response.is_done():
                embed = disnake.Embed(
                    color=self.bot.get_color(guild.me),
                    description=(txt_ephemeral or f"{inter.author.mention} **{txt}**") + player.controller_link
                )

                try:
                    if bot.user.id != self.bot.user.id:
                        embed.set_footer(text=f"Via: {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
                except AttributeError:
                    pass

                await inter.send(embed=embed, ephemeral=ephemeral)

            elif defered:
                embed = disnake.Embed(
                    color=self.bot.get_color(guild.me),
                    description=(txt_ephemeral or f"{inter.author.mention} **{txt}**") + player.controller_link
                )

                try:
                    if bot.user.id != self.bot.user.id:
                        embed.set_footer(text=f"Th√¥ng qua: {bot.user.display_name}", icon_url=bot.user.display_avatar.url)
                except AttributeError:
                    pass

                await inter.edit_original_response(embed=embed)

    async def process_nodes(self, data: dict, start_local: bool = False):

        await self.bot.wait_until_ready()

        if str(self.bot.user.id) in self.bot.config["INTERACTION_BOTS_CONTROLLER"]:
            return

        for k, v in data.items():
            self.bot.loop.create_task(self.connect_node(v))

        if start_local:
            self.bot.loop.create_task(self.connect_local_lavalink())

    @commands.Cog.listener("on_wavelink_node_connection_closed")
    async def node_connection_closed(self, node: wavelink.Node):

        retries = 0
        backoff = 7

        if not node.restarting:

            print(f"{self.bot.user} - [{node.identifier}] K·∫øt n·ªëi b·ªã m·∫•t - k·∫øt n·ªëi l·∫°i trong {int(backoff)} gi√¢y.")

            for player in list(node.players.values()):

                try:

                    try:
                        new_node: wavelink.Node = await self.get_best_node()
                    except:
                        try:
                            await player.text_channel.send(
                                "Ng∆∞·ªùi ch∆°i ƒë√£ t·∫Øt v√¨ thi·∫øu m√°y ch·ªß √¢m nh·∫°c...",
                                delete_after=11)
                        except:
                            pass
                        await player.destroy()
                        continue

                    await player.change_node(new_node.identifier)
                    await player.update_message()

                except:
                    traceback.print_exc()
                    continue

        await asyncio.sleep(backoff)

        while True:

            if retries == 30:
                print(f"{self.bot.user} - [{node.identifier}] T·∫•t c·∫£ c√°c n·ªó l·ª±c ƒë·ªÉ ƒëi·ªÅu ch·ªânh l·∫°i th·∫•t b·∫°i...")
                return

            await self.bot.wait_until_ready()

            try:
                async with self.bot.session.get(node.rest_uri) as r:
                    if r.status in [401, 200, 400]:
                        await node.connect(self.bot)
                        return
                    error = r.status
            except Exception as e:
                error = repr(e)

            backoff *= 1.5
            print(
                f'{self.bot.user} - Kh√¥ng k·∫øt n·ªëi l·∫°i v·ªõi m√°y ch·ªß [{node.identifier}] th·ª≠ l·∫°i su {int(backoff)}'
                f' gi√¢y.L·ªói: {error}')
            await asyncio.sleep(backoff)
            retries += 1
            continue

    @commands.Cog.listener("on_wavelink_websocket_closed")
    async def node_ws_voice_closed(self, node, payload: wavelink.events.WebsocketClosed):

        if payload.code == 1000:
            return

        player: LavalinkPlayer = payload.player

        if not player.guild.me:
            return

        try:
            vc = player.last_channel or player.guild.me.voice.channel
        except AttributeError:
            vc = None

        if payload.code == 4014 and player.guild.me.voice:
            pass
        else:
            print(
                ("-" * 15) +
                f"\nL·ªói k√™nh tho·∫°i!"
                f"\nBot: {player.bot.user} [{player.bot.user.id}] | " + ("Online" if self.bot.is_ready() else "Offline") +
                f"\nM√°y ch·ªß: {player.guild.name} [{player.guild.id}]"
                f"\nK√™nh: {vc.name} [{vc.id}]"
                f"\nServer: {player.node.identifier} | code: {payload.code} | reason: {payload.reason}\n" +
                ("-" * 15)
            )

        if player.is_closing:
            return

        if payload.code in (
                4000,  # internal error
                1006,
                1001,
                4016,  # Connection started elsewhere
                4005,  # Already authenticated.
                4006,  # Session is no longer valid.
        ):
            try:
                vc_id = player.guild.me.voice.channel.id
            except AttributeError:
                vc_id = player.last_channel.id

            await asyncio.sleep(3)

            if player.is_closing:
                return

            await player.connect(vc_id)
            return

        if payload.code == 4014:

            if player.static:
                player.command_log = "T√¥i ƒë√£ t·∫Øt tr√¨nh ph√°t v√¨ m·∫•t k·∫øt n·ªëi v·ªõi k√™nh tho·∫°i."
                await player.destroy()

            else:
                embed = disnake.Embed(description="**T√¥i ƒë√£ t·∫Øt ng∆∞·ªùi ch∆°i v√¨ m·∫•t k·∫øt n·ªëi v·ªõi k√™nh tho·∫°i.**",
                                      color=self.bot.get_color(player.guild.me))
                try:
                    self.bot.loop.create_task(player.text_channel.send(embed=embed, delete_after=7))
                except:
                    traceback.print_exc()
                await player.destroy()

            return

    @commands.Cog.listener('on_wavelink_track_exception')
    async def wavelink_track_error(self, node, payload: wavelink.TrackException):
        player: LavalinkPlayer = payload.player
        track = player.last_track
        embed = disnake.Embed(title=f"<:Amber_SaveMe:1135639250650542161> **·ªêi, m·ªôt l·ªói kh√¥ng mong mu·ªën ƒë√£ x·∫£y ra** <:Amber_SaveMe:1135639250650542161>",
            description= f"M√°y ch·ªß b·ªã l·ªói r·ªìi, b·∫°n h√£y d√πng ```/change_node``` ƒë·ªÉ thay ƒë·ªïi m√°y ch·ªß nh√©\n"
                         f"**Kh√¥ng ch∆°i nh·∫°c:\n[{track.title}]({track.uri or track.search_uri})** ```java\n{payload.message}```\n"
                         f"**G√¢y ra:** ```java\n{payload.cause}```\n"
                         f"**M·ª©c ƒë·ªô:** `{payload.severity}`\n"
                         f"**M√°y ch·ªß √¢m nh·∫°c:** `{player.node.identifier}`\n"
                         f"H∆∞·ªõng d·∫´n: ",
        color=disnake.Colour.green())
        
        embed.set_image(url="https://cdn.discordapp.com/attachments/1114279240909721630/1135655816691712141/New_Project_9_BE96059.gif")
        await player.text_channel.send(embed=embed, delete_after=10)

        error_format = pprint.pformat(payload.data)

        print(("-" * 50) + f"\nL·ªói khi ch∆°i nh·∫°c: {track.uri or track.search_uri}\n"
              f"Servidor: {player.node.identifier}\n"
              f"{error_format}\n" + ("-" * 50))

        if self.error_report_queue:

            embed.description += f"\n**M√°y ch·ªß:** `{disnake.utils.escape_markdown(player.guild.name)} [{player.guild.id}]`"

            try:
                embed.description += f"\n**K√™nh:** `{disnake.utils.escape_markdown(player.guild.me.voice.channel.name)} [{player.guild.me.voice.channel.id}]`\n"
            except:
                pass

            embed.description += f"**Data:** <t:{int(disnake.utils.utcnow().timestamp())}:F>"

            await self.error_report_queue.put({"embed": embed})

        if player.locked:
            return

        player.current = None

        if payload.error == "This IP address has been blocked by YouTube (429)":
            player.node.available = False
            newnode = [n for n in self.bot.music.nodes.values() if n != player.node and n.available and n.is_available]
            if newnode:
                player.queue.appendleft(player.last_track)
                await player.change_node(newnode[0].identifier)
            else:
                embed = disnake.Embed(
                    color=self.bot.get_color(player.guild.me),
                    description="**Ng∆∞·ªùi ch∆°i ƒë√£ t·∫Øt v√¨ thi·∫øu m√°y ch·ªß c√≥ s·∫µn.**"
                )
                await player.text_channel.send(embed=embed, delete_after=15)
                await player.destroy(force=True)
                return

        if player.last_track:

            if payload.cause in (
                "java.net.SocketTimeoutException: connect timed out",
                "com.sedmelluq.discord.lavaplayer.tools.io.PersistentHttpStream$PersistentHttpException: Not success status code: 403"
            ):
                player.queue.appendleft(player.last_track)

            elif payload.cause == "java.lang.InterruptedException":
                player.queue.appendleft(player.last_track)

                if player.node.identifier == "LOCAL":
                    return
                else:
                    try:
                        n = await self.get_best_node()
                    except:
                        if player.static:
                            player.set_command_log(text="Ng∆∞·ªùi ch∆°i ƒë√£ b·ªã t·∫Øt v√¨ thi·∫øu m√°y ch·ªß √¢m nh·∫°c...")
                        else:
                            await player.text_channel.send("**Ng∆∞·ªùi ch∆°i ƒë√£ b·ªã t·∫Øt v√¨ thi·∫øu m√°y ch·ªß √¢m nh·∫°c...**")
                        await player.destroy()
                        return
                    await player.change_node(n.identifier)

            # TODO: Desativar esse recurso ap√≥s a corre√ß√£o do lavaplayer ser efetuada.
            elif payload.cause == "java.lang.RuntimeException: Not success status code: 403" and player.node.identifier == "LOCAL":

                player.queue.appendleft(player.last_track)

                txt = "M√°y ch·ªß √¢m nh·∫°c ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông l·∫°i ƒë·ªÉ ƒëi·ªÅu ch·ªânh v√† √¢m nh·∫°c s·∫Ω ƒë∆∞·ª£c n·ªëi l·∫°i trong m·ªôt s·ªë " \
                      "gi√¢y (vui l√≤ng ƒë·ª£i)..."

                for b in self.bot.pool.bots:

                    for n in b.music.nodes.values():

                        if n.identifier != "LOCAL" or n.restarting:
                            continue

                        for p in n.players.values():

                            p.locked = True

                            p.node.restarting = True

                            if p.static or p.controller_mode:
                                p.set_command_log(text=txt, emoji="üõ†Ô∏è")
                                self.bot.loop.create_task(p.invoke_np(force=True))
                            else:
                                self.bot.loop.create_task(
                                    p.text_channel.send(
                                        embed=disnake.Embed(
                                            color=self.bot.get_color(p.guild.me),
                                            description=f"üõ†Ô∏è **‚†Ç{txt}**"
                                        )
                                    )
                                )

                self.bot.pool.start_lavalink()
                player.locked = True
                return

            elif not track.track_loops:
                player.failed_tracks.append(player.last_track)

            elif player.keep_connected and not player.last_track.autoplay and len(player.queue) > 15:
                player.queue.append(player.last_track)

        player.locked = True
        await asyncio.sleep(10)

        try:
            player = player.bot.music.players[player.guild.id]
        except:
            return

        player.locked = False
        await player.process_next()

    @commands.Cog.listener("on_wavelink_node_ready")
    async def node_ready(self, node: wavelink.Node):
        msg = f'{self.bot.user} - M√°y ch·ªß √¢m nh·∫°c: [{node.identifier}] ƒë√£ s·∫µn s√†ng!'

        if node.restarting:

            print(msg + " K·∫øt n·ªëi l·∫°i ng∆∞·ªùi ch∆°i...")

            node.restarting = False

            for guild_id in list(node.players):
                try:
                    player = node.players[guild_id]
                    await player.change_node(node.identifier, force=True)
                    player.set_command_log(
                        text="M√°y ch·ªß √¢m nh·∫°c ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi l·∫°i th√†nh c√¥ng!",
                        emoji="üî∞"
                    )
                    player.locked = False
                    if player.current:
                        if not player.paused:
                            await player.play(player.current, start=player.position)
                        player.update = True
                    else:
                        await player.process_next()
                except:
                    traceback.print_exc()
                    continue

        else:
            print(msg)

    @commands.Cog.listener('on_wavelink_track_start')
    async def track_start(self, node, payload: wavelink.TrackStart):

        player: LavalinkPlayer = payload.player

        if not player.text_channel.permissions_for(player.guild.me).send_messages:
            try:
                print(f"{player.guild.name} [{player.guild_id}] - Ch∆°i ng∆∞·ªùi ch∆°i v√¨ thi·∫øu s·ª± cho ph√©p g·ª≠i "
                      f"mensagens no canal: {player.text_channel.name} [{player.text_channel.id}]")
            except Exception:
                traceback.print_exc()
            await player.destroy()
            return

        if not player.guild.me.voice:
            try:
                await self.bot.wait_for(
                    "voice_state_update", check=lambda m, b, a: m == player.guild.me and m.voice, timeout=7
                )
            except asyncio.TimeoutError:
                player.update = True
                return

        await player.process_save_queue()

    @commands.Cog.listener("on_wavelink_track_end")
    async def track_end(self, node: wavelink.Node, payload: wavelink.TrackEnd):

        player: LavalinkPlayer = payload.player

        if player.locked:
            return

        if payload.reason == "FINISHED":
            player.set_command_log()

        elif payload.reason == "STOPPED":

            if len(player.queue) == 0:
                return

            player.ignore_np_once = True

        else:
            return

        try:
            player.message_updater_task.cancel()
        except:
            pass

        try:
            player = self.bot.music.players[player.guild.id]
        except:
            return

        await player.track_end()

        player.update = False

        await player.process_next()

    async def connect_node(self, data: dict):

        if data["identifier"] in self.bot.music.nodes:
            node = self.bot.music.nodes[data['identifier']]
            if not node.is_connected:
                await node.connect(self.bot)
            return

        data['rest_uri'] = ("https" if data.get('secure') else "http") + f"://{data['host']}:{data['port']}"
        data['user_agent'] = self.u_agent
        search = data.pop("search", True)
        max_retries = data.pop('retries', 0)
        node_website = data.pop('website', '')
        region = data.pop('region', 'us_central')

        if max_retries:

            backoff = 7
            retries = 1

            print(f"{self.bot.user} - M√°y ch·ªß √¢m nh·∫°c b·∫Øt ƒë·∫ßu: {data['identifier']}")

            while not self.bot.is_closed():
                if retries >= max_retries:
                    print(
                        f"{self.bot.user} - T·∫•t c·∫£ c√°c n·ªó l·ª±c k·∫øt n·ªëi v·ªõi m√°y ch·ªß [{data['identifier']}] falharam.")
                    return
                else:
                    try:
                        async with self.bot.session.get(data['rest_uri'], timeout=10) as r:
                            break
                    except Exception:
                        backoff += 2
                        # print(f'{self.bot.user} - Falha ao conectar no servidor [{data["identifier"]}], '
                        #       f'nova tentativa [{retries}/{max_retries}] em {backoff} segundos.')
                        await asyncio.sleep(backoff)
                        retries += 1
                        continue

        data["identifier"] = data["identifier"].replace(" ", "_")
        node = await self.bot.music.initiate_node(auto_reconnect=False, region=region, **data)
        node.search = search
        node.website = node_website

    async def get_tracks(
            self, query: str, user: disnake.Member, node: wavelink.Node = None,
            track_loops=0, use_cache=True):

        if not node:
            node = await self.get_best_node()

        tracks = await process_spotify(self.bot, user.id, query)

        if not tracks:

            if use_cache:
                try:
                    cached_tracks = self.bot.pool.playlist_cache[query]
                except KeyError:
                    pass
                else:

                    tracks = LavalinkPlaylist(
                        {
                            'loadType': 'PLAYLIST_LOADED',
                            'playlistInfo': {
                                'name': cached_tracks[0]["info"]["extra"]["playlist"]["name"],
                                'selectedTrack': -1
                            },
                            'tracks': cached_tracks
                        },
                        requester=user.id,
                        url=cached_tracks[0]["info"]["extra"]["playlist"]["url"]
                    )

            if not tracks:

                if node.search:
                    node_search = node
                else:
                    try:
                        node_search = \
                            sorted(
                                [n for n in self.bot.music.nodes.values() if
                                 n.search and n.available and n.is_available and not n.restarting],
                                key=lambda n: len(n.players))[0]
                    except IndexError:
                        node_search = node

                try:
                    tracks = await node_search.get_tracks(
                        query, track_cls=LavalinkTrack, playlist_cls=LavalinkPlaylist, requester=user.id
                    )
                except ClientConnectorCertificateError:
                    node_search.available = False

                    for n in self.bot.music.nodes.values():

                        if not n.available or not n.is_available or n.restarting:
                            continue

                        try:
                            tracks = await n.get_tracks(
                                query, track_cls=LavalinkTrack, playlist_cls=LavalinkPlaylist, requester=user.id
                            )
                            node_search = n
                            break
                        except ClientConnectorCertificateError:
                            n.available = False
                            continue

                    if not node_search:
                        raise GenericError("**Kh√¥ng c√≥ m√°y ch·ªß √¢m nh·∫°c c√≥ s·∫µn.**")

        if not tracks:
            raise GenericError("N√£o houve resultados para sua busca.")

        if isinstance(tracks, list):
            tracks[0].info["extra"]["track_loops"] = track_loops

        else:

            if (selected := tracks.data['playlistInfo']['selectedTrack']) > 0:
                tracks.tracks = tracks.tracks[selected:] + tracks.tracks[:selected]

        return tracks, node

    async def connect_local_lavalink(self):

        if 'LOCAL' not in self.bot.music.nodes:

            localnode = {
                'host': '127.0.0.1',
                'port': 8090,
                'password': 'youshallnotpass',
                'identifier': 'LOCAL',
                'region': 'us_central',
                'retries': 25
            }

            self.bot.loop.create_task(self.connect_node(localnode))

    @commands.Cog.listener("on_thread_create")
    async def thread_song_request(self, thread: disnake.Thread):

        try:
            player: LavalinkPlayer = self.bot.music.players[thread.guild.id]
        except KeyError:
            return

        if player.static or player.message.id != thread.id:
            return

        embed = disnake.Embed(color=self.bot.get_color(thread.guild.me))

        if self.bot.intents.message_content:
            embed.description = "**B·∫°n ch·ªâ c·∫ßn n√©m linh ho·∫∑c t√™n c·ªßa b√†i h√°t v√†o ƒë√¢y l√† tui s·∫Ω t·ª± th√™m cho b·∫°n**" \

        elif not player.controller_mode:
            embed.description = "**V√πng da/hi·ªán t·∫°i kh√¥ng t∆∞∆°ng th√≠ch v·ªõi h·ªá th·ªëng y√™u c·∫ßu b√†i h√°t " \
                               "th√¥ng qua ch·ªß ƒë·ªÅ/cu·ªôc tr√≤ chuy·ªán\n\n" \
                               "L∆∞u √Ω: ** `H·ªá th·ªëng n√†y y√™u c·∫ßu m·ªôt l√†n da s·ª≠ d·ª•ng c√°c n√∫t.`"

        else:
            embed.description = "**ƒê·ªÉ √Ω!T√¥i kh√¥ng c√≥ √Ω ƒë·ªãnh c·ªßa message_content ƒë∆∞·ª£c k√≠ch ho·∫°t b·ªüi nh√† ph√°t tri·ªÉn c·ªßa t√¥i...\n" \
                                "Ch·ª©c nƒÉng y√™u c·∫ßu √¢m nh·∫°c ·ªü ƒë√¢y c√≥ th·ªÉ kh√¥ng c√≥ k·∫øt qu·∫£ d·ª± ki·∫øn...**"

        await thread.send(embed=embed)

    @commands.Cog.listener("on_voice_state_update")
    async def player_vc_disconnect(
            self,
            member: disnake.Member,
            before: disnake.VoiceState,
            after: disnake.VoiceState
    ):

        if before.channel == after.channel:
            return

        if member.bot and self.bot.user.id != member.id:
            # ignorar outros bots
            return

        try:
            player: LavalinkPlayer = self.bot.music.players[member.guild.id]
        except KeyError:
            return

        try:
            player.members_timeout_task.cancel()
            player.members_timeout_task = None
        except AttributeError:
            pass

        if member.id == self.bot.user.id and member.guild.voice_client and after.channel:
            # tempfix para channel do voice_client n√£o ser setado ao mover bot do canal.
            player.guild.voice_client.channel = after.channel
            player.last_channel = after.channel

        try:
            check = any(m for m in player.guild.me.voice.channel.members if not m.bot)
        except:
            check = None

        player.members_timeout_task = self.bot.loop.create_task(player.members_timeout(check=check))

        # rich presence stuff

        if player.auto_pause:
            return

        if player.is_closing or (member.bot and not before.channel):
            return

        channels = set()

        try:
            channels.add(before.channel.id)
        except:
            pass

        try:
            channels.add(after.channel.id)
        except:
            pass

        try:
            try:
                vc = player.guild.me.voice.channel
            except AttributeError:
                vc = player.last_channel

            if vc.id not in channels:
                return
        except AttributeError:
            pass

        if not after or before.channel != after.channel:

            try:
                vc = player.guild.me.voice.channel
            except AttributeError:
                vc = before.channel

            if vc:

                try:
                    await player.process_rpc(vc, users=[member.id], close=not player.guild.me.voice or after.channel != player.guild.me.voice.channel, wait=True)
                except AttributeError:
                    traceback.print_exc()
                    pass

                await player.process_rpc(vc, users=[m for m in vc.voice_states if (m != member.id)])

    async def reset_controller_db(self, guild_id: int, data: dict, inter: disnake.AppCmdInter = None):

        try:
            bot = inter.music_bot
        except AttributeError:
            bot = inter.bot

        data['player_controller']['channel'] = None
        data['player_controller']['message_id'] = None

        try:
            player: LavalinkPlayer = bot.music.players[guild_id]
        except KeyError:
            return

        player.static = False

        try:
            if isinstance(inter.channel.parent, disnake.TextChannel):
                player.text_channel = inter.channel.parent
            else:
                player.text_channel = inter.channel
        except AttributeError:
            player.text_channel = inter.channel

        try:
            await bot.update_data(guild_id, data, db_name=DBModel.guilds)
        except Exception:
            traceback.print_exc()

    async def get_best_node(self, bot: BotCore = None):

        if not bot:
            bot = self.bot

        try:
            return sorted(
                [n for n in bot.music.nodes.values() if n.stats and n.is_available and n.available and not n.restarting],
                key=lambda n: n.stats.players
            )[0]

        except IndexError:
            try:
                node = bot.music.nodes['LOCAL']
            except KeyError:
                pass
            else:
                if not node._websocket.is_connected:
                    await node.connect(bot)
                return node

            raise GenericError("**Kh√¥ng c√≥ m√°y ch·ªß √¢m nh·∫°c c√≥ s·∫µn.**")

    async def error_report_loop(self):

        while True:

            data = await self.error_report_queue.get()

            async with aiohttp.ClientSession() as session:
                webhook = disnake.Webhook.from_url(self.bot.config["AUTO_ERROR_REPORT_WEBHOOK"], session=session)
                await webhook.send(username=self.bot.user.display_name, avatar_url=self.bot.user.display_avatar.url, **data)

            await asyncio.sleep(15)


def setup(bot: BotCore):
    bot.add_cog(Music(bot))
