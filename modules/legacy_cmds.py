# -*- coding: utf-8 -*-
import asyncio
import gc
import os
import re
import shutil
import json
import traceback
from zipfile import ZipFile

from typing import Union, Optional
import disnake
import dotenv
import psutil
import wavelink
from disnake.ext import commands
from aiohttp import ClientSession

from utils.client import BotCore
from utils.db import DBModel
from utils.music.checks import check_voice, check_requester_channel
from utils.music.models import LavalinkPlayer
from utils.others import sync_message, CustomContext, string_to_file, token_regex, CommandArgparse
from utils.owner_panel import panel_command, PanelView
from utils.music.errors import GenericError
from config_loader import DEFAULT_CONFIG, load_config


def format_git_log(data_list: list):

    data = []

    for d in data_list:
        if not d:
            continue
        t = d.split("*****")
        data.append({"commit": t[0], "abbreviated_commit": t[1], "subject": t[2], "timestamp": t[3]})

    return data


async def run_command(cmd: str):

    p = await asyncio.create_subprocess_shell(
        cmd, stdin=asyncio.subprocess.PIPE,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.STDOUT,
    )
    stdout, stderr = await p.communicate()
    r = ShellResult(p.returncode, stdout, stderr)
    if r.status != 0:
        raise GenericError(f"{r.stderr or r.stdout}\n\nStatus Code: {r.status}")
    return str(r.stdout)


class ShellResult:

    def __init__(self, status: int, stdout: Optional[bytes], stderr: Optional[bytes]):
        self.status = status
        self.stdout = stdout.decode(encoding="utf-8", errors="replace") if stdout is not None else None
        self.stderr = stderr.decode(encoding="utf-8", errors="replace") if stderr is not None else None


class Owner(commands.Cog):

    os_quote = "\"" if os.name == "nt" else "'"
    git_format = f"--pretty=format:{os_quote}%H*****%h*****%s*****%ct{os_quote}"

    extra_files = [
        "./playlist_cache.json",
    ]

    additional_files = [
        "./lavalink.ini",
        "./application.yml",
        "./squarecloud.config",
        "./squarecloud.app",
        "./discloud.config",
    ]

    extra_dirs = [
        "local_database",
        ".player_sessions"
    ]

    def __init__(self, bot: BotCore):
        self.bot = bot
        self.git_init_cmds = [
            "git init",
            f'git remote add origin {self.bot.config["SOURCE_REPO"]}',
            'git fetch origin',
            'git checkout -b main -f --track origin/main'
        ]
        self.owner_view: Optional[PanelView] = None
        self.extra_hints = bot.config["EXTRA_HINTS"].split("||")

    def format_log(self, data: list):
        return "\n".join(f"[`{c['abbreviated_commit']}`]({self.bot.pool.remote_git_url}/commit/{c['commit']}) `- "
                         f"{(c['subject'][:40].replace('`', '') + '...') if len(c['subject']) > 39 else c['subject']}` "
                         f"(<t:{c['timestamp']}:R>)" for c in data)

    @commands.cooldown(1, 10, commands.BucketType.user)
    @commands.is_owner()
    @commands.command(
        hidden=True, aliases=["gls", "lavalink", "lllist", "lavalinkservers"],
        description="T·∫£i xu·ªëng m·ªôt t·ªáp v·ªõi danh s√°ch m√°y ch·ªß Lavalink ƒë·ªÉ s·ª≠ d·ª•ng ch√∫ng trong h·ªá th·ªëng √¢m nh·∫°c."
    )
    async def getlavaservers(self, ctx: CustomContext):

        await ctx.defer()

        await self.download_lavalink_serverlist()

        await ctx.send(
            embed=disnake.Embed(
                description="**T·ªáp Lavalink.ini ƒë√£ ƒë∆∞·ª£c t·∫£i xu·ªëng th√†nh c√¥ng!\n"
                            "B·∫°n s·∫Ω c·∫ßn kh·ªüi ƒë·ªông l·∫°i ƒë·ªÉ s·ª≠ d·ª•ng c√°c m√°y ch·ªß c·ªßa t·ªáp n√†y.**"
            )
        )

    updatelavalink_flags = CommandArgparse()
    updatelavalink_flags.add_argument('-force', '--force', action='store_true',
                                      help="B·ªè qua vi·ªác th·ª±c thi/s·ª≠ d·ª•ng m√°y ch·ªß c·ª•c b·ªô.")
    updatelavalink_flags.add_argument('-yml', '--yml', action='store_true',
                                      help="T·∫£i t·∫≠p tin application.yml.")
    updatelavalink_flags.add_argument("-resetids", "-reset", "--resetids", "--reset",
                                      help="ƒê·∫∑t l·∫°i th√¥ng tin ID √¢m nh·∫°c (h·ªØu √≠ch ƒë·ªÉ tr√°nh c√°c v·∫•n ƒë·ªÅ v·ªõi m·ªôt s·ªë "
                                           "Lavaplayer/Lavalink thay ƒë·ªïi).")

    @commands.is_owner()
    @commands.max_concurrency(1, commands.BucketType.user)
    @commands.command(hidden=True, aliases=["ull", "updatell", "llupdate", "llu"], extras={"flags": updatelavalink_flags})
    async def updatelavalink(self, ctx: CustomContext, flags: str = ""):

        args, unknown = ctx.command.extras['flags'].parse_known_args(flags.split())

        node: Optional[wavelink.Node] = None

        for bot in self.bot.pool.bots:
            try:
                node = bot.music.nodes["LOCAL"]
                break
            except KeyError:
                continue

        if not node and not args.force:
            raise GenericError("**M√°y ch·ªß c·ª•c b·ªô kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng!**")

        download_urls = [self.bot.config["LAVALINK_FILE_URL"]]

        if args.yml:
            download_urls.append("https://github.com/zRitsu/LL-binaries/releases/download/0.0.1/application.yml")

        async with ctx.typing():

            for url in download_urls:
                async with ClientSession() as session:
                    async with session.get(url) as r:
                        lavalink_jar = await r.read()
                        with open(url.split("/")[-1], "wb") as f:
                            f.write(lavalink_jar)

        if node:

            for bot in self.bot.pool.bots:

                try:
                    node = bot.music.nodes["LOCAL"]
                except KeyError:
                    continue

                node.restarting = True

                for player in node.players.values():

                    txt = "M√°y ch·ªß √¢m nh·∫°c ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông l·∫°i v√† √¢m nh·∫°c s·∫Ω ti·∫øp t·ª•c trong v√†i gi√¢y (vui l√≤ng ch·ªù ƒë·ª£i)..."

                    if args.resetids:

                        if player.current:
                            player.queue.appendleft(player.current)
                            player.current = None

                        for t in player.queue:
                            t.id = ""

                        for t in player.played:
                            t.id = ""

                    if player.static or player.controller_mode:
                        player.set_command_log(text=txt, emoji="üõ†Ô∏è")
                        bot.loop.create_task(player.invoke_np(force=True))
                    else:
                        bot.loop.create_task(
                            player.text_channel.send(
                                embed=disnake.Embed(
                                    color=self.bot.get_color(player.guild.me),
                                    description=f"üõ†Ô∏è **‚†Ç{txt}**"
                                )
                            )
                        )

        self.bot.pool.start_lavalink()

        await ctx.send(
            embed=disnake.Embed(
                description="**T·ªáp Lavalink.jar ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!**",
                color=self.bot.get_color(ctx.guild.me)
            )
        )

    @commands.is_owner()
    @panel_command(aliases=["rd", "recarregar"], description="T·∫£i l·∫°i c√°c module.", emoji="üîÑ",
                   alt_name="T·∫£i l·∫°i th∆∞ m·ª•c module.")
    async def reload(self, ctx: Union[CustomContext, disnake.MessageInteraction]):

        data = self.bot.load_modules()

        await self.bot.sync_app_commands()

        for bot in self.bot.pool.bots:

            if bot.user.id != self.bot.user.id:
                bot.load_modules()
                await bot.sync_app_commands()

        self.bot.sync_command_cooldowns()

        txt = ""

        if data["loaded"]:
            txt += f'**T·∫£i l√™n module** ```ansi\n[0;34m{" [0;37m| [0;34m".join(data["loaded"])}```\n'

        if data["reloaded"]:
            txt += f'**T·∫£i l·∫°i c√°c module:** ```ansi\n[0;32m{" [0;37m| [0;32m".join(data["reloaded"])}```\n'

        if not txt:
            txt = "**Kh√¥ng t√¨m th·∫•y module...**"

        self.bot.pool.config = load_config()

        gc.collect()

        if isinstance(ctx, CustomContext):
            embed = disnake.Embed(colour=self.bot.get_color(ctx.me), description=txt)
            await ctx.send(embed=embed, view=self.owner_view)
        else:
            return txt

    update_flags = CommandArgparse()
    update_flags.add_argument("-force", "--force", action="store_true",
                              help="Bu·ªôc c·∫≠p nh·∫≠t b·ªè qua tr·∫°ng th√°i c·ªßa kho l∆∞u tr·ªØ c·ª•c b·ªô).")
    update_flags.add_argument("-pip", "--pip", action="store_true",
                              help="C√†i ƒë·∫∑t/C·∫≠p nh·∫≠t ph·ª• thu·ªôc sau khi c·∫≠p nh·∫≠t.")

    @commands.is_owner()
    @commands.max_concurrency(1, commands.BucketType.default)
    @panel_command(aliases=["up", "atualizar"], description="C·∫≠p nh·∫≠t m√£ c·ªßa t√¥i b·∫±ng Git.",
                   emoji="<:git:944873798166020116>", alt_name="C·∫≠p nh·∫≠t bot", extras={"flags": update_flags})
    async def update(self, ctx: Union[CustomContext, disnake.MessageInteraction], *,
                     opts: str = ""):  # TODO: Rever se h√° alguma forma de usar commands.Flag sem um argumento obrigat√≥rio, ex: --pip.

        out_git = ""

        git_log = []

        if shutil.which("poetry"):
            file = "./pyproject.toml"
            use_poetry = True
        else:
            file = "./requirements.txt"
            use_poetry = False

        requirements_old = ""
        try:
            with open(file) as f:
                requirements_old = f.read()
        except:
            pass

        args, unknown = self.bot.get_command("update").extras['flags'].parse_known_args(opts.split())

        if not os.path.isdir("./.git") or args.force:

            out_git += await self.cleanup_git(force=args.force)

        else:

            try:
                await ctx.response.defer()
            except:
                pass

            try:
                await run_command("git reset --hard")
            except:
                pass

            try:
                pull_log = await run_command("git pull --allow-unrelated-histories -X theirs")
                if "Already up to date" in pull_log:
                    raise GenericError("**T√¥i ƒë√£ c√†i ƒë·∫∑t c√°c b·∫£n c·∫≠p nh·∫≠t cu·ªëi c√πng...**")
                out_git += pull_log

            except GenericError as e:
                raise e

            except Exception as e:

                if "Already up to date" in str(e):
                    raise GenericError("T√¥i ƒë√£ c√†i ƒë·∫∑t c√°c b·∫£n c·∫≠p nh·∫≠t cu·ªëi c√πng...")

                elif not "Fast-forward" in str(e):
                    out_git += await self.cleanup_git(force=True)

            commit = ""

            for l in out_git.split("\n"):
                if l.startswith("Updating"):
                    commit = l.replace("Updating ", "").replace("..", "...")
                    break

            data = (await run_command(f"git log {commit} {self.git_format}")).split("\n")

            git_log += format_git_log(data)

        text = "`B·∫°n s·∫Ω c·∫ßn ph·∫£i kh·ªüi ƒë·ªông l·∫°i sau khi thay ƒë·ªïi.`"

        txt = f"`‚úÖ` **[C·∫≠p nh·∫≠t th√†nh c√¥ng!]({self.bot.pool.remote_git_url}/commits/main)**"

        if git_log:
            txt += f"\n\n{self.format_log(git_log[:10])}"

        txt += f"\n\n`üìÑ` **Log:** ```py\n{out_git[:1000].split('Fast-forward')[-1]}```\n{text}"

        if isinstance(ctx, CustomContext):
            embed = disnake.Embed(
                description=txt,
                color=self.bot.get_color(ctx.guild.me)
            )
            await ctx.send(embed=embed, view=self.owner_view)

            self.bot.loop.create_task(self.update_deps(ctx, requirements_old, args, use_poetry=use_poetry))

        else:
            self.bot.loop.create_task(self.update_deps(ctx, requirements_old, args, use_poetry=use_poetry))
            return txt

    async def update_deps(self, ctx, original_reqs, args, use_poetry=False):

        if use_poetry:
            cmd = "poetry install"
            file = "./pyproject.toml"
        else:
            cmd = "pip3 install -U -r requirements.txt --no-cache-dir"
            file = "./requirements.txt"

        if args.pip:

            embed = disnake.Embed(
                description="**C√†i ƒë·∫∑t c√°c c∆° s·ªü.\nVui l√≤ng ch·ªù...**",
                color=self.bot.get_color(ctx.guild.me)
            )

            msg = await ctx.channel.send(embed=embed)

            await run_command(cmd)

            embed.description = "**C√°c c∆° s·ªü ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng!**"

            await msg.edit(embed=embed)

        else:

            with open(file) as f:
                requirements_new = f.read()

            if original_reqs != requirements_new:

                txt = ""

                if venv:=os.getenv("VIRTUAL_ENV"):
                    if os.name == "nt":
                        txt += "call " + venv.split('\\')[-1] + " && "
                    else:
                        txt += ". ./" + venv.split('/')[-1] + " && "

                try:
                    prefix = ctx.prefix if (not str(ctx.guild.me.id) in ctx.prefix) else f"@{ctx.guild.me.name}"
                except AttributeError:
                    prefix = self.bot.default_prefix if self.bot.intents.message_content else f"@{ctx.guild.me.name}"

                await ctx.send(
                    embed=disnake.Embed(
                        description="**N√≥ s·∫Ω l√† c·∫ßn thi·∫øt ƒë·ªÉ c·∫≠p nh·∫≠t c√°c ph·ª• thu·ªôc b·∫±ng c√°ch s·ª≠ d·ª•ng l·ªánh "
                                    "D∆∞·ªõi ƒë√¢y tr√™n terminal/shell:**\n"
                                    f"```sh\n{txt}{cmd}```\nho·∫∑c s·ª≠ d·ª•ng l·ªánh: "
                                    f"```ansi\n[34;1m{prefix}update --force --pip[0m``` \n"
                                    f"**L∆∞u √Ω: ** T√πy thu·ªôc v√†o l∆∞u tr·ªØ (ho·∫∑c kh√¥ng 150MB RAM mi·ªÖn ph√≠ "
                                    f"e 0.5vCPU) vB·∫°n ph·∫£i g·ª≠i t·ªáp y√™u c·∫ßu.txt thay v√¨ "
                                    f"S·ª≠ d·ª•ng m·ªôt trong c√°c t√πy ch·ªçn tr√™n ho·∫∑c c√°c n√∫t c√†i ƒë·∫∑t b√™n d∆∞·ªõi...",
                        color=self.bot.get_color(ctx.guild.me)
                    ),
                    components=[
                        disnake.ui.Button(label="Download requirements.txt", custom_id="updatecmd_requirements"),
                        disnake.ui.Button(label="C·∫≠p nh·∫≠t ph·ª• thu·ªôc",
                                          custom_id="updatecmd_installdeps_" + ("poetry" if use_poetry else "pip")),
                        disnake.ui.Button(label="C·∫≠p nh·∫≠t ph·ª• thu·ªôc (l·ª±c l∆∞·ª£ng)",
                                          custom_id="updatecmd_installdeps_force_" + ("poetry" if use_poetry else "pip")),
                    ]
                )

    @commands.Cog.listener("on_button_click")
    async def update_buttons(self, inter: disnake.MessageInteraction):

        if not inter.data.custom_id.startswith("updatecmd_"):
            return

        if inter.data.custom_id.startswith("updatecmd_requirements"):

            try:
                os.remove('./update_reqs.zip')
            except FileNotFoundError:
                pass

            with ZipFile('update_reqs.zip', 'w') as zipObj:
                zipObj.write("requirements.txt")

            await inter.send(
                embed=disnake.Embed(
                    description="**T·∫£i xu·ªëng t·ªáp ƒë√≠nh k√®m v√† g·ª≠i n√≥ ƒë·∫øn l∆∞u tr·ªØ c·ªßa b·∫°n th√¥ng qua cam k·∫øt, v.v.**",
                    color=self.bot.get_color(inter.guild.me)
                ),
                file=disnake.File("update_reqs.zip")
            )

            os.remove("update_reqs.zip")
            return

        # install installdeps

        if inter.data.custom_id.startswith("updatecmd_installdeps_force_"):
            await self.cleanup_git(force=True)

        await inter.message.delete()
        await self.update_deps(inter, "", "--pip", use_poetry=inter.data.custom_id.endswith("_poetry"))

    async def cleanup_git(self, force=False):

        if force:
            try:
                shutil.rmtree("./.git")
            except FileNotFoundError:
                pass

        out_git = ""

        for c in self.git_init_cmds:
            try:
                out_git += (await run_command(c)) + "\n"
            except Exception as e:
                out_git += f"{e}\n"

        self.bot.pool.commit = (await run_command("git rev-parse HEAD")).strip("\n")
        self.bot.pool.remote_git_url = self.bot.config["SOURCE_REPO"][:-4]

        return out_git

    @commands.max_concurrency(1, commands.BucketType.guild)
    @commands.cooldown(1, 10, commands.BucketType.user)
    @panel_command(aliases=["latest", "lastupdate"], description="Xem c√°c b·∫£n c·∫≠p nh·∫≠t m·ªõi nh·∫•t c·ªßa t√¥i.", emoji="üìà",
                   alt_name="C·∫≠p nh·∫≠t cu·ªëi c√πng", hidden=False)
    async def updatelog(self, ctx: Union[CustomContext, disnake.MessageInteraction], amount: int = 10):

        if not os.path.isdir("./.git"):
            raise GenericError("Kh√¥ng c√≥ s·ª± thay th·∫ø b·∫Øt ƒë·∫ßu trong th∆∞ m·ª•c bot...\nL∆∞u √Ω: S·ª≠ d·ª•ng l·ªánh c·∫≠p nh·∫≠t.")

        if not self.bot.pool.remote_git_url:
            self.bot.pool.remote_git_url = self.bot.config["SOURCE_REPO"][:-4]

        git_log = []

        data = (await run_command(f"git log -{amount or 10} {self.git_format}")).split("\n")

        git_log += format_git_log(data)

        txt = f"üî∞ ** | [C·∫≠p nh·∫≠t g·∫ßn ƒë√¢y:]({self.bot.pool.remote_git_url}/commits/main)**\n\n" + self.format_log(
            git_log)

        if isinstance(ctx, CustomContext):

            embed = disnake.Embed(
                description=txt,
                color=self.bot.get_color(ctx.guild.me)
            )

            await ctx.send(embed=embed, view=self.owner_view if (await self.bot.is_owner(ctx.author)) else None)

        else:
            return txt

    @commands.is_owner()
    @commands.command(hidden=True, aliases=["menu"])
    async def panel(self, ctx: CustomContext):

        embed =disnake.Embed(
            title="B·∫¢NG ƒêI·ªÄU KHI·ªÇN.",
            color=self.bot.get_color(ctx.guild.me)
        )
        embed.set_footer(text="Nh·∫•p v√†o m·ªôt nhi·ªám v·ª• b·∫°n mu·ªën th·ª±c hi·ªán.")
        await ctx.send(embed=embed, view=PanelView(self.bot))

    @commands.has_guild_permissions(manage_guild=True)
    @commands.command(description="ƒê·ªìng b·ªô h√≥a/ƒëƒÉng k√Ω l·ªánh thanh tr√™n m√°y ch·ªß.", hidden=True)
    async def syncguild(self, ctx: Union[CustomContext, disnake.MessageInteraction]):

        embed = disnake.Embed(
            color=self.bot.get_color(ctx.guild.me),
            description="**L·ªánh n√†y kh√¥ng c√≤n c·∫ßn thi·∫øt ƒë·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng (vi·ªác ƒë·ªìng b·ªô h√≥a c√°c l·ªánh b√¢y gi·ªù "
                        f"N√≥ l√† t·ª± ƒë·ªông).**\n\n{sync_message(self.bot)}"
        )

        await ctx.send(embed=embed)

    @commands.is_owner()
    @panel_command(aliases=["sync"], description="ƒê·ªìng b·ªô h√≥a c√°c l·ªánh thanh theo c√°ch th·ªß c√¥ng. ",
                   emoji="<:slash:944875586839527444>",
                   alt_name="ƒê·ªìng b·ªô h√≥a c√°c l·ªánh b·∫±ng tay.")
    async def synccmds(self, ctx: Union[CustomContext, disnake.MessageInteraction]):

        if self.bot.config["AUTO_SYNC_COMMANDS"] is True:
            raise GenericError(
                f"**ƒêi·ªÅu n√†y kh√¥ng th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng v·ªõi ƒë·ªìng b·ªô h√≥a t·ª± ƒë·ªông ƒë∆∞·ª£c k√≠ch ho·∫°t...**\n\n{sync_message(self.bot)}")

        await self.bot._sync_application_commands()

        txt = f"**C√°c l·ªánh thanh ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô h√≥a th√†nh c√¥ng!**\n\n{sync_message(self.bot)}"

        if isinstance(ctx, CustomContext):

            embed = disnake.Embed(
                color=self.bot.get_color(ctx.guild.me),
                description=txt
            )

            await ctx.send(embed=embed, view=self.owner_view)

        else:
            return txt

    @commands.has_guild_permissions(manage_guild=True)
    @commands.cooldown(1, 10, commands.BucketType.guild)
    @commands.command(
        aliases=["mudarprefixo", "prefix", "changeprefix"],
        description="Thay ƒë·ªïi ti·ªÅn t·ªë m√°y ch·ªß",
        usage="{prefix}{cmd} [prefixo]\nEx: {prefix}{cmd} >>"
    )
    async def setprefix(self, ctx: CustomContext, prefix: str):

        if " " in prefix or len(prefix) > 5:
            raise GenericError("**Ti·ªÅn t·ªë kh√¥ng th·ªÉ ch·ª©a kho·∫£ng tr·∫Øng ho·∫∑c c√≥ tr√™n 5 k√Ω t·ª±.**")

        try:
            guild_data = ctx.global_guild_data
        except AttributeError:
            guild_data = await self.bot.get_global_data(ctx.guild.id, db_name=DBModel.guilds)
            ctx.global_guild_data = guild_data

        guild_data["prefix"] = prefix
        await self.bot.update_global_data(ctx.guild.id, guild_data, db_name=DBModel.guilds)

        prefix = disnake.utils.escape_markdown(prefix)

        embed = disnake.Embed(
            description=f"**Ti·ªÅn t·ªë c·ªßa m√°y ch·ªß n√†y b√¢y gi·ªù l√†:** `{prefix}`\n"
                        f"**N·∫øu b·∫°n mu·ªën kh√¥i ph·ª•c ti·ªÅn t·ªë m·∫∑c ƒë·ªãnh, h√£y s·ª≠ d·ª•ng l·ªánh:** `{prefix}{self.resetprefix.name}`",
            color=self.bot.get_color(ctx.guild.me)
        )

        await ctx.send(embed=embed)

    @commands.has_guild_permissions(manage_guild=True)
    @commands.cooldown(1, 10, commands.BucketType.guild)
    @commands.command(
        description="ƒê·∫∑t l·∫°i ti·ªÅn t·ªë m√°y ch·ªß (s·ª≠ d·ª•ng ti·ªÅn t·ªë bot m·∫∑c ƒë·ªãnh)"
    )
    async def resetprefix(self, ctx: CustomContext):

        try:
            guild_data = ctx.global_guild_data
        except AttributeError:
            guild_data = await self.bot.get_global_data(ctx.guild.id, db_name=DBModel.guilds)
            ctx.global_guild_data = guild_data

        if not guild_data["prefix"]:
            raise GenericError("**Kh√¥ng c√≥ ti·ªÅn t·ªë ƒë∆∞·ª£c ƒë·ªãnh c·∫•u h√¨nh tr√™n m√°y ch·ªß.**")

        guild_data["prefix"] = ""

        await self.bot.update_global_data(ctx.guild.id, guild_data, db_name=DBModel.guilds)

        embed = disnake.Embed(
            description=f"**Ti·ªÅn t·ªë m√°y ch·ªß ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng.\n"
                        f"Ti·ªÅn t·ªë ti√™u chu·∫©n b√¢y gi·ªù l√†:** `{disnake.utils.escape_markdown(self.bot.default_prefix)}`",
            color=self.bot.get_color(ctx.guild.me)
        )

        await ctx.send(embed=embed)

    @commands.cooldown(1, 10, commands.BucketType.guild)
    @commands.command(
        aliases=["uprefix", "spu", "setmyprefix", "spm", "setcustomprefix", "scp", "customprefix", "myprefix"],
        description="Thay ƒë·ªïi ti·ªÅn t·ªë ng∆∞·ªùi d√πng c·ªßa b·∫°n (ti·ªÅn t·ªë m√† t√¥i s·∫Ω tr·∫£ l·ªùi b·∫°n ƒë·ªôc l·∫≠p "
                    "v·ªõi ti·ªÅn t·ªë ƒë∆∞·ª£c ƒë·ªãnh c·∫•u h√¨nh tr√™n m√°y ch·ªß).",
        usage="{prefix}{cmd} [prefixo]\nEx: {prefix}{cmd} >>"
    )
    async def setuserprefix(self, ctx: CustomContext, prefix: str):

        if " " in prefix or len(prefix) > 5:
            raise GenericError("**Ti·ªÅn t·ªë kh√¥ng th·ªÉ ch·ª©a kho·∫£ng tr·∫Øng ho·∫∑c c√≥ tr√™n 5 k√Ω t·ª±.**")

        try:
            user_data = ctx.global_user_data
        except AttributeError:
            user_data = await self.bot.get_global_data(ctx.author.id, db_name=DBModel.users)
            ctx.global_user_data = user_data

        user_data["custom_prefix"] = prefix
        self.bot.pool.user_prefix_cache[ctx.author.id] = prefix
        await self.bot.update_global_data(ctx.author.id, user_data, db_name=DBModel.users)

        prefix = disnake.utils.escape_markdown(prefix)

        embed = disnake.Embed(
            description=f"**Ti·ªÅn t·ªë ng∆∞·ªùi d√πng c·ªßa b·∫°n b√¢y gi·ªù l√†:** `{prefix}`\n"
                        f"**N·∫øu b·∫°n mu·ªën x√≥a ti·ªÅn t·ªë ng∆∞·ªùi d√πng c·ªßa m√¨nh, h√£y s·ª≠ d·ª•ng l·ªánh:** `{prefix}{self.resetuserprefix.name}`",
            color=self.bot.get_color(ctx.guild.me)
        )

        await ctx.send(embed=embed)

    @commands.cooldown(1, 10, commands.BucketType.guild)
    @commands.command(description="X√≥a ti·ªÅn t·ªë ng∆∞·ªùi d√πng c·ªßa b·∫°n")
    async def resetuserprefix(self, ctx: CustomContext):

        try:
            user_data = ctx.global_user_data
        except AttributeError:
            user_data = await self.bot.get_global_data(ctx.author.id, db_name=DBModel.users)
            ctx.global_user_data = user_data

        if not user_data["custom_prefix"]:
            raise GenericError("**B·∫°n kh√¥ng c√≥ m·ªôt c·∫•u h√¨nh ti·ªÅn t·ªë. ** ")
        user_data["custom_prefix"] = ""
        self.bot.pool.user_prefix_cache[ctx.author.id] = ""
        await self.bot.update_global_data(ctx.author.id, user_data, db_name=DBModel.users)

        embed = disnake.Embed(
            description=f"**Ti·ªÅn t·ªë ng∆∞·ªùi d√πng c·ªßa b·∫°n ƒë√£ b·ªã x√≥a th√†nh c√¥ng.**",
            color=self.bot.get_color(ctx.guild.me)
        )

        await ctx.send(embed=embed)

    @commands.is_owner()
    @commands.command(
        aliases=["guildprefix", "sgp", "gp"], hidden=True,
        description="ƒê·∫∑t ti·ªÅn t·ªë theo c√°ch th·ªß c√¥ng cho m√°y ch·ªß v·ªõi ID th√¥ng tin (h·ªØu √≠ch cho danh s√°ch th·ª±c v·∫≠t)",
        usage="{prefix}{cmd} [server id] <prefixo>\nEx: {prefix}{cmd} 1155223334455667788 >>\nL∆∞u √Ω: S·ª≠ d·ª•ng l·ªánh m√† kh√¥ng c·∫ßn ch·ªâ ƒë·ªãnh ti·ªÅn t·ªë ƒë·ªÉ x√≥a n√≥."
    )
    async def setguildprefix(self, ctx: CustomContext, server_id: int, prefix: str = None):

        if not 17 < len(str(server_id)) < 24:
            raise GenericError("**L∆∞·ª£ng k√Ω t·ª± ID m√°y ch·ªß ph·∫£i n·∫±m trong kho·∫£ng t·ª´ 18 ƒë·∫øn 23.**")

        guild_data = await self.bot.get_global_data(server_id, db_name=DBModel.guilds)

        embed = disnake.Embed(color=self.bot.get_color(ctx.guild.me))

        if not prefix:
            guild_data["prefix"] = ""
            await ctx.bot.update_global_data(server_id, guild_data, db_name=DBModel.guilds)
            embed.description = "**Ti·ªÅn t·ªë s·ªõm c·ªßa m√°y ch·ªß v·ªõi ID ƒë∆∞·ª£c th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p l·∫°i th√†nh c√¥ng.**"

        else:
            guild_data["prefix"] = prefix
            await self.bot.update_global_data(server_id, guild_data, db_name=DBModel.guilds)
            embed.description = f"**Ti·ªÅn t·ªë cho m√°y ch·ªß c√≥ ID ƒë∆∞·ª£c th√¥ng b√°o b√¢y gi·ªù l√†:** {disnake.utils.escape_markdown(prefix)}"

        await ctx.send(embed=embed)

    @commands.is_owner()
    @panel_command(aliases=["expsource", "export", "exs"],
                   description="Xu·∫•t ngu·ªìn c·ªßa t√¥i sang t·ªáp zip.", emoji="üíæ",
                   alt_name="Xu·∫•t m√£ ngu·ªìn/ngu·ªìn.")
    async def exportsource(self, ctx:Union[CustomContext, disnake.MessageInteraction], *, flags: str = ""):

        if not os.path.isdir("./.git"):
            await self.cleanup_git(force=True)

        try:
            env_file = dotenv.dotenv_values("./.env")
        except:
            env_file = {}

        try:
            with open("config.json") as f:
                config_json = json.load(f)
        except FileNotFoundError:
            config_json = {}

        SECRETS = dict(DEFAULT_CONFIG)
        SECRETS.update({"TOKEN": ""})

        for env, value in os.environ.items():
            if (e:=env.lower()).startswith(("token_bot_", "test_guilds_", "lavalink_node_")) or e == "token":
                SECRETS[env] = os.environ[env]
                continue

            if not isinstance(value, str):
                continue

            tokens = []

            for string in value.split():
                if re.findall(token_regex, value) and len(string) < 91:
                    tokens.append(string)

            if tokens:
                SECRETS[env] = value

        for i in SECRETS:
            try:
                SECRETS[i] = os.environ[i]
            except KeyError:
                continue

        SECRETS.update(config_json)
        SECRETS.update(env_file)

        if any(f in flags.lower() for f in ("-autodll", "--autodll")):
            SECRETS["AUTO_DOWNLOAD_LAVALINK_SERVERLIST"] = True

        if any(f in flags.lower() for f in ("--externalservers", "-externalservers", "--llservers", "-llservers", "--lls", "-lls")):
            await self.download_lavalink_serverlist()

        if not os.path.isfile("./.env-temp"):
            shutil.copyfile("./.example.env", "./.env-temp")

        for i in SECRETS:
            if not isinstance(SECRETS[i], str):
                SECRETS[i] = str(SECRETS[i]).lower()
            dotenv.set_key("./.env-temp", i, SECRETS[i])

        filelist = await run_command("git ls-files --others --exclude-standard --cached")

        if any(f in flags.lower() for f in ("--extradirs", "-extradirs", "--ed", "-ed", "--extrafiles", "-extrafiles", "--ef", "-ef")):
            for extra_dir in self.extra_dirs:
                for dir_path, dir_names, filenames in os.walk(extra_dir):
                    filelist += "\n" + "\n".join(os.path.join(dir_path, file) for file in filenames)

            for file in self.extra_files:
                if os.path.isfile(file):
                    filelist += "\n" + file

        for file in self.additional_files:
            if os.path.isfile(file):
                filelist += "\n" + file

        await self.bot.loop.run_in_executor(None, self.zip_dir, filelist.split("\n"))

        os.remove("./.env-temp")

        try:
            embed = disnake.Embed(
                description="**Kh√¥ng g·ª≠i t·ªáp Source.zip ho·∫∑c t·ªáp .ENV cho b·∫•t k·ª≥ ai v√† r·∫•t c·∫©n th·∫≠n khi ƒëƒÉng "
                            "c√°c n·ªôi dung trong t·ªáp .env v√† kh√¥ng th√™m t·ªáp n√†y ·ªü nh·ªØng n∆°i c√¥ng c·ªông nh∆∞ "
                            "github, repl.it, glitch.com,..v.v.**",
                color=self.bot.get_color(ctx.guild.me))
            embed.set_footer(text="ƒê·ªÉ an to√†n, th√¥ng b√°o n√†y s·∫Ω b·ªã x√≥a trong 2 ph√∫t.")

            msg = await ctx.author.send(
                embed=embed,
                file=disnake.File("./source.zip", filename=f"{self.bot.user}_source.zip"),
                delete_after=120
            )

            os.remove("./source.zip")

        except disnake.Forbidden:
            os.remove("./source.zip")
            raise GenericError("DM c·ªßa b·∫°n b·ªã v√¥ hi·ªáu h√≥a!")

        if isinstance(ctx, CustomContext):
            await ctx.send(
                embed=disnake.Embed(
                    description=f"**T·ªáp [Source.zip]({msg.jump_url}) N√≥ ƒë√£ ƒë∆∞·ª£c g·ª≠i trong ri√™ng t∆∞ c·ªßa b·∫°n.**",
                    color=self.bot.get_color(ctx.guild.me)
                )
            )
        else:
            return f"T·ªáp [Source.zip]({msg.jump_url}) ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng trong DM c·ªßa b·∫°n."

    def zip_dir(self, filelist: list):

        try:
            os.remove("./source.zip")
        except:
            pass

        with ZipFile("./source.zip", 'a') as zipf:

            for f in filelist:
                if not f:
                    continue
                try:
                    if f == ".env-temp":
                        zipf.write('./.env-temp', './.env')
                    else:
                        zipf.write(f"./{f}")
                except FileNotFoundError:
                    continue

    @commands.is_owner()
    @commands.command(hidden=True)
    async def cleardm(self, ctx: CustomContext, amount: int = 20):

        counter = 0

        async with ctx.typing():

            async for msg in ctx.author.history(limit=int(amount)):
                if msg.author.id == self.bot.user.id:
                    await msg.delete()
                    await asyncio.sleep(0.5)
                    counter += 1

        if not counter:
            raise GenericError(f"**Kh√¥ng c√≥ tin nh·∫Øn n√†o b·ªã x√≥a kh·ªèi {amount} ƒê∆∞·ª£c x√°c minh (c√°c)...**")

        if counter == 1:
            txt = "**M·ªôt tin nh·∫Øn ƒë√£ b·ªã x√≥a kh·ªèi DM c·ªßa b·∫°n.**"
        else:
            txt = f"**{counter} Tin nh·∫Øn ƒë√£ b·ªã x√≥a kh·ªèi DM c·ªßa b·∫°n.**"

        await ctx.send(embed=disnake.Embed(description=txt, colour=self.bot.get_color(ctx.guild.me)))

    @commands.Cog.listener("on_button_click")
    async def close_shell_result(self, inter: disnake.MessageInteraction):

        if inter.data.custom_id != "close_shell_result":
            return

        if not await self.bot.is_owner(inter.author):
            return await inter.send("**Ch·ªâ ch·ªß s·ªü h·ªØu c·ªßa t√¥i m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng n√∫t n√†y!**", ephemeral=True)

        await inter.response.edit_message(
            content="```ini\nüîí - [Shell ƒê√≥ng!] - üîí```",
            attachments=None,
            view=None,
            embed=None
        )

    @commands.is_owner()
    @commands.command(aliases=["sh"], hidden=True)
    async def shell(self, ctx: CustomContext, *, command: str):

        if command.startswith('```') and command.endswith('```'):
            if command[4] != "\n":
                command = f"```\n{command[3:]}"
            if command[:-4] != "\n":
                command = command[:-3] + "\n```"
            command = '\n'.join(command.split('\n')[1:-1])
        else:
            command = command.strip('` \n')

        try:
            async with ctx.typing():
                result = await run_command(command)
        except GenericError as e:
            kwargs = {}
            if len(e.text) > 2000:
                kwargs["file"] = string_to_file(e.text, filename="error.txt")
            else:
                kwargs["content"] = f"```py\n{e.text}```"

            try:
                await ctx.author.send(**kwargs)
                await ctx.message.add_reaction("‚ö†Ô∏è")
            except disnake.Forbidden:
                traceback.print_exc()
                raise GenericError(
                    "**ƒê√£ x·∫£y ra l·ªói (ki·ªÉm tra nh·∫≠t k√Ω/thi·∫øt b·ªã ƒë·∫ßu cu·ªëi ho·∫∑c ph√°t h√†nh DM c·ªßa b·∫°n sang l·∫ßn ti·∫øp theo "
                    "K·∫øt qu·∫£ ƒë∆∞·ª£c g·ª≠i tr·ª±c ti·∫øp ƒë·∫øn DM c·ªßa b·∫°n).**"
                )

        else:

            kwargs = {}
            if len(result) > 2000:
                kwargs["file"] = string_to_file(result, filename=f"shell_result_{ctx.message.id}.txt")
            else:
                kwargs["content"] = f"```py\n{result}```"

            await ctx.reply(
                components=[
                    disnake.ui.Button(label="ƒê√≥ng Shell", custom_id="close_shell_result", emoji="‚ôªÔ∏è")
                ],
                mention_author=False,
                **kwargs
            )

    @check_voice()
    @commands.cooldown(1, 15, commands.BucketType.guild)
    @commands.command(description='Kh·ªüi ƒë·ªông m·ªôt ng∆∞·ªùi ch∆°i tr√™n m√°y ch·ªß.', aliases=["spawn", "sp", "spw", "smn"])
    async def summon(self, ctx: CustomContext):

        try:
            self.bot.music.players[ctx.guild.id]  # type ignore
            raise GenericError("**ƒê√£ c√≥ m·ªôt ng∆∞·ªùi ch∆°i b·∫Øt ƒë·∫ßu tr√™n m√°y ch·ªß.**")
        except KeyError:
            pass

        node: wavelink.Node = self.bot.music.get_best_node()

        if not node:
            raise GenericError("**Kh√¥ng c√≥ m√°y ch·ªß √¢m nh·∫°c c√≥ s·∫µn!**")

        try:
            guild_data = ctx.guild_data
        except AttributeError:
            guild_data = await self.bot.get_data(ctx.guild.id, db_name=DBModel.guilds)
            ctx.guild_data = guild_data

        try:
            global_data = ctx.global_guild_data
        except AttributeError:
            global_data = await self.bot.get_global_data(ctx.guild.id, db_name=DBModel.guilds)
            ctx.global_guild_data = global_data

        static_player = guild_data['player_controller']

        skin = guild_data["player_controller"]["skin"]
        static_skin = guild_data["player_controller"]["static_skin"]

        if global_data["global_skin"]:
            skin = global_data["player_skin"] or skin
            static_skin = global_data["player_skin_static"] or guild_data["player_controller"]["static_skin"]

        try:
            channel = self.bot.get_channel(int(static_player['channel'])) or await self.bot.fetch_channel(int(static_player['channel'])) or ctx.channel
        except (KeyError, TypeError, disnake.NotFound):
            channel = ctx.channel
            message = None
            static_player = False
        else:
            try:
                message = await channel.fetch_message(int(static_player.get('message_id')))
            except (TypeError, disnake.NotFound):
                message = None
            static_player = True

        try:
            invite = global_data["listen_along_invites"][str(ctx.channel.id)]
        except KeyError:
            invite = None

        else:
            if not await self.bot.fetch_invite(invite):
                invite = None
                del global_data["listen_along_invites"][str(ctx.channel.id)]
                await self.bot.update_global_data(ctx.guild_id, global_data, db_name=DBModel.guilds)

        player: LavalinkPlayer = self.bot.music.get_player(
            guild_id=ctx.guild_id,
            cls=LavalinkPlayer,
            player_creator=ctx.author.id,
            guild=ctx.guild,
            channel=channel or ctx.channel,
            last_message_id=guild_data['player_controller']['message_id'],
            node_id=node.identifier,
            static=static_player,
            skin=self.bot.check_skin(skin),
            custom_skin_data=global_data["custom_skins"],
            custom_skin_static_data=global_data["custom_skins_static"],
            skin_static=self.bot.check_static_skin(static_skin),
            extra_hints=self.extra_hints,
            restrict_mode=guild_data['enable_restrict_mode'],
            listen_along_invite=invite,
            volume=int(guild_data['default_player_volume']),
            autoplay=guild_data["autoplay"]
        )

        player.message = message

        channel = ctx.author.voice.channel

        await player.connect(channel.id)

        self.bot.loop.create_task(ctx.message.add_reaction("üëç"))

        while not ctx.guild.me.voice:
            await asyncio.sleep(1)

        if isinstance(channel, disnake.StageChannel):

            stage_perms = channel.permissions_for(ctx.guild.me)
            if stage_perms.manage_permissions:
                await ctx.guild.me.edit(suppress=False)

            await asyncio.sleep(1.5)

        await player.process_next()

    async def cog_check(self, ctx: CustomContext) -> bool:
        return await check_requester_channel(ctx)

    async def cog_load(self) -> None:
        self.owner_view = PanelView(self.bot)

    async def download_lavalink_serverlist(self):
        async with ClientSession() as session:
            async with session.get(self.bot.config["LAVALINK_SERVER_LIST"]) as r:
                ini_file = await r.read()
                with open("lavalink.ini", "wb") as f:
                    f.write(ini_file)


def setup(bot: BotCore):
    bot.add_cog(Owner(bot))
