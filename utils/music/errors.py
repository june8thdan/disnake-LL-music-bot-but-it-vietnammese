# -*- coding: utf-8 -*-
import os
import traceback
from typing import Union, Optional

import disnake
from disnake.ext import commands
from disnake.utils import escape_mentions
from pymongo.errors import ServerSelectionTimeoutError

from utils.music.converters import time_format, perms_translations
from wavelink import WavelinkException, TrackNotFound


class PoolException(commands.CheckFailure):
    pass

class ArgumentParsingError(commands.CommandError):
    def __init__(self, message):
        super().__init__(escape_mentions(message))

class GenericError(commands.CheckFailure):

    def __init__(self, text: str, *, self_delete: int = None, delete_original: Optional[int] = None):
        self.text = text
        self.self_delete = self_delete
        self.delete_original = delete_original


class EmptyFavIntegration(commands.CheckFailure):
    pass

class MissingSpotifyClient(commands.CheckFailure):
    pass


class NoPlayer(commands.CheckFailure):
    pass


class NoVoice(commands.CheckFailure):
    pass


class MissingVoicePerms(commands.CheckFailure):

    def __init__(self, voice_channel: Union[disnake.VoiceChannel, disnake.StageChannel]):
        self.voice_channel = voice_channel


class DiffVoiceChannel(commands.CheckFailure):
    pass


class NoSource(commands.CheckFailure):
    pass


class NotDJorStaff(commands.CheckFailure):
    pass


class NotRequester(commands.CheckFailure):
    pass


def parse_error(
        ctx: Union[disnake.ApplicationCommandInteraction, commands.Context, disnake.MessageInteraction],
        error: Exception
):

    error_txt = None

    kill_process = False

    components = []

    error = getattr(error, 'original', error)

    if isinstance(error, NotDJorStaff):
        error_txt = "**B·∫°n ph·∫£i n·∫±m trong danh s√°ch DJ ho·∫∑c ƒë∆∞·ª£c ph√©p qu·∫£n l√Ω c√°c k√™nh ** " \
                    "ƒê·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.**"

    elif isinstance(error, MissingVoicePerms):
        error_txt = f"**T√¥i kh√¥ng ƒë∆∞·ª£c ph√©p k·∫øt n·ªëi/n√≥i chuy·ªán v·ªõi k√™nh:** {error.voice_channel.mention}"

    elif isinstance(error, commands.NotOwner):
        error_txt = "**Ch·ªâ nh√† ph√°t tri·ªÉn c·ªßa t√¥i m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y**"

    elif isinstance(error, commands.BotMissingPermissions):
        error_txt = "T√¥i kh√¥ng c√≥ c√°c quy·ªÅn sau ƒë·ªÉ th·ª±c thi l·ªánh n√†y: ```\n{}```" \
            .format(", ".join(perms_translations.get(perm, perm) for perm in error.missing_permissions))

    elif isinstance(error, commands.MissingPermissions):
        error_txt = "B·∫°n kh√¥ng c√≥ c√°c quy·ªÅn sau ƒë·ªÉ th·ª±c hi·ªán l·ªánh n√†y: ```\n{}```" \
            .format(", ".join(perms_translations.get(perm, perm) for perm in error.missing_permissions))

    elif isinstance(error, GenericError):
        error_txt = error.text

    elif isinstance(error, NotRequester):
        error_txt = "**B·∫°n ph·∫£i y√™u c·∫ßu √¢m nh·∫°c hi·ªán t·∫°i ho·∫∑c n·∫±m trong danh s√°ch DJ ho·∫∑c c√≥ quy·ªÅn" \
                    "** Qu·∫£n l√Ω c√°c k√™nh ** ƒë·ªÉ nh·∫£y nh·∫°c.**"

    elif isinstance(error, DiffVoiceChannel):
        error_txt = "**B·∫°n ph·∫£i ·ªü tr√™n k√™nh tho·∫°i hi·ªán t·∫°i c·ªßa t√¥i ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.**"

    elif isinstance(error, NoSource):
        error_txt = "**Hi·ªán t·∫°i kh√¥ng c√≥ b√†i h√°t trong m√°y nghe nh·∫°c.**"

    elif isinstance(error, NoVoice):
        error_txt = "**B·∫°n ph·∫£i tham gia m·ªôt k√™nh tho·∫°i ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.**"

    elif isinstance(error, NoPlayer):
        try:
            error_txt = f"**Kh√¥ng c√≥ ng∆∞·ªùi ch∆°i ƒëang ho·∫°t ƒë·ªông tr√™n k√™nh {ctx.author.voice.channel.mention}.**"
        except AttributeError:
            error_txt = "**Kh√¥ng c√≥ tr√¨nh ph√°t n√†o ƒë∆∞·ª£c kh·ªüi t·∫°o tr√™n m√°y ch·ªß.**"

    elif isinstance(error, commands.UserInputError) and ctx.command.usage:

        prefix = ctx.prefix if str(ctx.me.id) not in ctx.prefix else f"@{ctx.me.display_name} "

        error_txt = "### B·∫°n ƒë√£ s·ª≠ d·ª•ng l·ªánh kh√¥ng ch√≠nh x√°c.\n" \
                    f'üìò **‚†ÇC√°ch s·ª≠ d·ª•ng:** ```\n{ctx.command.usage.replace("{prefix}", prefix).replace("{cmd}", ctx.command.name).replace("{parent}", ctx.command.full_parent_name)}```\n' \
                    f"‚ö†Ô∏è **‚†ÇL∆∞u √Ω khi s·ª≠ d·ª•ng ƒë·ªëi s·ªë trong l·ªánh:** ```\n" \
                    f"[] = B·∫Øt bu·ªôc | <> = Kh√¥ng b·∫Øt bu·ªôc```\n"

    elif isinstance(error, MissingSpotifyClient):
        error_txt = "**Li√™n k·∫øt Spotify kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ t·∫°i th·ªùi ƒëi·ªÉm n√†y.**"

    elif isinstance(error, commands.NoPrivateMessage):
        error_txt = "L·ªánh n√†y kh√¥ng th·ªÉ ch·∫°y tr√™n tin nh·∫Øn ri√™ng t∆∞."

    elif isinstance(error, commands.CommandOnCooldown):
        remaing = int(error.retry_after)
        if remaing < 1:
            remaing = 1
        error_txt = "**B·∫°n ph·∫£i ƒë·ª£i {} m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.**".format(time_format(int(remaing) * 1000, use_names=True))

    elif isinstance(error, EmptyFavIntegration):

        if isinstance(ctx, disnake.MessageInteraction):
            error_txt = "**B·∫°n kh√¥ng c√≥ d·∫•u trang/t√≠ch h·ª£p**\n\n" \
                         "`N·∫øu mu·ªën, b·∫°n c√≥ th·ªÉ th√™m d·∫•u trang ho·∫∑c nh√∫ng ƒë·ªÉ s·ª≠ d·ª•ng " \
                         "l·∫ßn sau n√∫t n√†y. ƒê·ªÉ l√†m nh∆∞ v·∫≠y, b·∫°n c√≥ th·ªÉ nh·∫•p v√†o m·ªôt trong c√°c n√∫t b√™n d∆∞·ªõi.`"
        else:
            error_txt = "**B·∫°n ƒë√£ s·ª≠ d·ª•ng l·ªánh m√† kh√¥ng bao g·ªìm t√™n ho·∫∑c li√™n k·∫øt c·ªßa b√†i h√°t ho·∫∑c video v√† b·∫°n kh√¥ng c√≥ " \
                         "y√™u th√≠ch ho·∫∑c t√≠ch h·ª£p ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y theo c√°ch n√†y m·ªôt c√°ch tr·ª±c ti·∫øp...**\n\n" \
                         "`N·∫øu mu·ªën, b·∫°n c√≥ th·ªÉ th√™m d·∫•u trang ho·∫∑c nh√∫ng ƒë·ªÉ s·ª≠ d·ª•ng " \
                         "l·ªánh m√† kh√¥ng bao g·ªìm t√™n ho·∫∑c li√™n k·∫øt. B·∫°n c√≥ th·ªÉ l√†m nh∆∞ v·∫≠y b·∫±ng c√°ch nh·∫•p v√†o m·ªôt trong c√°c n√∫t b√™n d∆∞·ªõi.`"

        components = [
            disnake.ui.Button(label="M·ªü tr√¨nh qu·∫£n l√Ω y√™u th√≠ch",
                              custom_id="musicplayer_fav_manager", emoji="‚≠ê"),
            disnake.ui.Button(label="M·ªü Tr√¨nh qu·∫£n l√Ω t√≠ch h·ª£p",
                              custom_id="musicplayer_integration_manager", emoji="üí†")
        ]

    elif isinstance(error, commands.MaxConcurrencyReached):
        txt = f"{error.number} vezes " if error.number > 1 else ''
        txt = {
            commands.BucketType.member: f"B·∫°n ƒë√£ s·ª≠ d·ª•ng l·ªánh n√†y {txt}kh√¥ng ph·∫£i m√°y ch·ªß",
            commands.BucketType.guild: f"L·ªánh n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng {txt}kh√¥ng ph·∫£i m√°y ch·ªß",
            commands.BucketType.user: f"B·∫°n ƒë√£ s·ª≠ d·ª•ng l·ªánh n√†y {txt}",
            commands.BucketType.channel: f"B·∫°n ƒë√£ s·ª≠ d·ª•ng l·ªánh n√†y r·ªìi {txt}no canal atual",
            commands.BucketType.category: f"B·∫°n ƒë√£ s·ª≠ d·ª•ng l·ªánh n√†y r·ªìi {txt}na categoria do canal atual",
            commands.BucketType.role: f"B·∫°n ƒë√£ s·ª≠ d·ª•ng l·ªánh n√†y r·ªìi {txt}por um membro que possui o cargo permitido",
            commands.BucketType.default: f"B·∫°n ƒë√£ s·ª≠ d·ª•ng l·ªánh n√†y r·ªìi {txt}por algu√©m"
        }

        error_txt = f"{ctx.author.mention} **{txt[error.per]} V√† n√≥ ƒë√£ kh√¥ng c√≥{'s' if error.number > 1 else ''} " \
                    f"s·ª≠ d·ª•ng{'s' if error.number > 1 else ''} ho√†n th√†nh{'s' if error.number > 1 else ''}!**"

    elif isinstance(error, TrackNotFound):
        error_txt = "**Kh√¥ng c√≥ k·∫øt qu·∫£ cho t√¨m ki·∫øm c·ªßa b·∫°n...**"

    if isinstance(error, ServerSelectionTimeoutError) and os.environ.get("REPL_SLUG"):
        error_txt = "ƒê√£ ph√°t hi·ªán l·ªói dns trong repl.it khi·∫øn t√¥i kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi c∆° s·ªü d·ªØ li·ªáu c·ªßa m√¨nh" \
                     "t·ª´ mongo/atlas. T√¥i s·∫Ω kh·ªüi ƒë·ªông l·∫°i v√† s·∫Ω s·ªõm ho·∫°t ƒë·ªông tr·ªü l·∫°i..."
        kill_process = True

    elif isinstance(error, WavelinkException):
        if "Unknown file format" in (wave_error := str(error)):
            error_txt = "**Kh√¥ng h·ªó tr·ª£ cho li√™n k·∫øt ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh...**"
        elif "This video is not available" in wave_error:
            error_txt = "**Video n√†y kh√¥ng c√≥ s·∫µn ho·∫∑c ri√™ng t∆∞...**"
        elif "The playlist does not exist" in wave_error:
            error_txt = "**Danh s√°ch ph√°t kh√¥ng t·ªìn t·∫°i (ho·∫∑c l√† ri√™ng t∆∞).**"
        elif "not made this video available in your country" in wave_error.lower() or \
                "who has blocked it in your country on copyright grounds" in wave_error.lower():
            error_txt = "**N·ªôi dung c·ªßa li√™n k·∫øt n√†y kh√¥ng c√≥ s·∫µn trong khu v·ª±c n∆°i t√¥i ƒëang l√†m vi·ªác...**"

    if not error_txt:
        full_error_txt = "".join(traceback.format_exception(type(error), error, error.__traceback__))
        print(full_error_txt)
    else:
        full_error_txt = ""

    return error_txt, full_error_txt, kill_process, components