# -*- coding: utf-8 -*-
import datetime
import itertools

import disnake

from utils.music.converters import fix_characters, time_format, get_button_style, music_source_image
from utils.music.models import LavalinkPlayer
from utils.others import PlayerControls


class Nahida:

    __slots__ = ("name", "preview")

    def __init__(self):
        self.name = "nahida"
        self.preview = "https://media.discordapp.net/attachments/554468640942981147/1047184546531115078/skin_default.png?width=377&height=520"

    def setup_features(self, player: LavalinkPlayer):
        player.mini_queue_feature = True
        player.controller_mode = True
        player.auto_update = 0
        player.hint_rate = player.bot.config["HINT_RATE"]
        player.static = False

    def load(self, player: LavalinkPlayer) -> dict:

        data = {
            "content": None,
            "embeds": []
        }

        embed = disnake.Embed(color=player.bot.get_color(player.guild.me))
        embed_queue = None
        vc_txt = ""

        if not player.paused:
            embed.set_author(
                name="ƒêang ph√°t:",
                icon_url=music_source_image(player.current.info["sourceName"])
            )

        else:
            embed.set_author(
                name="T·∫°m d·ª´ng:",
                icon_url="https://cdn.discordapp.com/attachments/480195401543188483/896013933197013002/pause.png"
            )

        if player.current_hint:
            embed.set_footer(text=f"üí° G·ª£i √Ω: {player.current_hint}")
        elif player.node.identifier != "LOCAL":
            embed.set_footer(
                text=str(player),
                icon_url="https://cdn.discordapp.com/emojis/1105722934317826088.gif?size=96&quality=lossless"
            )

        player.mini_queue_feature = True

        duration = "> üî¥ **‚†Çƒê·ªô d√†i ** `Livestream`" if player.current.is_stream else \
            (f"> ** ƒê·ªô d√†i ** `{time_format(player.current.duration)} [`" +
            f"<t:{int((disnake.utils.utcnow() + datetime.timedelta(milliseconds=player.current.duration - player.position)).timestamp())}:R>`]`"
            if not player.paused else '')

        txt = f"[`{player.current.single_title}`]({player.current.uri})\n\n" \
              f"{duration}\n" \
              f"> **‚†ÇNg∆∞·ªùi t·∫£i l√™n: ** {player.current.authors_md}\n" \
              f"> **‚†ÇNg∆∞·ªùi m·ªü: ** <@{player.current.requester}>\n" \
              f"> **‚†Ç√Çm l∆∞·ª£ng** `{player.volume}%`"
        if player.current.track_loops:
            txt += f"\n> **‚†ÇL·∫∑p l·∫°i c√≤n l·∫°i:** `{player.current.track_loops}`"

        if player.loop:
            if player.loop == 'current':
                e = ''; m = '√¢m nh·∫°c hi·ªán t·∫°i'
            else:
                e = ''; m = 'H√†ng ngang'
            txt += f"\n> {e} **‚†ÇCh·∫ø ƒë·ªô l·∫∑p l·∫°i:** `{m}`"

        if player.nightcore:
            txt += f"\n> üá≥ **Hi·ªáu ·ª©ng Nightcore:** `K√≠ch Ho·∫°t`"

        if player.current.album_name:
            txt += f"\n> üíΩ **‚†ÇAlbum:** [`{fix_characters(player.current.album_name, limit=16)}`]({player.current.album_url})"

        if player.current.playlist_name:
            txt += f"\n> üìë **‚†ÇPlaylist:** [`{fix_characters(player.current.playlist_name, limit=16)}`]({player.current.playlist_url})"

        if (qlenght:=len(player.queue)) and not player.mini_queue_enabled:
            txt += f"\n> **‚†ÇB√†i h√°t trong d√≤ng:** `{qlenght}`"

        if player.keep_connected:
            txt += "\n> ‚ôæÔ∏è **‚†ÇCh·∫ø ƒë·ªô 24/7:** `K√≠ch ho·∫°t`"

        elif player.restrict_mode:
            txt += f"\n> üîí **‚†ÇCh·∫ø ƒë·ªô h·∫°n ch·∫ø:** `K√≠ch Ho·∫°t`"

        txt += f"{vc_txt}\n"

        if player.command_log:
            txt += f"```ansi\n [34;1mT∆∞∆°ng t√°c cu·ªëi c√πng[0m```**‚îï {player.command_log_emoji} ‚†Ç**{player.command_log}\n"

        if len(player.queue) and player.mini_queue_enabled:

            queue_txt = "\n".join(
                f"`{(n + 1):02}) [{time_format(t.duration) if not t.is_stream else 'üî¥ Livestream'}]` [`{fix_characters(t.title, 38)}`]({t.uri})"
                for n, t in (enumerate(itertools.islice(player.queue, 3)))
            )

            embed_queue = disnake.Embed(title=f"B√†i h√°t trong d√≤ng:{qlenght}", color=player.bot.get_color(player.guild.me),
                                        description=f"\n{queue_txt}")

            if not player.loop and not player.keep_connected and not player.paused:

                queue_duration = 0

                for t in player.queue:
                    if not t.is_stream:
                        queue_duration += t.duration

                embed_queue.description += f"\n`[‚åõ C√°c b√†i h√°t k·∫øt th√∫c` <t:{int((disnake.utils.utcnow() + datetime.timedelta(milliseconds=(queue_duration + (player.current.duration if not player.current.is_stream else 0)) - player.position)).timestamp())}:R> `‚åõ]`"

            embed_queue.set_image(url="https://cdn.discordapp.com/attachments/1117523937912422422/1126039243135930488/nahida_dance_gif.gif")

        embed.description = txt
        embed.set_image(url="https://cdn.discordapp.com/attachments/1117523937912422422/1126039243135930488/nahida_dance_gif.gif")
        embed.set_thumbnail(url=player.current.thumb)

        data["embeds"] = [embed_queue, embed] if embed_queue else [embed]

        data["components"] = [
            disnake.ui.Button(emoji="‚èØÔ∏è", custom_id=PlayerControls.pause_resume, style=get_button_style(player.paused)),
            disnake.ui.Button(emoji="‚èÆÔ∏è", custom_id=PlayerControls.back),
            disnake.ui.Button(emoji="<:terytery:1117800053365551165>", custom_id=PlayerControls.stop),
            disnake.ui.Button(emoji="‚è≠Ô∏è", custom_id=PlayerControls.skip),
            disnake.ui.Button(emoji="<:music_queue:703761160679194734>", custom_id=PlayerControls.queue, label="[ Queue ]"),
            disnake.ui.Select(
                      placeholder="C√°c l·ª±a ch·ªçn kh√°c:",
                custom_id="musicplayer_dropdown_inter",
                min_values=0, max_values=1,
                options=[
                    disnake.SelectOption(
                        label="Th√™m b√†i h√°t", emoji="<:add_music:588172015760965654>",
                        value=PlayerControls.add_song,
                        description="Th√™m m·ªôt b√†i h√°t/danh s√°ch ph√°t theo d√≤ng."
                    ),
                    disnake.SelectOption(
                        label="Th√™m b√†i h√°t v√†o y√™u th√≠ch", emoji="‚≠ê",
                        value=PlayerControls.enqueue_fav,
                        description="Th√™m m·ªôt trong nh·ªØng m·ª•c y√™u th√≠ch c·ªßa b·∫°n trong d√≤ng."
                    ),
                    disnake.SelectOption(
                        label="Tua v·ªÅ ƒë·∫ßu", emoji="‚è™",
                        value=PlayerControls.seek_to_start,
                        description="Tr·ªü l·∫°i th·ªùi gian c·ªßa b√†i h√°t hi·ªán t·∫°i ƒë·∫øn ƒë·∫ßu."
                    ),
                    disnake.SelectOption(
                        label="√Çm l∆∞·ª£ng", emoji="üîä",
                        value=PlayerControls.volume,
                        description="ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng."
                    ),
                    disnake.SelectOption(
                        label="Pha tr·ªôn", emoji="üîÄ",
                        value=PlayerControls.shuffle,
                        description="Tr·ªôn ng·∫´u nhi√™n."
                    ),  
                    disnake.SelectOption(
                        label="Th√™m l·∫°i b√†i h√°t", emoji="üé∂",
                        value=PlayerControls.readd,
                        description="Th√™m l·∫°i c√°c b√†i h√°t ƒë√£ ph√°t l·∫°i v√†o h√†ng ƒë·ª£i."
                    ),
                    disnake.SelectOption(
                        label="L·∫∑p l·∫°i b√†i h√°t", emoji="üîÅ",
                        value=PlayerControls.loop_mode,
                        description="K√≠ch ho·∫°t/V√¥ hi·ªáu h√≥a nh·∫°c/H√†ng ƒë·ª£i l·∫∑p l·∫°i."
                    ),
                    disnake.SelectOption(
                        label="Nightcore", emoji="üá≥",
                        value=PlayerControls.nightcore,
                        description="Sped up(c√≥ v·∫≠y th√¥i t·ª± hi·ªÉu ƒëi)"
                    ),
                    disnake.SelectOption(
                        label="K√≠ch ho·∫°t/V√¥ hi·ªáu h√≥a ch·∫ø ƒë·ªô b·ªã h·∫°n ch·∫ø", emoji="üîê",
                        value=PlayerControls.restrict_mode,
                        description="NgƒÉn ch·∫ø ƒë·ªô h·∫°n ch·∫ø"
                    ),
                ]
            ),
        ]

        if player.mini_queue_feature:
            data["components"][5].options.append(
                disnake.SelectOption(
                    label="Danh s√°ch ph√°t mini c·ªßa ng∆∞·ªùi ch∆°i", emoji="<:music_queue:703761160679194734>",
                    value=PlayerControls.miniqueue,
                    description="K√≠ch ho·∫°t/v√¥ hi·ªáu h√≥a Danh s√°ch ph√°t mini c·ªßa ng∆∞·ªùi ch∆°i."
                )
            )

        return data

def load():
    return Nahida()
